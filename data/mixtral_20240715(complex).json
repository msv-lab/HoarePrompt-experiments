{
  "2": {
    "specification": "Write a function to find the shared elements from the given two lists.",
    "code": "def similar_elements(test_list1, test_list2):\r\n  res = set(test_list1) & set(test_list2)\r\n  return (res)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 2,
    "precondition": "test\\_list1 and test\\_list2 are lists."
  },
  "3": {
    "specification": "Write a python function to identify non-prime numbers.",
    "code": "import math\r\ndef is_not_prime(n):\r\n    result = n > 1\r\n    if result == True:\r\n        for i in range(2,int(math.sqrt(n)) + 1):\r\n            if n % i == 0:\r\n                result = False\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 3,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "4": {
    "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
    "code": "import heapq\r\ndef heap_queue_largest(numbers, n):\r\n    return heapq.nlargest(n, numbers)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 4,
    "precondition": "numbers is a list of integers, and n is a non-negative integer such that 0 <= n <= len(numbers)."
  },
  "6": {
    "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def differ_At_One_Bit_Pos(num1, num2):\r\n    return (num1 ^ num2) & (num1 | num2) != 0\n",
    "total_tests": 6,
    "passed_tests": 4,
    "test_result": 0.6666666666666666,
    "task_id": 6,
    "precondition": "num1 and num2 are integers."
  },
  "7": {
    "specification": "Write a function to find all words which are at least 4 characters long in a string.",
    "code": "def find_char_long(str1):\r\n    str2 = str1.split()\r\n    res = [i for i in str2 if len(i) >= 4]\r\n    return set(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 7,
    "precondition": "str1 is a string."
  },
  "8": {
    "specification": "Write a function to find squares of individual elements in a list.",
    "code": "def square_nums(nums\r\n{\r\n    return [num \\*\\* 2 for num in nums]\r\n}\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 8,
    "precondition": "nums is a list of numbers."
  },
  "9": {
    "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
    "code": "def find_Rotations(str1):\r\n    length = len(str1)\r\n    if length == 0:\r\n        return 0\r\n    elif length == 1:\r\n        return 1\r\n    elif length == 2:\r\n        if str1[0] == str1[1\u89c8]:\r\n            return 1\r\n        else:\r\n            return 0\r\n    else:\r\n        rotated = str1[1:] + str1[0]\r\n        count = 1\r\n        while rotated != str1 and count < length:\r\n            rotated = rotated[1:] + rotated[0]\r\n            count += 1\r\n        if count == length:\r\n            return 0\r\n        else:\r\n            return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 9,
    "precondition": "str1 is a non-empty string."
  },
  "11": {
    "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(input_string,char):\r\n    if input_string.count(char) < 2:\r\n        return input_string\r\n    else:\r\n        first_index = input_string.index(char)\r\n        last_index = input_string.rindex(char)\r\n        removed_string = input_string[:first_index] + input_string[first_index+1:last_index] + input_string[last_index+1:]\r\n        return removed_string\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 11,
    "precondition": "input\\_string is a string and char is a single character."
  },
  "12": {
    "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(matrix)\r\n    return(sorted(matrix, key=sum))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 12,
    "precondition": "matrix is a list of lists of numbers."
  },
  "14": {
    "specification": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_volume(base_width, base_length, height)\r\n\tbase_area = (base_width * base_length) / 2\r\n\tvolume = (base_area * height) / 2\r\n\treturn volume\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 14,
    "precondition": "base\\_width, base\\_length, and height are positive real numbers."
  },
  "16": {
    "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
    "code": "def text_lowercase_underscore(text):\r\n    if \"_\" in text:\r\n        res = text.split(\"_\")\r\n        for i in res:\r\n            if not ((i.islower()) and (i != \"_\")\r\n                return (False)\r\n        return (True)\r\n    else:\r\n        return (False)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 16,
    "precondition": "text is a string."
  },
  "17": {
    "specification": "Write a function that returns the perimeter of a square given its side length as input.",
    "code": "def square_perimeter(side\\_length):\r\n    perimeter = side\\_length \\* 4\r\n    return perimeter\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 17,
    "precondition": "side\\_length is a positive integer."
  },
  "18": {
    "specification": "Write a function to remove characters from the first string which are present in the second string.",
    "code": "def remove_dirty_chars(string1, string2):\r\n    for char in string2:\r\n        if char in string1:\r\n            string1 = string1.replace(char, \"\")\r\n    return string1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 18,
    "precondition": "string1 and string2 are strings."
  },
  "19": {
    "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
    "code": "def test_duplicate(arr):\r\n    result = False\r\n    seen = set()\r\n    for item in arr:\r\n        if item in seen:\r\n            result = True\r\n            break\r\n        seen.add(item)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 19,
    "precondition": "arr is a list of integers."
  },
  "20": {
    "specification": "Write a function to check if the given number is woodball or not.",
    "code": "def is_woodall(n):\r\n    return n == n * (2 ** (n + 1)) - 1\n\nassert is_woodall(383) == True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 20,
    "precondition": "n is an integer."
  },
  "56": {
    "specification": "Write a python function to check if a given number is one less than twice its reverse.",
    "code": "def check(n):\r\n    rev = int(str(n)[::-1\\])\r\n    if n == 2 * rev + 1:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 56,
    "precondition": "n is an integer."
  },
  "57": {
    "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
    "code": "def find_Max_Num(lst):\r\n    return int(''.join(str(x) for x in sorted(lst, reverse=True))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 57,
    "precondition": "lst is a list of integers."
  },
  "58": {
    "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
    "code": "def opposite_Signs(num1, num2):\r\n    return num1 > 0 and num2 < 0 or num1 < 0 and num2 > 0\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 58,
    "precondition": "num1 and num2 are integers."
  },
  "59": {
    "specification": "Write a function to find the nth octagonal number.",
    "code": "def is_octagonal(n):\r\n    return (n*(n*7-5))//2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 59,
    "precondition": "n is an integer."
  },
  "61": {
    "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
    "code": "def count_Substrings(str1):\r\n    count = 0\r\n    n = len(str1)\r\n    for i in range(n):\r\n        sum = 0\r\n        for j in range(i, n):\r\n            sum += int(str1[j])\r\n            if sum == j-i+1:\r\n                count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 61,
    "precondition": "str1 is a non-empty string."
  },
  "62": {
    "specification": "Write a python function to find smallest number in a list.",
    "code": "def smallest_num(lst):\r\n    return min(lst)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 62,
    "precondition": "lst is a list of comparable objects."
  },
  "63": {
    "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "code": "def max_difference(tpl\\_list):\r\n\tdiff\\_list = []\r\n\tfor tpl in tpl\\_list:\r\n\t\tdiff\\_list.append(tpl[1] - tpl[0])\r\n\treturn max(diff\\_list)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 63,
    "precondition": "tpl\\_list is a list of tuples, where each tuple contains two integers such that tpl[1] > tpl[0"
  },
  "64": {
    "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
    "code": "def subject_marks(subject\\_grades):\r\n    return sorted(subject\\_grades, key = lambda x: x[1])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 64,
    "precondition": "subject\\_grades is a list of tuples where each tuple contains at least two elements."
  },
  "65": {
    "specification": "Write a function to flatten a list and sum all of its elements.",
    "code": "def recursive_list_sum(nested\\_list)\r\n    total = 0\r\n    for sublist in nested\\_list:\r\n        if (isinstance(sublist, list))\r\n            total += recursive\\_list\\_sum(sublist)\r\n        else:\r\n            total += sublist\r\n    return total\r\nrecursive\\_list\\_sum([1, 2, [3,4],[5,6]]) # returns 21\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 65,
    "precondition": "nested\\_list is a list that may contain other lists or integers."
  },
  "66": {
    "specification": "Write a python function to count the number of positive numbers in a list.",
    "code": "def pos_count(num\\_list):\r\n    return len([x for x in num\\_list if x > 0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 66,
    "precondition": "num\\_list is a list of integers."
  },
  "67": {
    "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
    "code": "import math\r\ndef bell_number(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        arr = [1]\r\n        for i in range(2, n+1):\r\n            temp = 0\r\n            for j in range(1, i+1):\r\n                temp += math.comb(i-1, j-1) * arr[j-1]\r\n            arr.append(temp)\r\n        return arr[n]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 67,
    "precondition": "n is a non-negative integer."
  },
  "68": {
    "specification": "Write a python function to check whether the given array is monotonic or not.",
    "code": "def is_Monotonic(arr):\r\n    inc = dec = True\r\n    for i in range(1,len(arr):\r\n        if arr[i] > arr[i-1];\r\n            dec = False\r\n        elif arr[i] < arr[i-1]\r\n            inc = False\r\n    return inc or dec\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 68,
    "precondition": "arr is a list of comparable elements."
  },
  "69": {
    "specification": "Write a function to check whether a list contains the given sublist or not.",
    "code": "def is_sublist(a, b):\r\n    for i in range(len(a) - len(b) + 1):\r\n        if a[i:i + len(b)] == b:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 69,
    "precondition": "a and b are lists."
  },
  "70": {
    "specification": "Write a function to find whether all the given tuples have equal length or not.",
    "code": "def get_equal(tup\\_list):\r\n  ref\\_length = len(tup\\_list[0])\r\n  for i in tup\\_list:\r\n    if len(i) != ref\\_length:\r\n      return False\r\n  return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 70,
    "precondition": "tup\\_list is a list of tuples."
  },
  "71": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def comb_sort(arr):\r\n    gap = len(arr)\r\n    swapped = True\r\n    while gap != 1 or swapped==True:\r\n        gap = int(gap/1.3)\r\n        if gap < 1:\r\n            gap = 1\r\n        i = 0\r\n        swapped = False\r\n        while i + gap < len(arr):\r\n            if arr[i] > arr[i+gap]:\r\n                arr[i], arr[i+gap] = arr[i+gap], arr[i]\r\n                swapped = True\r\n            i = i + 1\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 71,
    "precondition": "arr is a list of comparable elements."
  },
  "72": {
    "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
    "code": "import math\ndef dif_Square(n):\r\n    for i in range(int(math.sqrt(n)) + 1):\r\n        j = i * i\r\n        if (n - j) > 0 and (n - j) ** 0.5 % 1 == 0:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 72,
    "precondition": "n is an integer."
  },
  "74": {
    "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
    "code": "def is_samepatterns(colors, symbols)\r\n    if len(colors) != len(symbols):\r\n        return False\r\n    color\\_dict = {color:symbol for color, symbol in zip(colors, symbols)\r\n    for color in set(colors):\r\n        if colors.count(color) > 1:\r\n            if color\\_dict[color] != color\\_dict[colors[colors.index(color)+1]]:\r\n                return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 74,
    "precondition": "colors and symbols are lists of the same length, and each element in colors and symbols is a string."
  },
  "75": {
    "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "code": "def find_tuples(tup_list, k):\r\n    res = []\r\n    for i in tup_list:\r\n        if all(x % k == 0 for x in i):\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 75,
    "precondition": "tup\\_list is a list of tuples and k is an integer."
  },
  "77": {
    "specification": "Write a python function to find whether a number is divisible by 11.",
    "code": "def is_Diff(n):\r\n    if n < 0:\r\n        n = -n\r\n    while n > 0:\r\n        r = n % 10\r\n        n = n // 10\r\n        if (n % 10 + r) % 11 != 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 77,
    "precondition": "n is an integer."
  },
  "79": {
    "specification": "Write a python function to check whether the length of the word is odd or not.",
    "code": "def word_len(word):\r\n    if len(word) % 2 != 0:\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 79,
    "precondition": "word is a string."
  },
  "80": {
    "specification": "Write a function to find the nth tetrahedral number.",
    "code": "def tetrahedral_number(n):\r\n    return (n*(n+1)*(n+2))//6\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 80,
    "precondition": "n is an integer."
  },
  "82": {
    "specification": "Write a function to find the volume of a sphere.",
    "code": "import math\ndef volume_sphere(r):\n    return 4/3 * math.pi * (r**3)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 82,
    "precondition": "r is a non-negative floating point number representing the radius of the sphere."
  },
  "83": {
    "specification": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
    "code": "def get_Char(s):\r\n    res = 0\r\n    for i in s:\r\n        res = (res + ord(i)) % 26\r\n    return chr(res + 65)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 83,
    "precondition": "s is a non-empty string."
  },
  "84": {
    "specification": "Write a function to find the nth number in the newman conway sequence.",
    "code": "def sequence(n):\r\n    if n == 1:\r\n        return \"1\"\r\n    else:\r\n        seq = \"1\"\r\n        for i in range(2, n):\r\n            count = 1\r\n            result = \"\"\r\n            while i < len(seq):\r\n                if seq[i] == seq[i-1\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432]\r\n                    count += 1\r\n                else:\r\n                    result += str(count) + seq[i-1]\r\n                    count = 1\r\n            i += 1\r\n            result += str(count) + seq[i-1]\r\n            seq = result\r\n        return seq\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 84,
    "precondition": "n is a positive integer."
  },
  "85": {
    "specification": "Write a function to find the surface area of a sphere.",
    "code": "import math\r\ndef surfacearea_sphere(radius):\r\n    return 4 * math.pi * (radius ** 2)\r\ntestcase = 10\r\nassert math.isclose(surfacearea_sphere(testcase), 1256.6370614359173, rel_tol=0.001)\r\nprint(\"Test Case Passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 85,
    "precondition": "radius is a non-negative floating point number."
  },
  "86": {
    "specification": "Write a function to find nth centered hexagonal number.",
    "code": "def centered_hexagonal_number(n):\r\n    return (n*(2*n -1) + 1)\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 86,
    "precondition": "n is an integer."
  },
  "87": {
    "specification": "Write a function to merge three dictionaries into a single dictionary.",
    "code": "def merge_dictionaries_three(dict1, dict2, dict3):\r\n    final_dict = {**dict1, **dict2, **dict3}\r\n    return final_dict\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 87,
    "precondition": "dict1, dict2, and dict3 are dictionaries."
  },
  "88": {
    "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
    "code": "def freq_count(lst):\r\n    return dict((i, lst.count(i)) for i in set(lst))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 88,
    "precondition": "lst is a list."
  },
  "89": {
    "specification": "Write a function to find the closest smaller number than n.",
    "code": "def closest_num(n):\r\n    result = n - 1\r\n    for i in range(n)\r\n        if n % i == 0:\r\n            result = i\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 89,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "90": {
    "specification": "Write a python function to find the length of the longest word.",
    "code": "def len_long(arr):\r\n  return len(max(arr, key=len))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 90,
    "precondition": "arr is a list of strings."
  },
  "91": {
    "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
    "code": "def find_substring(lst, substr)\r\n    for s in lst:\r\n        if substr in s:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 91,
    "precondition": "lst is a list of strings and substr is a string."
  },
  "92": {
    "specification": "Write a function to check whether the given number is undulating or not.",
    "code": "def is_undulating(n):\r\n    if len(str(n)) <= 1:\r\n        return False\r\n    pattern = str(n)[0]\r\n    for i in range(1,len(str(n)))):\r\n        if str(n)[i] != pattern and str(n)[i-1] != pattern:\r\n            return False\r\n        if str(n)[i] != pattern:\r\n            pattern = str(n)[i]\r\n    return True\r\nassert is_undulating(1212121) == True\r\nassert is_undulating(111222) == False\r\nassert is_undulating(2223334) == True\r\nassert is_undulating(123456) == False\r\nassert is_undulating(122333) == False\r\nassert is_undulating(123432) == False\r\nassert is_undulating(111) == False\r\nassert is_undulating(1) == False\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 92,
    "precondition": "n is an integer."
  },
  "93": {
    "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
    "code": "def power(a, b):\r\n  return a**b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 93,
    "precondition": "a and b are integers."
  },
  "94": {
    "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
    "code": "def index_minimum(tuples)\r\n\tmin_index = 0\r\n\tfor i in range(len(tuples):\r\n\t\tif tuples[i][1] < tuples[min_index][1]:\r\n\t\t\tmin_index = i\r\n\treturn tuples[min_index][0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 94,
    "precondition": "tuples is a list of tuples."
  },
  "95": {
    "specification": "Write a python function to find the length of the smallest list in a list of lists.",
    "code": "def Find_Min_Length(lists:\r\n    min_len = len(lists[0])\r\n    for i in range(len(lists):\r\n        if len(lists[i]) < min_len:\r\n            min_len = len(lists[i])\r\n    return min_len\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 95,
    "precondition": "lists is a list of lists."
  },
  "96": {
    "specification": "Write a python function to find the number of divisors of a given integer.",
    "code": "def divisor(n):\r\n    result = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            result += 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 96,
    "precondition": "n is an integer."
  },
  "97": {
    "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
    "code": "def flatten_list(lists):\r\n    flat\\_list = []\r\n    for sublist in lists:\r\n        for element in sublist:\r\n            flat\\_list.append(element)\r\n    return flat\\_list\r\n\r\ndef frequency_lists(lists):\r\n    flat\\_list = flatten_list(lists)\r\n    freq\\_dict = {}\r\n    for num in flat\\_list:\r\n        if num in freq\\_dict:\r\n            freq\\_dict[num] += 1\r\n        else:\r\n            freq\\_dict[num] = 1\r\n    return freq\\_dict\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 97,
    "precondition": "lists is a list of lists containing hashable elements."
  },
  "98": {
    "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "code": "def multiply_num(num\\_list):\r\n    return (sum(num\\_list) / len(num\\_list))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 98,
    "precondition": "num\\_list is a non-empty list of numbers."
  },
  "99": {
    "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
    "code": "def decimal_to_binary(n):\r\n    return bin(n)[2:]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 99,
    "precondition": "n is an integer."
  },
  "100": {
    "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
    "code": "def is\\_palindrome(n):\r\n    return str(n) == str(n)[::-1]\r\ndef next\\_smallest\\_palindrome(n):\r\n    if is\\_palindrome(n):\r\n        return 10\\*int(str(n)[1:]) + int(str(n)[0])\r\n    else:\r\n        while True:\r\n            n = n + 1\r\n            if is\\_palindrome(n):\r\n                return n\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 100,
    "precondition": "n is an integer."
  },
  "101": {
    "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
    "code": "def kth_element(arr, k):\r\n    return sorted(arr)[k-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 101,
    "precondition": "arr is a list of comparable elements, k is an integer such that 1 <= k <= len(arr)."
  },
  "102": {
    "specification": "Write a function to convert a snake case string to camel case string.",
    "code": "def snake_to_camel(snake\\_case\\_string):\r\n    words = snake\\_case\\_string.split(\"\\_\")\r\n    camel\\_case = \"\"\r\n    for word in words:\r\n        camel\\_case += word.capitalize()\r\n    return camel\\_case\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 102,
    "precondition": "snake\\_case\\_string is a string containing only lowercase letters, underscores, and digits."
  },
  "103": {
    "specification": "Write a function to find the Eulerian number a(n, m).",
    "code": "import math\r\ndef eulerian_num(n, m):\r\n    res = 0\r\n    for t in range(m):\r\n        res += math.factorial(m - t) * combinations(n + 1, t + 1)\r\n    res = res / math.factorial(m + 1)\r\n    return res\r\ndef combinations(n, k):\r\n    if n < k:\r\n        return 0\r\n    else:\r\n        return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 103,
    "precondition": "n and m are integers such that n >= 0 and m >= 0."
  },
  "104": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(list\\_of\\_lists):\r\n    return ([sorted(sublist) for sublist in list_of_lists(\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 104,
    "precondition": "list\\_of\\_lists is a list of lists of strings."
  },
  "105": {
    "specification": "Write a python function to count true booleans in the given list.",
    "code": "def count(bool_list)\r\n    return sum(bool_list)\r\nassert count([True,False,True]) == 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 105,
    "precondition": "bool\\_list is a list of booleans."
  },
  "106": {
    "specification": "Write a function to append the given list to the given tuples.",
    "code": "def add_lists(a, b):\r\n    b += a \r\n    return tuple(b)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 106,
    "precondition": "a is a list and b is a tuple."
  },
  "108": {
    "specification": "Write a function to merge three lists into a single sorted list.",
    "code": "def merge_sorted_list(*args):\r\n    res = []\r\n    for i in args:\r\n        if i:\r\n            res += i\r\n    res.sort()\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 108,
    "precondition": "Each argument to the function is either a list of comparable elements or None."
  },
  "109": {
    "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
    "code": "def odd_Equivalent(binary_str, num\\_rotations):\r\n    count = 0\r\n    for i in range(num_rotations):\r\n        binary_str = binary_str[-1] + binary_str[:-1]\r\n        count += binary_str.count(\"1\")\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 109,
    "precondition": "binary\\_str is a string consisting only of '0' and '1' characters, and num\\_rotations is a non-negative integer."
  },
  "111": {
    "specification": "Write a function to find the common elements in given nested lists.",
    "code": "def common_in\\_nested\\_lists(nested\\_list):*\r\n  result = set()\r\n  for i in nested\\_list:\r\n    result = result & set(i)\r\n  return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 111,
    "precondition": "nested\\_list is a list of lists where each element is a list of integers or a single integer."
  },
  "113": {
    "specification": "Write a function to check if a string represents an integer or not.",
    "code": "import re\r\ndef check_integer(inputStr:\r\n\tif re.match(r'^[0-9]+$', inputStr):\r\n\t\treturn True\r\n\treturn False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 113,
    "precondition": "inputStr is a string."
  },
  "115": {
    "specification": "Write a function to check whether all dictionaries in a list are empty or not.",
    "code": "def empty_dit(dict\\_list):\r\n    for i in dict\\_list:\r\n        if i != {}\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 115,
    "precondition": "dict\\_list is a list of dictionaries."
  },
  "116": {
    "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
    "code": "def tuple_to_int(tup)\r\n    return int(''.join(map(str, tup))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 116,
    "precondition": "tup is a tuple of positive integers."
  },
  "117": {
    "specification": "Write a function to convert all possible convertible elements in a list of lists to floats.",
    "code": "def list_to_float(lst):\r\n    return [[float(j) if type(j) is str else j for j in i] for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 117,
    "precondition": "lst is a list of lists where each element in the inner lists can be either a string representing a float or a non-string."
  },
  "118": {
    "specification": "Write a function to convert a string to a list of strings split on the space character.",
    "code": "def string_to_list(str1):\r\n    return str1.split()\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 118,
    "precondition": "str1 is a string."
  },
  "119": {
    "specification": "Write a python function to find the element that appears only once in a sorted array.",
    "code": "def search(arr):\r\n    for i in range(1,len(arr):\r\n        if arr[i] != arr[i-1]\r\n            return arr[i]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 119,
    "precondition": "arr is a sorted list of integers."
  },
  "120": {
    "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
    "code": "def max_product_tuple(lst):\r\n    return max(abs(x*y) for x, y in lst)\r\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 120,
    "precondition": "lst is a list of tuples containing integers."
  },
  "123": {
    "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "code": "def sum_divisors(n):\r\n    sum = 1\r\n    for i in range(2,int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            sum += i\r\n            if i != n // i:\r\n                sum += n // i\r\n    return sum\r\n\r\ndef amicable_numbers_sum(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        div_sum_i = sum_divisors(i)\r\n        if i != div_sum_i:\r\n            div_sum_div_sum_i = sum_divisors(div_sum_i)\r\n            if div_sum_div_sum_i == i:\r\n                sum += i\r\n                print(i, div_sum_i)\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 123,
    "precondition": "n is a positive integer."
  },
  "124": {
    "specification": "Write a function to get the angle of a complex number.",
    "code": "import cmath\r\ndef angle_complex(real, imag\u00a0 \r\n    x = complex(real, imag)\r\n    angle = cmath.phase(x)\r\n    return angle\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 124,
    "precondition": "real and imag are both numbers (can be either int or float)."
  },
  "125": {
    "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "code": "def find_length(binary:\r\n\tmax_diff = 0\r\n\tcount_zero = 0\r\n\tcount_one = 0\r\n\tfor i in binary:\r\n\t\tif i == \"0:\r\n\t\t\tcount_zero += 1\r\n\t\telif i == \"1:\r\n\t\t\tcount_one += 1\r\n\t\tdiff = abs(count_zero - count_one)\r\n\t\tif diff > max_diff:\r\n\t\t\tmax_diff = diff\r\n\t\tif count_zero > count_one:\r\n\t\t\tcount_one = 0\r\n\t\t\tcount_zero = 0\r\n\t\telse:\r\n\t\t\tcount_zero = 0\r\n\treturn max_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 125,
    "precondition": "binary is a string consisting only of '0' and '1' characters."
  },
  "126": {
    "specification": "Write a python function to find the sum of common divisors of two given numbers.",
    "code": "def sum_common_divisors(num1, num2):\r\n\tdivisors = []\r\n\tfor i in range(1, min(num1, num2) + 1):\r\n\t\tif num1 % i == 0 and num2 % i == 0:\r\n\t\t\tdivisors.append(i)\r\n\treturn sum(divisors)\r\nassert sum_common_divisors(10, 15) == 6\r\nprint(\"Test case passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 126,
    "precondition": "num1 and num2 are positive integers."
  },
  "127": {
    "specification": "Write a function to multiply two integers.",
    "code": "def multiply_int(num1, num2):\r\n    return num1*num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 127,
    "precondition": "num1 and num2 are integers."
  },
  "128": {
    "specification": "Write a function to find words that are longer than n characters from a given list of words.",
    "code": "def long_words(n, words)\r\n\twords_list = words.split(' ')\r\n\tresult = [word for word in words_list if len(word) > n]\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 128,
    "precondition": "n is an integer, and words is a string containing space-separated words."
  },
  "129": {
    "specification": "Write a function to calculate whether the matrix is a magic square.",
    "code": "def magic_square_test(matrix):\n    if len(matrix) != len(matrix[0]):\n        return False\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return False\n    n = rows\n    expected_sum = (n*(n*n + 1))/2\n    for r in range(rows):\n        for c in range(cols):\n            if matrix[r][c] < 1 or matrix[r][c] > n*n:\n                return False\n    for r in range(rows):\n        total = 0\n        for c in range(cols):\n            total += matrix[r][c]\n        if total != expected_sum:\n            return False\n    for c in range(cols):\n        total = 0\n        for r in range(rows):\n            total += matrix[r][c]\n        if total != expected_sum:\n            return False\n    total = 0\n    r = c = 0\n    while r < rows and c < cols:\n        total += matrix[r][c]\n        r += 1\n        c += 1\n    if total != expected_sum:\n        return False\n    total = 0\n    r = rows - 1\n    c = 0\n    while r >= 0 and c < cols:\n        total += matrix[r][c]\n        r -= 1\n        c += 1\n    if total != expected_sum:\n        return False\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 129,
    "precondition": "matrix is a square 2D list of integers."
  },
  "130": {
    "specification": "Write a function to find the item with maximum frequency in a given list.",
    "code": "def max_occurrences(lst):\r\n    data = {}\r\n    for item in lst:\r\n        if item in data:\r\n            data[item] += 1\r\n        else:\r\n            data[item] = 1\r\n    max_count = 0\r\n    max_item = None\r\n    for key, value in data.items():\r\n        if value > max_count:\r\n            max_count = value\r\n            max_item = key\r\n    return max_item\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 130,
    "precondition": "lst is a list of hashable objects."
  },
  "131": {
    "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
    "code": "def reverse_vowels(s):\r\n    vowels = set(\"aeiouAEIOUY\")\r\n    i, j = 0, len(s) - 1\r\n    s = list(s)\r\n    while i < j:\r\n        if s[i] in vowels:\r\n            while s[j] not in vowels:\r\n                j -= 1\r\n            s[i], s[j] = s[j], s[i]\r\n            i += 1\r\n            j -= 1\r\n        else:\r\n            i += 1\r\n    return \"\".join(s)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 131,
    "precondition": "s is a string."
  },
  "132": {
    "specification": "Write a function to convert a tuple to a string.",
    "code": "def tup_string(tup*\r\n\treturn ''.join(tup)\r\n\t\r\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\r\n\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 132,
    "precondition": "tup is a tuple."
  },
  "133": {
    "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
    "code": "def sum_negativenum(numbers):\r\n    return sum(x for x in numbers if x < 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 133,
    "precondition": "numbers is a list of integers."
  },
  "135": {
    "specification": "Write a function to find the nth hexagonal number.",
    "code": "def hexagonal_num(n):\r\n\treturn n*(2*n - 1)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 135,
    "precondition": "n is an integer."
  },
  "137": {
    "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
    "code": "def zero_count(arr):\r\n    non_zero_count = len([i for i in arr if i != 0));\r\n    zero_count = len(arr) - non_zero_count\r\n    result = zero_count / non_zero_count\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 137,
    "precondition": "arr is a list of integers."
  },
  "138": {
    "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "code": "def is_Sum_Of_Powers_Of_Two(n):\r\n    if n == 1:\r\n        return True\r\n    while n != 0:\r\n        if n & 1 == 0:\r\n            n = n >> 1\r\n        else:\r\n            n = n - 1\r\n            if n % 3 == 0:\r\n                return False\r\n    return n == 0\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 138,
    "precondition": "n is an integer."
  },
  "139": {
    "specification": "Write a function to find the circumference of a circle.",
    "code": "import math\r\ndef circle_circumference(radius):\r\n    return 2 * math.pi * radius\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 139,
    "precondition": "radius is a non-negative floating point number."
  },
  "140": {
    "specification": "Write a function to flatten the list of lists into a single set of numbers.",
    "code": "def extract_singly(nested\\_list:\r\n    result = set()\r\n    for sublist in nested\\_list:\r\n        for i in sublist:\r\n            result.add(i)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 140,
    "precondition": "nested\\_list is a list of lists of numbers."
  },
  "141": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def sort_list(lst):\r\n    return sorted(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 141,
    "precondition": "lst is a list of comparable elements."
  },
  "142": {
    "specification": "Write a function to count number items that are identical in the same position of three given lists.",
    "code": "def count_samepair(list1, list2, list3)\r\n    count = 0\r\n    for i in range(len(list1):\r\n        if list1[i] == list2[i] and list2[i] == list3[i]:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 142,
    "precondition": "list1, list2, and list3 are lists of the same length."
  },
  "143": {
    "specification": "Write a function to find number of lists present in the given tuple.",
    "code": "def find_lists(tupp):\r\n    return len(tupp)\r\ntest\\_case = (([1, 2, 3, 4], [5, 6, 7, 8]))\r\nprint(find\\_lists(test\\_case))\r\nassert find\\_lists(test\\_case) == 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 143,
    "precondition": "tupp is a tuple."
  },
  "145": {
    "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
    "code": "def max_Abs_Diff(numbers):\r\n    max_diff = 0\r\n    for i in range(len(numbers):\r\n        for j in range(i+1,len(numbers):\r\n            diff = abs(numbers[i] - numbers[j])\r\n            if diff > max_diff:\r\n                max_diff = diff\r\n    return max_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 145,
    "precondition": "numbers is a list of integers."
  },
  "160": {
    "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
    "code": "def find_solution(a, b, n):\r\n    if a == 0 and b == 0:\r\n        return None\r\n    elif a == 0:\r\n        if n % b == 0:\r\n            return (0, n // b)\r\n        else:\r\n            return None\r\n    elif b == 0:\r\n        if n % a == 0:\r\n            return (n // a, 0)\r\n        else:\r\n            return None\r\n    else:\r\n        x = n // a\r\n        y = 0\r\n        while x > 0:\r\n            if (x * a + y * b) == n:\r\n                return (x, y)\r\n            y += 1\r\n            x -= 1\r\n        return None\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 160,
    "precondition": "a and b are integers, n is an integer such that a, b, and n are not all zero."
  },
  "161": {
    "specification": "Write a function to remove all elements from a given list present in another list.",
    "code": "def remove_elements(lst, sec_lst):\r\n  for i in sec_lst:\r\n    if i in lst:\r\n      lst.remove(i)\r\n  return lst\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 161,
    "precondition": "lst and sec\\_lst are lists."
  },
  "162": {
    "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
    "code": "def sum_series(n):\r\n    sum = 0\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            sum += n - 2*i \r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 162,
    "precondition": "n is an integer and n >= 0."
  },
  "163": {
    "specification": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
    "code": "import math\ndef area_polygon(n, s):\n    return (n * s * s) / (4 * math.tan(math.pi / n))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 163,
    "precondition": "n is an integer greater than 2, and s is a positive real number."
  },
  "164": {
    "specification": "Write a function to determine if the sum of the divisors of two integers are the same.",
    "code": "import math\r\ndef find_divisors(n):\r\n    divs = []\r\n    for i in range(1,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            divs.append(i)\r\n            divs.append(int(n/i))\r\n    divs = list(set(divs))\r\n    return divs\r\n\r\ndef are_equivalent(n1, n2):\r\n    div1 = find_divisors(n1)\r\n    div2 = find_divisors(n2)\r\n    return sum(div1) == sum(div2)\r\n\r\nassert are_equivalent(36, 57) == False\r\nassert are_equivalent(24, 36) == True\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 164,
    "precondition": "n1 and n2 are integers greater than 0."
  },
  "165": {
    "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
    "code": "def count_char_position(s):\r\n    count = 0\r\n    for i in range(len(s):\r\n        if s[i] == chr(i+97).lower() or s[i] == chr(i+65).upper(): \r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 165,
    "precondition": "s is a string"
  },
  "166": {
    "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
    "code": "def find_even_pair(lst*\r\n    count = 0\r\n    for i in range(len(lst):\r\n        for j in range(i, len(lst):\r\n            if (lst[i] ^ lst[j]) % 2 == 0:\r\n                count += 1 \r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 166,
    "precondition": "lst is a list of integers."
  },
  "167": {
    "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
    "code": "def next_power_of_2(n):\r\n    if n <= 0:\r\n        return 1\r\n    else:\r\n        return 2 ** math.ceil(math.log2(n))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 167,
    "precondition": "n is an integer."
  },
  "168": {
    "specification": "Write a function to count the number of occurrences of a number in a given list.",
    "code": "def frequency(numbers, num)\r\n    freq = 0\r\n    for i in numbers:\r\n        if i == num:\r\n            freq += 1\r\n    return freq\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 168,
    "precondition": "numbers is a list of integers and num is an integer."
  },
  "170": {
    "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
    "code": "def sum_range_list(lst, start, end):\r\n    return sum(lst[start:end+1])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 170,
    "precondition": "lst is a list of numbers, start and end are integers such that 0 <= start <= end < len(lst)."
  },
  "171": {
    "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
    "code": "import math\r\ndef perimeter_pentagon(side\\_length):\r\n    return side_length * 5\r\nassert perimeter_pentagon(5) == 25\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 171,
    "precondition": "side\\_length is a positive real number representing the length of a side of the regular pentagon."
  },
  "172": {
    "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
    "code": "def count_occurance(str1):\r\n    return str1.count('std')\n",
    "total_tests": 5,
    "passed_tests": 5,
    "test_result": 1.0,
    "task_id": 172,
    "precondition": "str1 is a string."
  },
  "222": {
    "specification": "Write a function to check if all the elements in tuple have same data type or not.",
    "code": "import types\r\ndef check_type(t\\_tuple):\r\n    t = t\\_tuple[0]\r\n    for i in t\\_tuple:\r\n        if not isinstance(i, t) and not isinstance(i, types. Ellipsis\r\n):            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 222,
    "precondition": "t\\_tuple is a tuple."
  },
  "223": {
    "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
    "code": "def is_majority(arr, n, x):\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == x:\r\n            count += 1\r\n        elif count > n//2:\r\n            return True\r\n    return count > n//2\n",
    "total_tests": 4,
    "passed_tests": 3,
    "test_result": 0.75,
    "task_id": 223,
    "precondition": "arr is a sorted list of integers, n is a positive integer, and x is an integer."
  },
  "224": {
    "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
    "code": "def count_Set_Bits(n):\r\n    count = 0\r\n    while (n != 0):\r\n        n = n & (n - 1)\r\n        count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 224,
    "precondition": "n is an integer."
  },
  "226": {
    "specification": "Write a python function to remove the characters which have odd index values of a given string.",
    "code": "def odd_values_string(string\",\r\n  result = \"\"\r\n  for i in range(len(string));\r\n    if i % 2 == 0:\r\n      result += string[i]\r\n  return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 226,
    "precondition": "string is a string."
  },
  "227": {
    "specification": "Write a function to find minimum of three numbers.",
    "code": "def min_of_three(x, y, z)\r\n    if x <= y and x <= z:\r\n        return x\r\n    elif y <= x and y <= z:\r\n        return y\r\n    else:\r\n        return z\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 227,
    "precondition": "x, y, and z are comparable values (i.e., they can be ordered)."
  },
  "228": {
    "specification": "Write a python function to check whether all the bits are unset in the given range or not.",
    "code": "def all_Bits_Set_In_The_Given_Range(n, start, end):\r\n    flag = 0\r\n    for i in range(start-1, end:\r\n        if (n & (1 << i)) != 0:\r\n            flag = 1\r\n            break\r\n    if flag == 0:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 228,
    "precondition": "n is an integer, start and end are integers such that start-1 <= end."
  },
  "229": {
    "specification": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
    "code": "def re_arrange_array(arr, n):\r\n    negative = []\r\n    positive = []\r\n    for i in range(n):\r\n        if arr[i] < 0:\r\n            negative.append(arr[i])\r\n        else:\r\n            positive.append(arr[i])\r\n    res = negative + positive\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 229,
    "precondition": "arr is a list of integers, and n is a non-negative integer such that 0 <= n <= len(arr)."
  },
  "230": {
    "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
    "code": "def replace_blank(input_string, char):\r\n    result = input\\_string.replace(' ', char)\r\n    return result\r\nassert replace\\_blank(\"hello people\",'@')==(\"hello@people\")\r\nprint(replace\\_blank(\"hello people\",'@'))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 230,
    "precondition": "input\\_string is a string and char is a single character."
  },
  "232": {
    "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
    "code": "def larg_nnum(numbers, n):\r\n    return sorted(numbers)[-n:]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 232,
    "precondition": "numbers is a list of comparable elements and n is a non-negative integer such that 0 <= n <= len(numbers)."
  },
  "233": {
    "specification": "Write a function to find the lateral surface area of a cylinder.",
    "code": "import math\r\ndef lateralsuface_cylinder(radius, height):\r\n    return 2 * math.pi * radius * height\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 233,
    "precondition": "radius is a positive number, and height is a positive number."
  },
  "234": {
    "specification": "Write a function to find the volume of a cube given its side length.",
    "code": "def volume_cube(side\\_length):\r\n    return side\\_length**3\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 234,
    "precondition": "side\\_length is a number."
  },
  "235": {
    "specification": "Write a python function to set all even bits of a given number.",
    "code": "def even_bit_set_number(n):\r\n    result = n\r\n    while n != 0:\r\n        if n % 2 == 0:\r\n            result = result | (1 << 2)\r\n        n = n >> 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 235,
    "precondition": "n is an integer."
  },
  "237": {
    "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
    "code": "def check_occurences(list\\_of\\_tuples):\r\n    result = {}\r\n    for i in list\\_of\\_tuples:\r\n        if i in result:\r\n            result[i] += 1\r\n        else:\r\n            result[i] = 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 237,
    "precondition": "list\\_of\\_tuples is a list of tuples."
  },
  "238": {
    "specification": "Write a python function to count the number of non-empty substrings of a given string.",
    "code": "def number_of_substrings(s):\r\n    count = 0\r\n    for i in range(len(s):\r\n        for j in range(i, len(s):\r\n            if s[i:j+1] != \"\":\r\n                count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 238,
    "precondition": "s is a string."
  },
  "239": {
    "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
    "code": "def get_total_number_of_sequences(m, n)\r\n  if n == 1:\r\n    return m\r\n  else:\r\n    return get_total_number_of_sequences(m, n-1) * (m - 2)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 239,
    "precondition": "m and n are positive integers."
  },
  "240": {
    "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
    "code": "def replace_list(lst1, lst2):\r\n    lst1[-1:] = lst2\r\n    return lst1\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 240,
    "precondition": "lst1 and lst2 are lists."
  },
  "242": {
    "specification": "Write a function to count the total number of characters in a string.",
    "code": "def count_charac(str1):\r\n  return len(str1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 242,
    "precondition": "str1 is a string."
  },
  "244": {
    "specification": "Write a python function to find the next perfect square greater than a given number.",
    "code": "def next_Perfect_Square(n):\r\n    sqrt = int(n**0.5 + 1)\r\n    return sqrt**2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 244,
    "precondition": "n is an integer."
  },
  "245": {
    "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
    "code": "def max_sum(arr):\r\n    n = len(arr)\r\n    # initialize the arrays for increasing and decreasing subsequences\r\n    is, ds = [0 for x in range(n)] , [0 for x in range(n)]\r\n    # initialize the arrays for including and excluding elements\r\n    ie, de = [0 for x in range(n)] , [0 for x in range(n)]\r\n    # initialize the array for maximum sum\r\n    ms = [-1 for x in range(n)]\r\n    # fill the increasing subsequence array\r\n    is[0] = arr[0]\r\n    for i in range(1, n):\r\n        is[i] = max(is[i-1] + arr[i], arr[i])\r\n    # fill the decreasing subsequence array\r\n    ds[n-1] = arr[n-1]\r\n    for i in range(n-2, -1, -1):\r\n        ds[i] = max(ds[i+1] + arr[i], arr[i])\r\n    # fill the including and excluding elements arrays\r\n    ie[0] = is[0]\r\n    de[n-1] = ds[n-1]\r\n    ms[0] = is[0]\r\n    for i in range(1, n):\r\n        ie[i] = max(is[i], de[i-1] + arr[i] )\r\n        de[n-1-i] = max(ds[n-1-i], ie[n-1-i] + arr[n-1-i])\r\n        if ms[i-1] < ie[i];\r\n            ms[i] = ie[i]\r\n        else{\r\n            ms[i] = ms[i-1]\r\n    # return the maximum sum\r\n    return ms[n-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 245,
    "precondition": "arr is a list of integers."
  },
  "246": {
    "specification": "Write a function for computing square roots using the babylonian method.",
    "code": "def babylonian_squareroot(n,\r\n    precision = 0.000001):\r\n    root = n/2.0\r\n    while(abs(root*root - n) > precision):\r\n        root = (root + n/root)/2.0\r\n    return root\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 246,
    "precondition": "n is a non-negative float and precision is a positive float."
  },
  "247": {
    "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
    "code": "def lps(s)\r\n    n = len(s)\r\n    table = [[0 for x in range(n)] for y in range(n)]\r\n    maxLength = 1\r\n    i = 0\r\n    while i < n:\r\n        table[i][i] = True\r\n        i = i + 1\r\n    start = 0\r\n    i = 0\r\n    while i < n - 1:\r\n        if s[i] == s[i + 1]\r\n            table[i][i + 1] = True\r\n            start = i\r\n            maxLength = 2\r\n        i = i + 1\r\n    k = 3\r\n    while k <= n:\r\n        i = 0\r\n        while i < (n - k + 1):\r\n            j = i + k - 1\r\n            if table[i + 1][j - 1] and s[i] == s[j]:\r\n                table[i][j] = True\r\n                if k > maxLength:\r\n                    start = i\r\n                    maxLength = k\r\n            i = i + 1\r\n        k = k + 1\r\n    return maxLength\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 247,
    "precondition": "s is a string."
  },
  "248": {
    "specification": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
    "code": "import math\r\ndef harmonic_sum(n):\r\n    res = 0\r\n    for i in range(1,n):\r\n        res += 1/i\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 248,
    "precondition": "n is a positive integer."
  },
  "249": {
    "specification": "Write a function to find the intersection of two arrays.",
    "code": "def intersection_array(arr1, arr2):\r\n    res = [value for value in arr1 if value in arr2]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 249,
    "precondition": "arr1 and arr2 are lists of comparable elements."
  },
  "250": {
    "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
    "code": "def count_X(tup, x):\r\n    return tup.count(x)\r\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 250,
    "precondition": "tup is a tuple and x is an element that can be compared with the elements in the tuple."
  },
  "251": {
    "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
    "code": "def insert_element(lst, element):\r\n    return [element] + [x for pair in zip(lst, lst[1:]) for x in pair]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 251,
    "precondition": "lst is a list and element is an object."
  },
  "252": {
    "specification": "Write a python function to convert complex numbers to polar coordinates.",
    "code": "import cmath\r\ndef convert_complex_to_polar(c):\r\n    r = cmath.polar(c)\r\n    return (r[0], r[1])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 252,
    "precondition": "c is a complex number."
  },
  "253": {
    "specification": "Write a python function that returns the number of integer elements in a given list.",
    "code": "def count_integer(lst):\r\n    return sum(1 for i in lst if isinstance(i,int))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 253,
    "precondition": "lst is a list."
  },
  "255": {
    "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
    "code": "from itertools import product\r\ndef combinations_colors(lst,n):\r\n    return list(product(lst, repeat=n))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 255,
    "precondition": "lst is a list and n is an integer such that 0 <= n <= len(lst)."
  },
  "256": {
    "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
    "code": "import math\r\ndef count_Primes_nums(num):\r\n    count = 0\r\n    for i in range(2,num\r\n        if num % i == 0:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 256,
    "precondition": "num is an non-negative integer."
  },
  "257": {
    "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
    "code": "def swap_numbers(num1, num2):\r\n    return (num2, num1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 257,
    "precondition": "num1 and num2 are numbers (int or float)."
  },
  "259": {
    "specification": "Write a function to maximize the given two tuples.",
    "code": "def maximize_elements(tup1, tup2):\r\n    res = []\r\n    tup1 = sorted(tup1, key = lambda x: x[1], reverse = True)\r\n    tup2 = sorted(tup2, key = lambda x: x[1], reverse = True)\r\n    i = j = 0\r\n    while i < len(tup1) and j < len(tup2):\r\n        if tup1[i][0] > tup2[j][0]:\r\n            res.append(tup1[i])\r\n            i += 1\r\n        else:\r\n            res.append(tup2[j])\r\n            j += 1\r\n    while i < len(tup1):\r\n        res.append(tup1[i])\\\n        i += 1\r\n    while j < len(tup2):\r\n        res.append(tup2[j])\\\n        j += 1\r\n    return tuple(res)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 259,
    "precondition": "tup1 and tup2 are tuples of tuples, where each inner tuple consists of two integers. The second integer in each inner tuple represents a priority such that the first tuples in both tup1 and tup2 have the highest priority and the last tuples have the lowest priority."
  },
  "260": {
    "specification": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "code": "def is_prime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n == 2:\r\n        return True\r\n    if n % 2 == 0:\r\n        return False\r\n    i = 3\r\n    while i * i <= n:\r\n        if n % i == 0:\r\n            return False\r\n        i += 2\r\n    return True\r\n\r\ndef newman_prime(n):\r\n    count = 0\r\n    num = 1\r\n    while count < n:\r\n        num = num + 2\r\n        if is_prime(num):\r\n            count = count + 1\r\n    return num\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 260,
    "precondition": "n is a positive integer."
  },
  "261": {
    "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
    "code": "def division_elements(tup1, tup2):\r\n  res = tuple(x/y for x, y in zip(tup1,tup2))\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 261,
    "precondition": "tup1 and tup2 are tuples of the same length with non-zero elements."
  },
  "262": {
    "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
    "code": "def split_two_parts(lst, L):\r\n    if len(lst) < L:\r\n        raise ValueError(\"List should have at least L elements\")\r\n    return (lst[:L], lst[L:])\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 262,
    "precondition": "lst is a list, and L is a non-negative integer such that L <= len(lst)."
  },
  "264": {
    "specification": "Write a function to calculate a dog's age in dog's years.",
    "code": "def dog_age(human_age):\r\n    if human_age < 0:\r\n        return \"Invalid input\"\r\n    elif human_age < 2:\r\n        return human_age * 10\r\n    else:\r\n        return 10 + (human_age - 2) * 4\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 264,
    "precondition": "human\\_age is an integer."
  },
  "265": {
    "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
    "code": "def list_split(lst, n):\r\n  result = []\r\n  for i in range(0, len(lst), n):\r\n    result.append(lst[i:n+i])\r\n  return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 265,
    "precondition": "lst is a list and n is an integer such that n > 0."
  },
  "266": {
    "specification": "Write a function to find the lateral surface area of a cube given its side length.",
    "code": "import math\r\ndef lateralsurface_cube(side\\_length):\r\n    return 4 \\* side\\_length \\* side\\_length\r\ntest1 = lateralsurface_cube(5)\r\nassert test1==100\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 266,
    "precondition": "side\\_length is a positive real number."
  },
  "267": {
    "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
    "code": "def square_Sum(n):\r\n\tsum = 0\r\n\tfor i in range(1, n*2, 2):\r\n\t\tsum += i**2\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 267,
    "precondition": "n is an integer."
  },
  "268": {
    "specification": "Write a function to find the n'th star number.",
    "code": "def find_star_num(n):\r\n    return 6*n*n - 6*n + 1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 268,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "269": {
    "specification": "Write a function to find the ascii value of a character.",
    "code": "def ascii_value(char):\r\n    return ord(char)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 269,
    "precondition": "char is a single-character string."
  },
  "270": {
    "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
    "code": "def sum_even_and_even_index(lst):\r\n\tsum = 0\r\n\tfor i in range(len(lst):\r\n\t\tif i % 2 == 0 and lst[i] % 2 == 0:\r\n\t\t\tsum += lst[i]\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 270,
    "precondition": "lst is a list of integers."
  },
  "271": {
    "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
    "code": "def even_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n*2 + 1, 2):\r\n        sum += i**5\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 271,
    "precondition": "n is an integer."
  },
  "272": {
    "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
    "code": "def rear_extract(list\\_of\\_tuples):\r\n    return [i[-1] for i in list\\_of\\_tuples]\r\ntest = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]\r\nprint( rear_extract(test) )\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 272,
    "precondition": "list\\_of\\_tuples is a list of tuples."
  },
  "273": {
    "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
    "code": "def substract_elements(tup1, tup2):\r\n    return tuple(map(lambda x, y: x - y, tup1, tup2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 273,
    "precondition": "tup1 and tup2 are tuples of the same length."
  },
  "274": {
    "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
    "code": "def even_binomial_Coeff_Sum(n):\r\n    result = 0\r\n    for i in range(n:\r\n        result += (comb(n, i) if n % 2 == 0 else 0)\r\n    return result\r\ndef comb(n, k):\r\n    if k > n - k:\r\n        k = n - k\r\n    if k == 0:\r\n        return 1\r\n    elif k == 1:\r\n        return n\r\n    else:\r\n        num = 1\r\n        den = 1\r\n        for i in range(1, k + 1):\r\n            num *= n\r\n            den *= i\r\n            n -= 1\r\n        return num // den\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 274,
    "precondition": "n is a positive integer."
  },
  "276": {
    "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
    "code": "import math\r\ndef volume_cylinder(radius, height):\r\n    volume = math.pi * (radius ** 2) * height\r\n    return volume\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 276,
    "precondition": "radius is a non-negative floating-point number, and height is a positive floating-point number."
  },
  "277": {
    "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
    "code": "def dict_filter(d, n):\r\n    res = dict((k,v) for k,v in d.items() if v >= n)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 277,
    "precondition": "d is a dictionary and n is an integer."
  },
  "278": {
    "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
    "code": "def count_first_elements(tup)\r\n    return sum(1 for i in tup if type(i) is not tuple)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 278,
    "precondition": "tup is a tuple where each element is either an integer or a tuple."
  },
  "279": {
    "specification": "Write a function to find the nth decagonal number.",
    "code": "def is_num_decagonal(n):\r\n    return n * (5 * n - 3) // 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 279,
    "precondition": "n is an integer."
  },
  "280": {
    "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
    "code": "def sequential_search(arr, ele):\r\n    n = len(arr)\r\n    for i in range(n):\r\n        if arr[i] == ele:\r\n            return (True, i)\r\n    return (False, -1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 280,
    "precondition": "arr is an array of comparable elements and ele is a comparable element."
  },
  "281": {
    "specification": "Write a python function to check if the elements of a given list are unique or not.",
    "code": "def all_unique(lst):\r\n    return len(lst) == len(set(lst))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 281,
    "precondition": "lst is a list."
  },
  "282": {
    "specification": "Write a function to subtract two lists element-wise.",
    "code": "def sub_list(list1, list2):\r\n    if len(list1) != len(list2):\r\n        return \"Error: List lengths are not equal\"\r\n    else:\r\n        return [list1[i] - list2[i] for i in range(len(list1))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 282,
    "precondition": "list1 and list2 are lists of the same length."
  },
  "283": {
    "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
    "code": "def validate(n):\r\n    freq = [0]*10\r\n    while n > 0:\r\n        freq[n % 10] += 1\r\n        n = n // 10\r\n    for i in range(10):\r\n        if freq[i] > i:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 283,
    "precondition": "n is an integer."
  },
  "284": {
    "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "code": "def check_element(lst, element):\r\n    return all(x == element for x in lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 284,
    "precondition": "lst is a list and element is any object."
  },
  "285": {
    "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
    "code": "def text_match_two_three(inputStr)\r\n    pattern = r'a(bb|bbb)'\r\n    match = re.search(pattern, inputStr)\r\n    if match:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 285,
    "precondition": "inputStr is a string."
  },
  "286": {
    "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
    "code": "def max_sub_array_sum_repeated(A, K, N)\r\n    n = len(A)\r\n    B = A * K\r\n    res = B[0]\r\n    max_ending_here = B[0]\r\n    for i in range(1, n)\r\n        max_ending_here = max(B[i], max_ending_here + B[i] )\r\n        res = max(res, max_ending_here)\r\n    return res\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 286,
    "precondition": "A is a list of integers, K is a positive integer, and N is the length of the modified array, which is equal to len(A) \\* K."
  },
  "287": {
    "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
    "code": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if i % 2 == 0:\r\n            sum += i ** 2\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 287,
    "precondition": "n is an integer."
  },
  "290": {
    "specification": "Write a function to find the list of maximum length in a list of lists.",
    "code": "def max_length(lst): \r\n    max_length = max([len(i) for i in lst(\r\n    index = lst.index([j for j in lst if len(j) == max_length][0])\r\n    return (max_length, lst[index] )\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 290,
    "precondition": "lst is a list of lists."
  },
  "291": {
    "specification": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "code": "def count_no_of_ways(n, k):\r\n    if n == 1:\r\n        return k\r\n    elif n == 2:\r\n        return k * k\r\n    else:\r\n        return (k * k) + (k * (k - 1) ** (n - 2))\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 291,
    "precondition": "n and k are non-negative integers such that k >= 2."
  },
  "292": {
    "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
    "code": "def find(num1, num2):\r\n    return num1 // num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 292,
    "precondition": "num1 and num2 are integers, and num2 is not equal to 0."
  },
  "293": {
    "specification": "Write a function to find the third side of a right angled triangle.",
    "code": "import math\r\ndef otherside_rightangle(a, b):\r\n    return math.sqrt(a**2 + b**2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 293,
    "precondition": "a and b are positive integers."
  },
  "294": {
    "specification": "Write a function to find the maximum value in a given heterogeneous list.",
    "code": "def max_val(lst):\r\n    return max(lst)\r\nprint(max_val(['Python', 3, 2, 4, 5, 'version']))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 294,
    "precondition": "lst is a list of heterogeneous elements where max function can be applied."
  },
  "295": {
    "specification": "Write a function to return the sum of all divisors of a number.",
    "code": "import math\r\ndef sum_div(n):\r\n    divsum = 1\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            divsum = divsum + i + (n//i)\r\n    if divsum == n + 1:\r\n        divsum = divsum - n\r\n    return divsum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 295,
    "precondition": "n is a positive integer."
  },
  "296": {
    "specification": "Write a python function to count inversions in an array.",
    "code": "def get_Inv_Count(arr:\r\n    return sum(1 for i in range(len(arr)) for j in range(i+1, len(arr)) if arr[i] < arr[j])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 296,
    "precondition": "arr is a list of comparable elements."
  },
  "297": {
    "specification": "Write a function to flatten a given nested list structure.",
    "code": "def flatten_list(nested\\_list):\r\n    result = []\r\n    for sublist in nested\\_list:\r\n        if type(sublist) is list:\r\n            result.extend(flatten\\_list(sublist))\r\n        else:\r\n            result.append(sublist)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 297,
    "precondition": "nested\\_list is a list."
  },
  "299": {
    "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "code": "def max_aggregate(tuples:\r\n  max_value = (0, \"\")\r\n  for t in tuples:\r\n    if t[1] > max_value[0]:\r\n      max_value = (t[1], t[0])\r\n  return max_value\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 299,
    "precondition": "tuples is a list of tuples where each tuple contains two elements: a string and an integer."
  },
  "300": {
    "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "code": "import math\ndef count_binary_seq(n):\r\n    if n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 2\r\n    else:\r\n        return (2 ** (2 * n - 1) - (2 ** (n - 1)) + 2)\r\n\r\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(2), 10.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(3), 58.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(4), 362.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(5), 2386.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(6), 17050.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(7), 125466.0, rel_tol=0.001)\r\nassert math.isclose(count_binary_seq(8), 952162.0, rel_tol=0.001)\r\nprint(\"All test cases passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 300,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "301": {
    "specification": "Write a function to find the depth of a dictionary.",
    "code": "def dict_depth(dictionary*\r\n\tif not isinstance(dictionary, dict):\r\n\t\treturn 0\r\n\tdepth = 0\r\n\tfor value in dictionary.values()\r\n\t\tdepth = max(depth, dict_depth(value) + 1)\r\n\treturn depth\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 301,
    "precondition": "dictionary is a dictionary."
  },
  "304": {
    "specification": "Write a python function to find element at a given index after number of rotations.",
    "code": "def find_Element(arr, rotations, n, index)\r\n\tfor i in range(len(rotations))\r\n\t\tfor j in range(rotations[i])\r\n\t\t\tarr = [arr[-1]] + arr[:-1]\r\n\treturn arr[index]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 304,
    "precondition": "arr is a list of integers, rotations is a list of non-negative integers, n is an integer such that 0 <= n < len(arr), and index is an integer such that 0 <= index < n."
  },
  "305": {
    "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
    "code": "def start_withp(words\\_list):\r\n    res = []\r\n    for word in words\\_list:\r\n        if word.startswith(\"p\")\r\n            res.append(word.split()[0])\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 305,
    "precondition": "words\\_list is a list of strings."
  },
  "306": {
    "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
    "code": "def max_sum_increasing_subseq(prefix, i, k, n)\r\n    inc_sum = [0 for x in range(n)]\r\n    inc\\_sum[0] = prefix[0]\r\n    for j in range(1, i)\r\n        if prefix[j] > prefix[j-1]\r\n            inc_sum[j] = inc_sum[j-1] + prefix[j]\r\n    max_sum = inc_sum[i]\r\n    for j in range(i+1, k)\r\n        if prefix[j] > prefix[j-1]\r\n            if inc_sum[i] < inc_sum[j-1]\r\n                max_sum = inc_sum[j-1]\r\n            inc_sum[j] = inc_sum[j-1] + prefix[j]\r\n            if inc_sum[j] > max_sum\r\n                max_sum = inc_sum[j]\r\n    return max_sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 306,
    "precondition": "prefix is a list of integers, i, k, and n are integers such that 0 <= i < n, i < k <= n, and 0 <= n."
  },
  "307": {
    "specification": "Write a function to get a colon of a tuple.",
    "code": "def colon_tuplex(tuplex,col_num,col\\_val):\r\n    new\\_tuplex = tuplex\r\n    new\\_tuplex = (new_tuplex[0], new_tuplex[1], new_tuplex[2]+[col_val], new_tuplex[3] )\r\n    return new_tuplex\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 307,
    "precondition": "tuplex is a tuple with at least three elements, and col\\_val is a value of any type."
  },
  "308": {
    "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
    "code": "def large_product(num1, num2, k)\r\n   num1.sort()\r\n   num2.sort()\r\n   res = []\r\n   for i in range(len(num1)-k+1):\r\n       res.append(num1[i]*num2[len(num2)-k+i] )\r\n   return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 308,
    "precondition": "num1 and num2 are lists of integers, and k is a non-negative integer such that 0 <= k <= len(num1) and 0 <= k <= len(num2)."
  },
  "309": {
    "specification": "Write a python function to find the maximum of two numbers.",
    "code": "def maximum(num1, num2):\r\n    if num1 > num2:\r\n        return num1\r\n    else:\r\n        return num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 309,
    "precondition": "num1 and num2 are real numbers."
  },
  "310": {
    "specification": "Write a function to convert a given string to a tuple of characters.",
    "code": "def string_to_tuple(str1):\r\n    return tuple(str1)\r\ntest\\_str = \"python 3.0\"\r\nassert string\\_to\\_tuple(test\\_str)==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 310,
    "precondition": "str1 is a string."
  },
  "311": {
    "specification": "Write a python function to set the left most unset bit.",
    "code": "def set_left_most_unset_bit(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return (1 << (n.bit_length() - 1))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 311,
    "precondition": "n is an integer."
  },
  "312": {
    "specification": "Write a function to find the volume of a cone.",
    "code": "import math\ndef volume_cone(r, h):\n  return (1/3)*math.pi*r**2*h\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 312,
    "precondition": "r and h are non-negative real numbers, representing the radius and height of the cone, respectively."
  },
  "388": {
    "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "code": "def highest_Power_of_2(n):\r\n    return 2**int(math.log(n,2))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 388,
    "precondition": "n is a positive integer."
  },
  "389": {
    "specification": "Write a function to find the n'th lucas number.",
    "code": "def find_lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)\r\nn = 9\r\nprint(find_lucas(n))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 389,
    "precondition": "n is an integer."
  },
  "390": {
    "specification": "Write a function to apply a given format string to all of the elements in a list.",
    "code": "def add_string(lst,fmt\\_str):\r\n    return [fmt\\_str.format(i) for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 390,
    "precondition": "lst is a list of objects and fmt\\_str is a string containing one or more format fields."
  },
  "391": {
    "specification": "Write a function to convert more than one list to nested dictionary.",
    "code": "def convert_list_dictionary(key_list, value_list1, value_list2):\r\n\tnested\\_dict = []\r\n\tfor i in range(len(key\\_list):\r\n\t\ttemp\\_dict = {key\\_list[i]: {value\\_list1[i]: value\\_list2[i]}}\r\n\t\tnested\\_dict.append(temp\\_dict)\r\n\treturn nested\\_dict\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 391,
    "precondition": "key\\_list, value\\_list1, and value\\_list2 are all lists of equal length."
  },
  "392": {
    "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "code": "import math\r\nmemo = [0 for x in range(61)]\r\ndef get_max_sum(n):\r\n    if memo[n] > 0:\r\n        return memo[n]\r\n    elif n == 1:\r\n        memo[n] = n\r\n        return n\r\n    else:\r\n        res = n\r\n        for i in range(2,int(math.sqrt(n)) + 1):\r\n            if n % i == 0:\r\n                res = max(res, get_max_sum(n // i))\r\n        res = max(res, get_max_sum(int(n / 2))\r\n        res = max(res, get_max_sum(int(n / 3(\r\n        res = max(res, get_max_sum(int(n / 4(\r\n        res = max(res, get_max_sum(int(n / 5(\r\n        memo[n] = res\r\n        return res\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 392,
    "precondition": "n is an integer such that 1 <= n <= 60."
  },
  "393": {
    "specification": "Write a function to find the list with maximum length.",
    "code": "def max_length_list(lists)\r\n    max_length = 0\r\n    result_list = []\r\n    for i in lists:\r\n        if len(i) > max_length:\r\n            max_length = len(i)\r\n            result_list = i\r\n    return (max_length, result_list)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 393,
    "precondition": "lists is a list of lists."
  },
  "394": {
    "specification": "Write a function to check if given tuple contains no duplicates.",
    "code": "def check_distinct(tup\r\n{\r\n    return len(tup) == len(set(tup))\r\n\r\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 394,
    "precondition": "tup is a tuple."
  },
  "395": {
    "specification": "Write a python function to find the first non-repeated character in a given string.",
    "code": "def first_non_repeating_character(inputstr):\r\n\tcount = {}\r\n\tfor i in inputstr:\r\n\t\tif inputstr.count(i) == 1:\r\n\t\t\tif i in count:\r\n\t\t\t\tcount[i] += 1\r\n\t\t\telse:\r\n\t\t\t\tcount[i] = 1\r\n\t\telse:\r\n\t\t\tif i in count:\r\n\t\t\t\tcount[i] += 1\r\n\t\t\telse:\r\n\t\t\t\tcount[i] = inputstr.count(i)\r\n\tfor i in count:\r\n\t\tif count[i] == 1:\r\n\t\t\treturn i\r\n\treturn None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 395,
    "precondition": "inputstr is a string."
  },
  "396": {
    "specification": "Write a function to check whether the given string starts and ends with the same character or not.",
    "code": "def check_char(str1):\r\n    if str1[0] == str1[-1]:\r\n        return \"Valid\"\r\n    else:\r\n        return \"Invalid\"\r\nassert check_char(\"abba\") == \"Valid\"\r\nassert check_char(\"abcd\") == \"Invalid\"\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 396,
    "precondition": "str1 is a string."
  },
  "397": {
    "specification": "Write a function to find the median of three numbers.",
    "code": "def median_numbers(num1,num2,num3):\r\n    if (num1>=num2 and num1<=num3) or (num1>=num3 and num1<=num2):\r\n        return num1\r\n    elif (num2>=num1 and num2<=num3) or (num2>=num3 and num2<=num1):\r\n        return num2\r\n    else:\r\n        return num3\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 397,
    "precondition": "num1, num2, and num3 are numbers."
  },
  "398": {
    "specification": "Write a function to compute the sum of digits of each number of a given list.",
    "code": "def sum_of_digits(num\\_list):\r\n    return [sum(int(digit) for digit in str(num\r\n)) for num in num\\_list]\r\nprint(sum\\_of\\_digits([10,2,56])) #output: [1, 2, 11]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 398,
    "precondition": "num\\_list is a list of integers."
  },
  "399": {
    "specification": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "code": "def bitwise_xor(tup1, tup2):\r\n    res = ()\r\n    for x, y in zip(tup1, tup2):\r\n        res += (x ^ y,)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 399,
    "precondition": "tup1 and tup2 are tuples of equal length, and each element in the tuples is an integer."
  },
  "400": {
    "specification": "Write a function to extract the number of unique tuples in the given list.",
    "code": "def extract_freq(tup\\_list):\r\n  res = set()\r\n  for t in tup\\_list:\r\n    res.add(tuple(sorted(t))\r\n  return len(res)\r\n\r\nOR\r\n\r\ndef extract_freq(tup\\_list):\r\n  res = {}\\\n  for t in tup\\_list:\r\n    res[tuple(sorted(t))] = 1\r\n  return len(res)\r\n\r\nOR\r\n\r\ndef extract_freq(tup\\_list},\r\n  res = []\r\n  for t in tup\\_list:\r\n    if t not in res:\r\n      res.append(t)\r\n  return len(res)\r\n\r\nNote: I assume that order of tuples doesn't matter in test case.\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 400,
    "precondition": "tup\\_list is a list of tuples."
  },
  "401": {
    "specification": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "code": "def add_nested_tuples(tup1, tup2):\r\n    result = ()\r\n    for i in range(len(tup1)):\r\n        result += (tuple(map(sum, zip(tup1[i], tup2[i]))))\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 401,
    "precondition": "tup1 and tup2 are nested tuples with the same length."
  },
  "404": {
    "specification": "Write a python function to find the minimum of two numbers.",
    "code": "def minimum(num1, num2):\r\n    if num1 <= num2:\r\n        return num1\r\n    else:\r\n        return num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 404,
    "precondition": "num1 and num2 are real numbers."
  },
  "405": {
    "specification": "Write a function to check whether an element exists within a tuple.",
    "code": "def check_tuplex(tup, element):\r\n    if element in tup:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 405,
    "precondition": "tup is a tuple and element is any object."
  },
  "406": {
    "specification": "Write a python function to find whether the parity of a given number is odd.",
    "code": "def find_Parity(num):\r\n    if num % 2 != 0:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 406,
    "precondition": "num is an integer."
  },
  "407": {
    "specification": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "code": "def rearrange_bigger(n):\r\n    number = list(str(n))\r\n    number.sort(reverse=True)\r\n    while \"\".join(number) in str(int(\"\".join(number))\r\n    ):\r\n        number.sort(reverse=True)\r\n    return int(\"\".join(number))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 407,
    "precondition": "n is an integer."
  },
  "408": {
    "specification": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
    "code": "import heapq\r\ndef k_smallest_pairs(arr1, arr2, k):\r\n    n1 = len(arr1)\r\n    n2 = len(arr2)\r\n    pairs = []\r\n    for i in range(n1):\r\n        for j in range(n2):\r\n            pair = (arr1[i], arr2[j] )\r\n            heapq.heappush(pairs, pair)\r\n        if len(pairs) > k:\r\n            heapq.heappop(pairs)\r\n    return pairs\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 408,
    "precondition": "arr1 and arr2 are lists of comparable elements, and k is a non-negative integer such that 0 <= k <= n1\\*n2, where n1 and n2 are the lengths of arr1 and arr2, respectively."
  },
  "409": {
    "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "code": "def min_product_tuple(test\\_list): \n    return min(x*y for x, y in test_list)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 409,
    "precondition": "test\\_list is a list of tuples, and each tuple contains exactly two integers."
  },
  "410": {
    "specification": "Write a function to find the minimum value in a given heterogeneous list.",
    "code": "def min_val(lst):\r\n    min_val = lst[0]\r\n    for i in range(1,len(lst));\r\n        try:\r\n            if lst[i] < min\\_val:\r\n                min\\_val = lst[i]\r\n        except:\r\n            continue\r\n    return min\\_val\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 410,
    "precondition": "lst is a list containing at least one element, and all elements in lst that are comparable using the '<' operator have a well-defined minimum value."
  },
  "411": {
    "specification": "Write a function to convert the given snake case string to camel case string.",
    "code": "def snake_to_camel(snake\\_case\\_str)\r\n    words = snake\\_case\\_str.split(\"_\")\r\n    res = words[0] + ''.join([word.capitalize() for word in words[1:]])\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 411,
    "precondition": "snake\\_case\\_str is a string containing only lowercase letters, underscores, and beginning with a lowercase letter."
  },
  "412": {
    "specification": "Write a python function to remove odd numbers from a given list.",
    "code": "def remove_odd(lst):\r\n    return [i for i in lst if i % 2 == 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 412,
    "precondition": "lst is a list of integers."
  },
  "413": {
    "specification": "Write a function to extract the nth element from a given list of tuples.",
    "code": "def extract_nth_element(lst, n):\r\n    return tuple(i[n] for i in lst)\r\n\r\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 413,
    "precondition": "lst is a list of tuples and n is an integer such that 0 <= n < len(lst[0])."
  },
  "414": {
    "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
    "code": "def overlapping(seq1, seq2):\r\n    res = False\r\n    for i in seq1:\r\n        if i in seq2:\r\n            res = True\r\n            break\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 414,
    "precondition": "seq1 and seq2 are sequences (e.g. lists, tuples, sets)."
  },
  "415": {
    "specification": "Write a python function to find a pair with highest product from a given array of integers.",
    "code": "def max_Product(arr):\r\n    max1 = max(arr)\r\n    min1 = min(arr)\r\n    for i in range(len(arr))\r\n        max2 = max(max1*arr[i], min1*arr[i));\r\n        if max2 > max1:\r\n            max1 = max2\r\n    return (max1, arr.index(max1))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 415,
    "precondition": "arr is a list of integers."
  },
  "417": {
    "specification": "Write a function to find common first element in given list of tuple.",
    "code": "def group_tuples(lst):\r\n    res = []\r\n    for i in lst:\r\n        if i[0] in [j[0] for j in res\r\n            ]:\r\n            res[res.index([j[0] for j in res if j[0]==i[0]])].append(i[1])\r\n        else:\r\n            res.append([i[0], i[1]])\r\n    return [tuple(i) for i in res]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 417,
    "precondition": "lst is a list of tuples where each tuple consists of two elements."
  },
  "418": {
    "specification": "Write a python function to find the element of a list having maximum length.",
    "code": "def Find_Max(list\\_of\\_lists):\r\n    max\\_length = 0\r\n    max\\_element = []\r\n    for i in list\\_of\\_lists:\r\n        if len(i) > max\\_length:\r\n            max\\_length = len(i)\r\n            max\\_element = i\r\n    return max\\_element\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 418,
    "precondition": "list\\_of\\_lists is a list of lists."
  },
  "419": {
    "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "code": "def round_and_sum(num_list):\r\n    rounded_list = [round(i) for i in num_list]\r\n    sum = 0\r\n    for i in rounded_list:\r\n        sum += i\r\n    return sum * len(rounded_list)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 419,
    "precondition": "num\\_list is a list of numbers (floats or integers)."
  },
  "420": {
    "specification": "Write a python function to find the cube sum of first n even natural numbers.",
    "code": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if i % 2 == 0:\r\n            sum += i**3\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 420,
    "precondition": "n is a non-negative integer."
  },
  "421": {
    "specification": "Write a function to concatenate each element of tuple by the delimiter.",
    "code": "def concatenate_tuple(tup,\r\n  delimiter = '-'):\r\n    return delimiter.join(str(i) for i in tup)\r\n\r\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), \"-\")\r\n'ID-is-4-UTS'\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 421,
    "precondition": "tup is a tuple."
  },
  "422": {
    "specification": "Write a python function to find the average of cubes of first n natural numbers.",
    "code": "def find_Average_Of_Cube(n):\r\n  sum = 0\r\n  for i in range(1, n+1):\r\n    sum += i**3\r\n  avg = sum/n\r\n  return avg\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 422,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "424": {
    "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
    "code": "def extract_rear(tup)\r\n    res = ()\r\n    for i in tup:\r\n        res += (i[-1],)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 424,
    "precondition": "tup is a tuple of strings."
  },
  "425": {
    "specification": "Write a function to count the number of sublists containing a particular element.",
    "code": "def count_element_in_list(lst, element:\r\n    count = 0\r\n    for sublst in lst:\r\n        if element in sublst:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 425,
    "precondition": "lst is a list, and element is an object such that element == x for some x in lst."
  },
  "426": {
    "specification": "Write a function to filter odd numbers.",
    "code": "def filter_oddnumbers(numbers):\r\n    return [n for n in numbers if n % 2 != 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 426,
    "precondition": "numbers is a list of integers."
  },
  "427": {
    "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "code": "def change_date_format(date\r\n{\r\n\treturn \"-\".join(reversed(date.split(\"-\")))\r\n}\r\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 427,
    "precondition": "date is a string in yyyy-mm-dd format."
  },
  "428": {
    "specification": "Write a function to sort the given array by using shell sort.",
    "code": "def shell_sort(arr,\r\n    gap = len(arr) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(arr));\r\n            while i - gap >= 0 and arr[i] < arr[i - gap]:\r\n                arr[i], arr[i - gap] = arr[i - gap], arr[i]\r\n            i += 1\r\n        gap //= 2\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 428,
    "precondition": "arr is a list of comparable elements."
  },
  "429": {
    "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "code": "def and_tuples(tup1, tup2):\r\n    return tuple(x1 & x2 for x1, x2 in zip(tup1, tup2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 429,
    "precondition": "tup1 and tup2 are tuples of the same length, and their elements are hashable."
  },
  "430": {
    "specification": "Write a function to find the directrix of a parabola.",
    "code": "def parabola_directrix(a, h, k):\r\n    p = 1/(4*a)\r\n    return -(k + p)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 430,
    "precondition": "a is a non-zero float, h and k are floats."
  },
  "431": {
    "specification": "Write a function that takes two lists and returns true if they have at least one common element.",
    "code": "def common_element(list1, list2):\r\n    result = False\r\n    for i in list1:\r\n        if i in list2:\r\n            result = True\r\n            break\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 431,
    "precondition": "list1 and list2 are lists of comparable elements."
  },
  "432": {
    "specification": "Write a function to find the median length of a trapezium.",
    "code": "def median_trapezium(base1, base2, height):\r\n  median = (base1 + base2) / 2\r\n  return median\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 432,
    "precondition": "base1, base2, and height are positive real numbers."
  },
  "433": {
    "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "code": "def check_greater(arr, num):\r\n    if max(arr) < num:\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 433,
    "precondition": "arr is a list of numbers, and num is a number."
  },
  "434": {
    "specification": "Write a function that matches a string that has an a followed by one or more b's.",
    "code": "import re\r\ndef text_match_one(text):\r\n    result = bool(re.search(r'a[b]+', text))\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 434,
    "precondition": "text is a string."
  },
  "435": {
    "specification": "Write a python function to find the last digit of a given number.",
    "code": "def last_Digit(n):\r\n    return n % 10\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 435,
    "precondition": "n is an integer."
  },
  "436": {
    "specification": "Write a python function to return the negative numbers in a list.",
    "code": "def neg_nos(numbers):\r\n    return [n for n in numbers if n < 0]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 436,
    "precondition": "numbers is a list of integers."
  },
  "437": {
    "specification": "Write a function to remove odd characters in a string.",
    "code": "def remove_odd(str1):\r\n  res = \"\"\r\n  for i in str1:\r\n    if int(i) % 2 == 0:\r\n      res += i\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 437,
    "precondition": "str1 is a string."
  },
  "438": {
    "specification": "Write a function to count bidirectional tuple pairs.",
    "code": "def count_bidirectional(lst):\r\n  counter = 0\r\n  for i in range(len(lst):\r\n    for j in range(len(lst):\r\n      if (lst[i] == lst[j][::-1] or lst[i][::-1] == lst[j] and i != j):\r\n        counter += 1\r\n  return counter\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 438,
    "precondition": "lst is a list of strings."
  },
  "439": {
    "specification": "Write a function to join a list of multiple integers into a single integer.",
    "code": "def multiple_to_single(num\\_list):\r\n    result = \"\"\r\n    for i in num\\_list:\r\n        result += str(i)\r\n    return int(result)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 439,
    "precondition": "num\\_list is a list of integers."
  },
  "440": {
    "specification": "Write a function to find the first adverb and their positions in a given sentence.",
    "code": "import re\r\ndef find_adverb_position(sentence):\r\n    words = re.findall(r'\\b\\w+\\b', sentence)\r\n    adv\\_positions = []\r\n    for i in range(len(words)):\r\n        if words[i] in ['clearly', 'obviously', 'generally', 'specifically', 'particularly', 'absolutely', 'highly', 'partly', 'rather', 'particularly', 'particularly', 'fairly', 'particularly', 'quite', 'really', 'seriously', 'slightly', 'totally', 'usually', 'particularly', 'very', 'extremely']:\r\n            adv\\_positions.append((i, len(words[i]), words[i]))\r\n    if len(adv\\_positions) > 0:\r\n        return adv\\_positions[0]\r\n    else:\r\n        return None\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 440,
    "precondition": "sentence is a string containing only words and whitespaces."
  },
  "441": {
    "specification": "Write a function to find the surface area of a cube of a given size.",
    "code": "import math\r\ndef surfacearea_cube(n):\r\n    return 6*n*n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 441,
    "precondition": "n is a non-negative integer representing the size of a cube."
  },
  "442": {
    "specification": "Write a function to find the ration of positive numbers in an array of integers.",
    "code": "def positive_count(arr):\r\n    positive_count = 0\r\n    for i in arr:\r\n        if i > 0:\r\n            positive_count += 1\r\n    return positive_count/len(arr)\r\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 442,
    "precondition": "arr is a list of integers."
  },
  "443": {
    "specification": "Write a python function to find the largest negative number from the given list.",
    "code": "def largest_neg(numbers:\r\n    max_neg = float('-inf')\r\n    for num in numbers:\r\n        if num < 0:\r\n            if num > max_neg:\r\n                max_neg = num\r\n    return max_neg\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 443,
    "precondition": "numbers is a list of numbers, which can contain negative and positive numbers."
  },
  "444": {
    "specification": "Write a function to trim each tuple by k in the given tuple list.",
    "code": "def trim_tuple(tup_list, k):\r\n\tres = [tuple(tup[:k]+tup[k:]) for tup in tup_list]\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 444,
    "precondition": "tup\\_list is a list of tuples, and k is an integer such that 0 <= k <= len(tup) for all tup in tup\\_list."
  },
  "445": {
    "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "code": "def index_multiplication(tup1, tup2):\r\n\treturn tuple(map(lambda x, y: (x[0]*y[0], x[1]*y[1]), tup1, tup2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 445,
    "precondition": "tup1 and tup2 are tuples with both elements being either integers or floats."
  },
  "446": {
    "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
    "code": "def count_Occurrence(tup,list1):\r\n    result={}\r\n    for i in list1:\r\n        result[i] = tup.count(i)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 446,
    "precondition": "tup is a tuple and list1 is a list of hashable elements."
  },
  "447": {
    "specification": "Write a function to find cubes of individual elements in a list.",
    "code": "def cube_nums(num\\_list):\r\n\treturn [x**3 for x in num\\_list]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 447,
    "precondition": "num\\_list is a list of numbers."
  },
  "448": {
    "specification": "Write a function to calculate the sum of perrin numbers.",
    "code": "def perrin_sequence(n):\r\n\tif n == 0:\r\n\t\treturn 3\r\n\telif n == 1:\r\n\t\treturn 0\r\n\telif n == 2:\r\n\t\treturn 2\r\n\telse:\r\n\t\ta, b, c = 3, 0, 2\r\n\t\tfor i in range(3, n+1):\r\n\t\t\tc = a + b\r\n\t\t\ta, b = b, c\r\n\t\treturn c\n\ndef cal_sum(n):\r\n\tsum = 0\r\n\tfor i in range(n\r\n\t\tsum += perrin_sequence(i)\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 448,
    "precondition": "n is a non-negative integer."
  },
  "450": {
    "specification": "Write a function to extract specified size of strings from a given list of string values.",
    "code": "def extract_string(str_list,n):\r\n  return [i for i in str_list if len(i) == n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 450,
    "precondition": "str\\_list is a list of strings, and n is a non-negative integer."
  },
  "451": {
    "specification": "Write a function to remove all whitespaces from the given string.",
    "code": "def remove_whitespaces(input\\_string):\r\n    return input\\_string.replace(\" \",\"\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 451,
    "precondition": "input\\_string is a string."
  },
  "452": {
    "specification": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
    "code": "def loss_amount(cost_price, selling_price):\r\n    if selling_price < cost_price:\r\n        loss_amount = cost_price - selling_price\r\n    else:\r\n        loss_amount = 0\r\n    return loss_amount\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 452,
    "precondition": "cost\\_price and selling\\_price are numbers (can be float or int), cost\\_price is greater than or equal to selling\\_price."
  },
  "453": {
    "specification": "Write a python function to find the sum of even factors of a number.",
    "code": "def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        if n % 2 == 0:\r\n            if n / 2 == i:\r\n                sum += i\r\n            elif n % i == 0:\r\n                sum += i\r\n        else:\r\n            if n % i == 0:\r\n                sum += i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 453,
    "precondition": "n is a positive integer."
  },
  "454": {
    "specification": "Write a function that matches a word containing 'z'.",
    "code": "def text_match_wordz(text*\r\n  result = False\r\n  if text != \"\" and text[-1] == \".\":\r\n    words = text[:-1].split(\" \")\r\n    for word in words:\r\n      if word.lower() == \"pythonz\"\r\n        result = True\r\n  return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 454,
    "precondition": "text is a string."
  },
  "455": {
    "specification": "Write a function to check whether the given month number contains 31 days or not.",
    "code": "def check_monthnumb_number(month:\r\n    if month >= 1 and month <= 12:\r\n        if month in [1, 3, 5, 7, 8, 10, 12]:\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 455,
    "precondition": "month is an integer."
  },
  "456": {
    "specification": "Write a function to reverse each string in a given list of string values.",
    "code": "def reverse_string_list(list\\_of\\_strings):\r\n    reversed\\_list = [i[::-1] for i in list_of_strings]\r\n    return reversed\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 456,
    "precondition": "list\\_of\\_strings is a list of strings."
  },
  "457": {
    "specification": "Write a python function to find the sublist having minimum length.",
    "code": "def Find_Min(lst):\r\n    return min(lst, key=len)\r\nprint(Find_Min([[1], [1, 2], [1, 2, 3]]))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 457,
    "precondition": "lst is a list of non-empty lists."
  },
  "458": {
    "specification": "Write a function to find the area of a rectangle.",
    "code": "def rectangle_area(width, height):\r\n    return width * height\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 458,
    "precondition": "width and height are non-negative integers or floats."
  },
  "459": {
    "specification": "Write a function to remove uppercase substrings from a given string.",
    "code": "def remove_uppercase(s):\r\n    result = \"\"\r\n    for char in s:\r\n        if char.islower()\r\n            result += char\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 459,
    "precondition": "s is a string."
  },
  "460": {
    "specification": "Write a python function to get the first element of each sublist.",
    "code": "def Extract(lst)\r\n    return [i[0] for i in lst]\r\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\r\n\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 460,
    "precondition": "lst is a list of sublists containing at least one element each."
  },
  "461": {
    "specification": "Write a python function to count the upper case characters in a given string.",
    "code": "def upper_ctr(str1):\r\n    return sum(1 for c in str1 if c.isupper()\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 461,
    "precondition": "str1 is a string."
  },
  "462": {
    "specification": "Write a function to find all possible combinations of the elements of a given list.",
    "code": "def combinations_list(data\r\n\r\n):\r\n    comb = []\r\n    for i in range(len(data) + 1):\r\n        for j in range(i + 1):\r\n            comb.append(data[j-1:i] )\r\n    return comb\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 462,
    "precondition": "data is a list."
  },
  "463": {
    "specification": "Write a function to find the maximum product subarray of the given array.",
    "code": "def max_subarray_product(arr):\r\n    max_so_far = max_ending_here = 1\r\n    min_so_far = min_ending_here = 1\r\n    for i in range(len(arr));\r\n        if arr[i] > 0:\r\n            max_ending_here = max_ending_here * arr[i]\r\n            min_ending_here = min(min_ending_here * arr[i], 1)\r\n        elif arr[i] < 0:\r\n            max_ending_here = min(max_ending_here * arr[i], 1)\r\n            min_ending_here = min_ending_here * arr[i]\r\n        else:\r\n            max_ending_here = 1\r\n            min_ending_here = 1\r\n        if max_ending_here > max_so_far:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 463,
    "precondition": "arr is a list of integers."
  },
  "464": {
    "specification": "Write a function to check if all values are same in a dictionary.",
    "code": "def check_value(dic, n):\r\n  res = all(value == n for value in dic.values()\r\n  return (res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 464,
    "precondition": "dic is a dictionary, and n is any value."
  },
  "465": {
    "specification": "Write a function to drop empty items from a given dictionary.",
    "code": "def drop_empty(dictionary):\r\n  res = {}\r\n  for k,v in dictionary.items():\r\n    if v is not None:\r\n      res[k] = v\r\n  return res\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 465,
    "precondition": "dictionary is a dictionary."
  },
  "468": {
    "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "code": "def max_product(arr):\r\n    n = len(arr)\r\n    dp_max = [1]*n\r\n    dp_min = [1]*n\r\n    dp_max[0] = arr[0]\r\n    dp_min[0] = arr[0]\r\n    for i in range(1, n):\r\n        dp_max[i] = max(arr[i], dp_max[i-1]*arr[i], dp_min[i-1]*arr[i));\r\n        dp_min[i] = min(arr[i], dp_max[i-1]*arr[i], dp_min[i-1]*arr[i]\r\n    return max(dp_max)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 468,
    "precondition": "arr is a list of integers."
  },
  "470": {
    "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
    "code": "def add_pairwise(num): \r\n    res = [] \r\n    for i in range(len(num) - 1):\r\n        res.append(num[i] + num[i+1]) \r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 470,
    "precondition": "num is a tuple of integers with a length of at least 2."
  },
  "471": {
    "specification": "Write a python function to find the product of the array multiplication modulo n.",
    "code": "def find_remainder(arr,n):\r\n    prod = 1\r\n    for i in arr:\r\n        prod = (prod * i) % n\r\n    return prod\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 471,
    "precondition": "arr is a list of integers, and n is a positive integer."
  },
  "472": {
    "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "code": "def check_Consecutive(lst):\r\n    if len(lst) <= 1:\r\n        return True\r\n    else:\r\n        sorted\\_lst = sorted(lst)\r\n        for i in range(len(sorted\\_lst) - 1):\r\n            if sorted\\_lst[i+1] - sorted\\_lst[i] > 1:\r\n                return False\r\n        return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 472,
    "precondition": "lst is a list of integers."
  },
  "473": {
    "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "code": "def tuple_intersection(tup_list1, tup_list2):\r\n    res = {}\\\n    for tup in tup_list1:\r\n        if tup in tup_list2:\r\n            res[tup] = 1\r\n    return res.keys()\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 473,
    "precondition": "tup\\_list1 and tup\\_list2 are lists of tuples."
  },
  "474": {
    "specification": "Write a function to replace characters in a string.",
    "code": "def replace_char(str1,char1,char2):\r\n    result = str1.replace(char1,char2)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 474,
    "precondition": "str1 is a string, char1 and char2 are single-character strings."
  },
  "475": {
    "specification": "Write a function to sort a dictionary by value.",
    "code": "def sort_counter(counter)\r\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)\r\n\r\nOr\r\n\r\ndef sort_counter(counter)\r\n    return [(k,v) for k,v in sorted(counter.items(), key=lambda item: item[1], reverse=True)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 475,
    "precondition": "counter is a dictionary."
  },
  "476": {
    "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "code": "def big_sum(arr):\r\n    max_num = max(arr):\r\n    min_num = min(arr)\r\n    return max_num + min_num\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 476,
    "precondition": "arr is a non-empty list of numbers."
  },
  "477": {
    "specification": "Write a python function to convert the given string to lower case.",
    "code": "def is_lower(input\\_str):\r\n    return input\\_str.lower()\r\nassert is\\_lower(\"InValid\") == \"invalid\"\r\nprint(\"Test Case Passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 477,
    "precondition": "input\\_str is a string."
  },
  "478": {
    "specification": "Write a function to remove lowercase substrings from a given string.",
    "code": "def remove_lowercase(s):\r\n    return \"\".join(filter(str.isupper, s))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 478,
    "precondition": "s is a string."
  },
  "479": {
    "specification": "Write a python function to find the first digit of a given number.",
    "code": "def first_Digit(n):\r\n    return int(str(abs(n))[0])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 479,
    "precondition": "n is an integer (positive, negative, or zero)."
  },
  "554": {
    "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
    "code": "def Split(numbers):\r\n  res = [n for n in numbers if n % 2 != 0]\r\n  return (res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 554,
    "precondition": "numbers is a list of integers."
  },
  "555": {
    "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
    "code": "def difference(n):\r\n    first_n = n * (n+1) // 2\r\n    first_n_cube = n * (n+1) * (n+2) // 6\r\n    return abs(first_n_cube - first_n)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 555,
    "precondition": "n is an integer."
  },
  "556": {
    "specification": "Write a python function to count the number of pairs whose xor value is odd.",
    "code": "def find_Odd_Pair(arr,n):\r\n    result = 0\r\n    for i in range(n,\r\n        for j in range(i+1,n):\r\n            if (arr[i] ^ arr[j]) & 1 == 1:\r\n                result += 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 556,
    "precondition": "arr is a list of integers and n is a non-negative integer such that 0 <= n <= len(arr)."
  },
  "557": {
    "specification": "Write a function to toggle the case of all characters in a string.",
    "code": "def toggle_string(str1):\r\n    result = \"\"\r\n    for i in str1:\r\n        if i.islower():\r\n            result += i.upper()\r\n        else:\r\n            result += i.lower()\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 557,
    "precondition": "str1 is a string."
  },
  "558": {
    "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
    "code": "def digit_distance_nums(num1, num2):\r\n    str1 = str(num1)\r\n    str2 = str(num2)\r\n    sum\\_diff = 0\r\n    if len(str1) == len(str2):\r\n        for i in range(len(str1)):\r\n            sum\\_diff += abs(int(str1[i]) - int(str2[i]))\r\n    else:\r\n        print(\"Error: Both numbers should have the same number of digits\")\r\n    return sum_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 558,
    "precondition": "num1 and num2 are integers with the same number of digits."
  },
  "559": {
    "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
    "code": "def max_sub_array_sum(arr,n):\r\n    max_so_far = arr[0]\r\n    max_ending_here = arr[0]\r\n    for i in range(1,n):\r\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\r\n        if max_ending_here > max_so_far:\r\n            max_so_far = max_ending_here\r\n    return max_so_far\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 559,
    "precondition": "arr is a list of numbers, and n is a non-negative integer such that 0 <= n <= len(arr)."
  },
  "560": {
    "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
    "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(sorted(set(test_tup1) | set(test_tup2)))\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 560,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples."
  },
  "562": {
    "specification": "Write a python function to find the length of the longest sublists.",
    "code": "def Find_Max_Length(input\\_list):\r\n    max\\_length = 0\r\n    for i in input\\_list:\r\n        if len(i) > max\\_length:\r\n            max\\_length = len(i)\r\n    return max\\_length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 562,
    "precondition": "input\\_list is a list of non-empty lists."
  },
  "563": {
    "specification": "Write a function to extract values between quotation marks from a string.",
    "code": "import re\r\ndef extract_values(string)\r\n    return re.findall(r'\"([^\"]*)\"', string)\r\n\r\nOR\r\n\r\ndef extract_values(string):\r\n    return re.findall(r'\".+?\"', string)\r\n\r\nOR\r\n\r\ndef extract_values(string):\r\n    return re.findall(r'(?<=\")[^\"]*(?=\")', string)\r\n\r\nOR\r\n\r\ndef extract_values(string):\r\n    result = []\r\n    start = 0\r\n    while True:\r\n        start = string.find('\"', start) + 1\r\n        if start > len(string) - 1:\r\n            break\r\n        end = string.find('\"', start) - 1\r\n        result.append(string[start:end + 1] )\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 563,
    "precondition": "string is a string containing zero or more substrings enclosed in double quotation marks."
  },
  "564": {
    "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
    "code": "def count_Pairs(lst, n):\r\n    count = 0\r\n    for i in range(len(lst));\r\n        for j in range(i+1, len(lst));\r\n            if lst[i] != lst[j]\r\n                count += 1\r\n    return count/2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 564,
    "precondition": "lst is a list of integers and n is a non-negative integer such that 0 <= n <= len(lst)."
  },
  "565": {
    "specification": "Write a python function to split a string into characters.",
    "code": "def split(aStr)\r\n    return (list(aStr))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 565,
    "precondition": "aStr is a string."
  },
  "566": {
    "specification": "Write a function to get the sum of the digits of a non-negative integer.",
    "code": "def sum_digits(n):\r\n    sum = 0\r\n    while n != 0:\r\n        sum += n % 10\r\n        n //= 10\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 566,
    "precondition": "n is an integer that is non-negative (i.e. n >= 0)."
  },
  "567": {
    "specification": "Write a function to check whether a specified list is sorted or not.",
    "code": "def issort_list(nlist):\r\n    if nlist == sorted(nlist):\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 567,
    "precondition": "nlist is a list."
  },
  "568": {
    "specification": "Write a function to create a list of N empty dictionaries.",
    "code": "def empty_list(N):\r\n    return [{} for x in range(N)]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 568,
    "precondition": "N is an integer."
  },
  "569": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(lst):\r\n    return [sorted(sublst) for sublst in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 569,
    "precondition": "lst is a list of lists of strings."
  },
  "572": {
    "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
    "code": "def two_unique_nums(*args):\r\n    unique_list = []\r\n    for num_list in args:\r\n        for num in num_list:\r\n            if num not in unique_list:\r\n                unique_list.append(num)\r\n    return unique_list\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 572,
    "precondition": "args is a variable number of lists of integers."
  },
  "573": {
    "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
    "code": "def unique_product(L):\r\n  unique_list = list(set(L))\r\n  product = 1\r\n  for i in unique_list:\r\n    product = product * i\r\n  return product\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 573,
    "precondition": "L is a list of numbers."
  },
  "574": {
    "specification": "Write a function to find the surface area of a cylinder.",
    "code": "import math\r\ndef surfacearea_cylinder(radius,height):\r\n    return 2 * math.pi * radius * (radius + height)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 574,
    "precondition": "radius is a positive float representing the radius of the cylinder, and height is a positive float representing the height of the cylinder."
  },
  "576": {
    "specification": "Write a python function to check whether a list is sublist of another or not.",
    "code": "def is_Sub_Array(arr1, arr2):\r\n    if len(arr1) < len(arr2):\r\n        return False\r\n    for i in range(len(arr1) - len(arr2) + 1):\r\n        if arr1[i:i+len(arr2)] == arr2:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 576,
    "precondition": "arr1 and arr2 are lists of comparable elements."
  },
  "577": {
    "specification": "Write a python function to find the last digit in factorial of a given number.",
    "code": "def last_Digit_Factorial(n):\r\n\tfact = 1\r\n\twhile n > 0:\r\n\t\tfact *= n\r\n\t\tn -= 1\r\n\treturn fact % 10\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 577,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "578": {
    "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
    "code": "def interleave_lists(*args):\r\n    result = []\r\n    for item in zip(*args):\r\n        for i in item:\r\n            result.append(i)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 578,
    "precondition": "args is a tuple of three lists, all of the same length."
  },
  "579": {
    "specification": "Write a function to find the dissimilar elements in the given two tuples.",
    "code": "def find_dissimilar(tup1, tup2):\r\n\tres = tuple(set(tup1) ^ set(tup2))\r\n\treturn (res)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 579,
    "precondition": "tup1 and tup2 are tuples."
  },
  "580": {
    "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
    "code": "def extract_even(mixed_tuple):\r\n    result = tuple()\r\n    for item in mixed_tuple:\r\n        if isinstance(item, tuple):\r\n            item = extract_even(item)\r\n        if type(item) is int and item % 2 == 0:\r\n            result += (item,)\r\n        elif type(item) is tuple:\r\n            result += item\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 580,
    "precondition": "mixed\\_tuple is a tuple that contains either integers or nested tuples."
  },
  "581": {
    "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
    "code": "def surface_Area(base_edge, height):\r\n    return base_edge * height + base_edge * base_edge\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 581,
    "precondition": "base\\_edge and height are positive real numbers."
  },
  "582": {
    "specification": "Write a function to check if a dictionary is empty",
    "code": "def is_empty(dictionary):\r\n    return len(dictionary) == 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 582,
    "precondition": "dictionary is a dictionary."
  },
  "583": {
    "specification": "Write a function which returns nth catalan number.",
    "code": "import math\r\ndef catalan_number(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return int(math.factorial(2*n)/(math.factorial(n)*math.factorial(n+1))\r\n\r\nassert catalan_number(10)==16796\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 583,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "584": {
    "specification": "Write a function to find the first adverb ending with ly and its positions in a given string.",
    "code": "def find_adverbs(sentence):\r\n    words = sentence.split()\r\n    for i, word in enumerate(words):\r\n        if word.endswith(\"ly\"):\r\n            return f\"{i}-{len(word)}: {word}\"*\r\n    return \"No adverb found\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 584,
    "precondition": "sentence is a string."
  },
  "585": {
    "specification": "Write a function to find the n most expensive items in a given dataset.",
    "code": "def expensive_items(items, n):\r\n    return sorted(items, key=lambda x:x['price'], reverse=True)[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 585,
    "precondition": "items is a list of dictionaries where each dictionary represents an item and has a 'price' key, and n is a non-negative integer such that 0 <= n <= len(items)."
  },
  "586": {
    "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
    "code": "def split_Arr(arr,n):\r\n    return arr[n:] + arr[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 586,
    "precondition": "arr is a list and n is an integer such that 0 <= n < len(arr)."
  },
  "587": {
    "specification": "Write a function to convert a list to a tuple.",
    "code": "def list_tuple(input\\_list):\r\n  return tuple(input\\_list)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 587,
    "precondition": "input\\_list is a list."
  },
  "588": {
    "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
    "code": "def big_diff(lst):\r\n  return max(lst) - min(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 588,
    "precondition": "lst is a list of numbers."
  },
  "589": {
    "specification": "Write a function to find perfect squares between two given numbers.",
    "code": "def perfect_squares(start, end):\r\n    sq_list = [] \r\n    for i in range(start, end + 1):\r\n        if i**0.5 % 1 == 0:\r\n            sq_list.append(int(i ** 0.5)) \r\n    return sq_list \r\n   \nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 589,
    "precondition": "start and end are integers such that start <= end."
  },
  "590": {
    "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
    "code": "import cmath\r\ndef polar_rect(r,theta):\r\n    x = r * cmath.cos(theta)\r\n    y = r * cmath.sin(theta)\r\n    return (x.real, x.imag), (y.real, y.imag)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 590,
    "precondition": "r is a non-negative real number and theta is a real number."
  },
  "591": {
    "specification": "Write a python function to interchange the first and last elements in a list.",
    "code": "def swap_List(input_List:\r\n    if len(input_List) < 2:\r\n        return input_List\r\n    else:\r\n        first_Element = input_List[0]\r\n        input_List[-1] = first_Element\r\n        input_List[0] = input_List[-1]\r\n        return input_List\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 591,
    "precondition": "input\\_List is a list."
  },
  "592": {
    "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
    "code": "def factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1)\r\n\r\ndef binomial_coeff(n, k):\r\n    return int(factorial(n) / (factorial(k) * factorial(n-k));\r\n\r\ndef sum_Of_product(n):\r\n    sum = 1\r\n    for i in range(1, n+1):\r\n        sum *= binomial_coeff(i, i)\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 592,
    "precondition": "n is a non-negative integer."
  },
  "593": {
    "specification": "Write a function to remove leading zeroes from an ip address.",
    "code": "Program:\n```\nimport re\r\ndef removezero_ip(ip)\r\n    return re.sub(r'(\\.\\d\\.)0+', r'\\1', ip)\r\n\r\nOR you can also use split and join\r\n\r\nProgram:\r\ndef removezero_ip(ip)\r\n    ip\\_list = ip.split('.')\r\n    for i in range(4):\r\n        if ip\\_list[i] == '0' and i < 3:\r\n            ip\\_list[i] = ''\r\n        elif ip\\_list[i] == '0 Anderson':\n            ip\\_list[i] = '' \r\n    return '.'.join(ip\\_list)\r\n\r\nassert removezero_ip(\"216.08.094.196\") == \"216.8.94.196\"\r\nassert removezero_ip(\"192.168.001.1\") == \"192.168.1.1\"\r\nassert removezero_ip(\"192.168.0001.1\") == \"192.168.1.1\"\r\nassert removezero_ip(\"010.010.010.010\") == \"10.10.10.10\"\r\nassert removezero_ip(\"010.010.010.001\") == \"10.10.10.1\"\r\nassert removezero_ip(\"010.010.001.010\") == \"10.10.1.10\"\r\nassert removezero_ip(\"010.010.001.001\") == \"10.10.1.1\"\r\nassert removezero_ip(\"010.001.010.010\") == \"10.1.10.10\"\r\nassert removezero_ip(\"001.010.010.010\") == \"1.10.10.10\"\r\nassert removezero_ip(\"001.001.001.001\") == \"1.1.1.1\"\r\nassert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0.1\") == \"0.0.0.1\"\r\nassert removezero_ip(\"0.0.1.0\") == \"0.0.1.0\"\r\nassert removezero_ip(\"0.1.0.0\") == \"0.1.0.0\"\r\nassert removezero_ip(\"1.0.0.0\") == \"1.0.0.0\"\r\nassert removezero_ip(\"10.0.0.0\") == \"10.0.0.0\"\r\nassert removezero_ip(\"10.10.0.0\") == \"10.10.0.0\"\r\nassert removezero_ip(\"10.10.10.0\") == \"10.10.10.0\"\r\nassert removezero_ip(\"10.10.10.1\") == \"10.10.10.1\"\r\nassert removezero_ip(\"10.10.1.1\") == \"10.10.1.1\"\r\nassert removezero_ip(\"1.1.1.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"1.1.1.01\") == \"1.1.1.1\"\r\nassert removezero_ip(\"1.1.01.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"1.01.1.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"01.1.1.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"101.1.1.1\") == \"101.1.1.1\"\r\nassert removezero_ip(\"11.1.1.1\") == \"11.1.1.1\"\r\nassert removezero_ip(\"111.1.1.1\") == \"111.1.1.1\"\r\nassert removezero_ip(\"111.111.1.1\") == \"111.111.1.1\"\r\nassert removezero_ip(\"111.111.111.1\") == \"111.111.111.1\"\r\nassert removezero_ip(\"111.111.111.11\") == \"111.111.111.1\"\r\nassert removezero_ip(\"111.111.111.111\") == \"111.111.111.111\"\r\nassert removezero_ip(\"111.111.111.1111\") == \"111.111.111.1111\"\r\nassert removezero_ip(\"0111.111.111.1111\") == \"111.111.111.1111\"\r\nassert removezero_ip(\"1111.111.111.1111\") == \"1111.111.111.1111\"\r\nassert removezero_ip(\"1111111.1111111.11111111.111111111\") == \"1111111.1111111.11111111.111111111\"\r\nassert removezero_ip(\"000.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.0.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.000000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000.0.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000.0.0.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0000000000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0000.00000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.000000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.00000.0.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.00000.00.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.0.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.0.0000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.00000000.00.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000.000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.0000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.00000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0000.000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.00.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.00.000000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.00.00000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.00.00000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.0.000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.0.0000.00000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.0000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.000000.00000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.0000.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000000000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.0000000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.000.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.0000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.00000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.00000.00000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000.00000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000.00000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000.000000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000.000000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000000.00000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000000000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"1111111111111111111111111111111111111111111111111111111111111111\") == \"1111111111111111111111111111111111111111111111111111111111111111\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000\") == \"0\"\r\nassert removezero_ip(\"000000000\") == \"0\"\r\nassert removezero_ip(\"00000000\") == \"0\"\r\nassert removezero_ip(\"0000000\") == \"0\"\r\nassert removezero_ip(\"000000\") == \"0\"\r\nassert removezero_ip(\"00000\") == \"0\"\r\nassert removezero_ip(\"0000\") == \"0\"\r\nassert removezero_ip(\"000\") == \"0\"\r\nassert removezero_ip(\"00\") == \"0\"\r\nassert removezero_ip(\"0\") == \"0\"\r\nassert removezero_ip(\"\") == \"\"\r\n\r\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\r\nassert removezero_ip(\"192.168.001.1\") == \"192.168.1.1\"\r\nassert removezero_ip(\"192.168.0001.1\") == \"192.168.1.1\"\r\nassert removezero_ip(\"010.010.010.010\") == \"10.10.10.10\"\r\nassert removezero_ip(\"010.010.010.001\") == \"10.10.10.1\"\r\nassert removezero_ip(\"010.010.001.010\") == \"10.10.1.10\"\r\nassert removezero_ip(\"010.010.001.001\") == \"10.10.1.1\"\r\nassert removezero_ip(\"010.001.010.010\") == \"10.1.10.10\"\r\nassert removezero_ip(\"001.010.010.010\") == \"1.10.10.10\"\r\nassert removezero_ip(\"001.001.001.001\") == \"1.1.1.1\"\r\nassert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0.1\") == \"0.0.0.1\"\r\nassert removezero_ip(\"0.0.1.0\") == \"0.0.1.0\"\r\nassert removezero_ip(\"0.1.0.0\") == \"0.1.0.0\"\r\nassert removezero_ip(\"1.0.0.0\") == \"1.0.0.0\"\r\nassert removezero_ip(\"10.0.0.0\") == \"10.0.0.0\"\r\nassert removezero_ip(\"10.10.0.0\") == \"10.10.0.0\"\r\nassert removezero_ip(\"10.10.10.0\") == \"10.10.10.0\"\r\nassert removezero_ip(\"10.10.10.1\") == \"10.10.10.1\"\r\nassert removezero_ip(\"10.10.1.1\") == \"10.10.1.1\"\r\nassert removezero_ip(\"1.1.1.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"1.1.1.01\") == \"1.1.1.1\"\r\nassert removezero_ip(\"1.1.01.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"1.01.1.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"01.1.1.1\") == \"1.1.1.1\"\r\nassert removezero_ip(\"101.1.1.1\") == \"101.1.1.1\"\r\nassert removezero_ip(\"11.1.1.1\") == \"11.1.1.1\"\r\nassert removezero_ip(\"111.1.1.1\") == \"111.1.1.1\"\r\nassert removezero_ip(\"111.111.1.1\") == \"111.111.1.1\"\r\nassert removezero_ip(\"111.111.111.1\") == \"111.111.111.1\"\r\nassert removezero_ip(\"111.111.111.11\") == \"111.111.111.1\"\r\nassert removezero_ip(\"111.111.111.111\") == \"111.111.111.111\"\r\nassert removezero_ip(\"111.111.111.1111\") == \"111.111.111.1111\"\r\nassert removezero_ip(\"0111.111.111.1111\") == \"111.111.111.1111\"\r\nassert removezero_ip(\"1111.111.111.1111\") == \"1111.111.111.1111\"\r\nassert removezero_ip(\"1111111.1111111.11111111.111111111\") == \"1111111.1111111.11111111.111111111\"\r\nassert removezero_ip(\"000.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0000.00000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.00000000.00.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000.000.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.0000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000.00000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0000.000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.0.0000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0.000000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000000.00000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000.00000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.000000000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.0000000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.0000.0000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000.00000.000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000.00000000.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000.000000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000.00000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000.0000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000.000.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000000.00.0000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000000.0.000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000000.0.00\") == \"0.0.0.0\"\r\nassert removezero_ip(\"000000000000.0\") == \"0.0.0.0\"\r\nassert removezero_ip(\"0000000000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"00000000000000\") == \"0.0.0.0\"\r\nassert removezero_ip(\"1111111111111111111111111111111111111111111111111111111111111111\") == \"1111111111111111111111111111111111111111111111111111111111111111\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000000\") == \"0\"\r\nassert removezero_ip(\"000000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000\") == \"0\"\r\nassert removezero_ip(\"00000000000\") == \"0\"\r\nassert removezero_ip(\"0000000000\") == \"0\"\r\nassert removezero_ip(\"000000000\") == \"0\"\r\nassert removezero_ip(\"00000000\") == \"0\"\r\nassert removezero_ip(\"0000000\") == \"0\"\r\nassert removezero_ip(\"000000\") == \"0\"\r\nassert removezero_ip(\"00000\") == \"0\"\r\nassert removezero_ip(\"0000\") == \"0\"\r\nassert removezero_ip(\"000\") == \"0\"\r\nassert removezero_ip(\"00\") == \"0\"\r\nassert removezero_ip(\"0\") == \"0\"\r\nassert removezero_ip(\"\") == \"\"\r\n\r\nOR you can also use split and join\r\n\r\ndef removezero_ip(ip)\r\n    ip\\_list = ip.split('.')\r\n    for i in range(4):\r\n        if ip\\_list[i] == '0' and i < 3:\r\n            ip\\_list[i] = ''\r\n        elif ip\\_list[i] == '0 Anderson':\r\n            ip\\_list[i] = '' \r\n    return '.'.join(ip\\_list)",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 593,
    "precondition": "ip is a string representing an IP address in the form of a.b.c.d, where a, b, c, and d are non-negative integers."
  },
  "594": {
    "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
    "code": "def diff_even_odd(lst):\r\n    even_lst = [i for i in lst if i % 2 == 0]\r\n    odd_lst = [i for i in lst if i % 2 != 0]\r\n    if even_lst and odd_lst:\r\n        return min(even_lst)[0] - min(odd_lst)[0]\r\n    else:\r\n        return \"No even or odd numbers in the list\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 594,
    "precondition": "lst is a list of integers."
  },
  "595": {
    "specification": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
    "code": "def min_Swaps(str1, str2):\r\n    count = 0\r\n    for i in range(len(str1));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 595,
    "precondition": "str1 and str2 are strings representing binary numbers of the same length."
  },
  "596": {
    "specification": "Write a function to find the size in bytes of the given tuple.",
    "code": "import sys\r\ndef tuple_size(tup):\r\n    return sys.getsizeof(tup)\r\n\r\n# Test the function\r\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 596,
    "precondition": "tup is a tuple."
  },
  "597": {
    "specification": "Write a function to find kth element from the given two sorted arrays.",
    "code": "def find_kth(arr1, arr2, k):\r\n    if len(arr1) > len(arr2):\r\n        arr1, arr2 = arr2, arr1\r\n    if k > len(arr1):\r\n        return -1\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    if len(arr1) == k:\r\n        return arr2[k-1]\r\n    if len(arr2) == k:\r\n        return arr1[k-1]\r\n    m = len(arr1)\r\n    n = len(arr2)\r\n    mid1 = m // 2\r\n    mid2 = n // 2\r\n    if arr1[mid1] == arr2[mid2]:\r\n        return arr1[mid1]\r\n    if arr1[mid1] > arr2[mid2]:\r\n        if k <= m:\r\n            return find_kth(arr1[:mid1], arr2, k)\r\n        else:\r\n            return find_kth(arr1, arr2[mid2:], k-mid2)\r\n    else:\r\n        if k <= m:\r\n            return find_kth(arr1, arr2[:mid2], k)\r\n        else:\r\n            return find_kth(arr1[mid1:], arr2, k-mid1)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 597,
    "precondition": "arr1 and arr2 are sorted lists of integers, and k is a positive integer such that k <= len(arr1) + len(arr2)."
  },
  "598": {
    "specification": "Write a function to check whether the given number is armstrong or not.",
    "code": "import math\r\ndef power(n, k):\r\n\treturn math.pow(n, k)\r\ndef armstrong_number(n):\r\n\toriginal_num = n\r\n\tsum = 0\r\n\twhile n > 0:\r\n\t\tsum += power(n % 10, 3)\r\n\t\tn //= 10\r\n\treturn original_num == sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 598,
    "precondition": "n is an integer."
  },
  "599": {
    "specification": "Write a function to find sum and average of first n natural numbers.",
    "code": "def sum_average(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i\r\n    avg = sum/n\r\n    return (sum, avg)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 599,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "600": {
    "specification": "Write a python function to check whether the given number is even or not.",
    "code": "def is_Even(n):\r\n    return (n%2 == 0)\r\nassert is_Even(1) == False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 600,
    "precondition": "n is an integer."
  },
  "602": {
    "specification": "Write a python function to find the first repeated character in a given string.",
    "code": "def first_repeated_char(str1):\r\n    freq = {}\r\n    for n in str1:\r\n        keys = freq.keys()\r\n        if n in keys:\r\n            return n\r\n        else:\r\n            freq[n] = 0\r\n    return \"No repeated character\"\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 602,
    "precondition": "str1 is a string."
  },
  "603": {
    "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
    "code": "import math\r\ndef is_lucid(n):\r\n    count = 0\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            if i * i == n:\r\n                count += 1\r\n            else:\r\n                count += 2\r\n    return count % 2 == 0\r\n\r\ndef get_ludic(n):\r\n    res = []\r\n    for i in range(1,n+1):\r\n        if is_lucid(i):\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 603,
    "precondition": "n is an integer."
  },
  "604": {
    "specification": "Write a function to reverse words seperated by spaces in a given string.",
    "code": "def reverse_words(sentence)\r\n\treturn \" \".join(sentence.split()[::-1])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 604,
    "precondition": "sentence is a string."
  },
  "605": {
    "specification": "Write a function to check if the given integer is a prime number.",
    "code": "def prime_num(n):\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 605,
    "precondition": "n is an integer."
  },
  "606": {
    "specification": "Write a function to convert degrees to radians.",
    "code": "import math\r\ndef radian_degree(degree:\r\n    return math.radians(degree)\r\nassert radian_degree(90)==1.5707963267948966\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 606,
    "precondition": "degree is a real number."
  },
  "607": {
    "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
    "code": "import re\r\ndef find_literals(string, pattern):\r\n    match = re.search(pattern, string)\r\n    if match:\r\n        return (match.group(), match.start(), match.end()\r\n    else:\r\n        return (None, None, None)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 607,
    "precondition": "string is a valid string and pattern is a valid regex pattern."
  },
  "608": {
    "specification": "Write a python function to find nth bell number.",
    "code": "def bell_Number(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        return sum(bell_Number(i) for i in range(1, n))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 608,
    "precondition": "n is a non-negative integer."
  },
  "610": {
    "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
    "code": "def remove_kth_element(input_list, k):\r\n    res = input_list.copy()\r\n    res.pop(k)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 610,
    "precondition": "input\\_list is a list and k is an integer such that 0 <= k < len(input\\_list)."
  },
  "611": {
    "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
    "code": "def max_of_nth(matrix, n));\r\n\tmax\\_val = matrix[0][n]\r\n\tfor x in range(1, len(matrix));\r\n\t\tif(matrix[x][n] > max_val):\r\n\t\t\tmax_val = matrix[x][n]\r\n\treturn max_val\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 611,
    "precondition": "matrix is a list of lists of comparable elements, and n is a non-negative integer such that 0 <= n < len(matrix[0])."
  },
  "612": {
    "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
    "code": "def merge(lst\\_of\\_lists):\r\n    return list(map(list, zip(*lst_of_lists))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 612,
    "precondition": "lst\\_of\\_lists is a list of lists, and each sublist contains exactly two elements."
  },
  "614": {
    "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "code": "def cummulative_sum(lst):\r\n    sum = 0\r\n    for i in lst:\r\n        sum += sum(i)\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 614,
    "precondition": "lst is a list of tuples, where each tuple contains only numbers."
  },
  "615": {
    "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
    "code": "def average_tuple(tup)\r\n    avg\\_list = []\r\n    for t in tup:\r\n        avg = sum(t)/len(t)\r\n        avg\\_list.append(avg)\r\n    return avg\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 615,
    "precondition": "tup is a tuple of tuples where each inner tuple contains only numbers."
  },
  "616": {
    "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
    "code": "def tuple_modulo(tup1, tup2):\r\n  res = tuple(x % y for x, y in zip(tup1, tup2))\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 616,
    "precondition": "tup1 and tup2 are tuples of the same length consisting of integers."
  },
  "617": {
    "specification": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "code": "def min_Jumps(point, jump\\_length):\r\n    d = point[0]\r\n    if d % jump_length != 0:\r\n        return math.ceil(d/jump_length)\r\n    return d/jump_length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 617,
    "precondition": "point is a tuple of two integers where the first element is strictly positive, and jump\\_length is a positive integer."
  },
  "618": {
    "specification": "Write a function to divide two lists element wise.",
    "code": "def div_list(list1, list2)\r\n    return [x/y for x, y in zip(list1, list2)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 618,
    "precondition": "list1 and list2 are lists of numbers with the same length."
  },
  "619": {
    "specification": "Write a function to move all the numbers to the end of the given string.",
    "code": "import re\r\ndef move_num(s):\r\n    num = re.findall('\\d+',s)\r\n    for i in num:\r\n        s = s.replace(i, ' ' + i)\r\n    s = s.replace(' ', '')\r\n    return s\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 619,
    "precondition": "s is a string."
  },
  "620": {
    "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
    "code": "def is_divisible(a, b):\r\n    result = False\r\n    if a % b == 0:\r\n        result = True\r\n    return result\r\n\r\ndef largest_subset(numbers):\r\n    div\\_count = []\r\n    for i in range(len(numbers));\r\n        div\\_count.append(0)\r\n        for j in range(i,\r\n            if is_divisible(numbers[j], numbers[i\r\r\n                div_count[i] += 1\r\n    max\\_div = max(div_count)\r\n    max\\_indexes = [i for i, x in enumerate(div_count) if x == max_div]\r\n    return max_div + 1\r\n\r\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 620,
    "precondition": "numbers is a list of integers."
  },
  "622": {
    "specification": "Write a function to find the median of two sorted lists of same size.",
    "code": "def get_median(list1, list2, size):\r\n    merged_list = sorted(list1 + list2)\r\n    if size % 2 == 0:\r\n        median = (merged_list[size//2] + merged_list[size//2 - 1])/2.0\r\n    else:\r\n        median = merged_list[size//2]\r\n    return median\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 622,
    "precondition": "list1 and list2 are sorted lists of integers with the same size, size is a positive integer."
  },
  "623": {
    "specification": "Write a function to compute the n-th power of each number in a list.",
    "code": "def nth_nums(nums, n):\r\n    return [x**n for x in nums]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 623,
    "precondition": "nums is a list of numbers, and n is an integer."
  },
  "624": {
    "specification": "Write a python function to convert a given string to uppercase.",
    "code": "def is_upper(str1):\r\n    return str1.upper()\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 624,
    "precondition": "str1 is a string."
  },
  "625": {
    "specification": "Write a python function to interchange the first and last element in a given list.",
    "code": "def swap_List(given\\_list):\r\n    first\\_ele = given\\_list[0]\r\n    given\\_list[0] = given\\_list[len(given\\_list) - 1]\r\n    given\\_list[len(given\\_list) - 1] = first\\_ele\r\n    return given\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 625,
    "precondition": "given\\_list is a list."
  },
  "626": {
    "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
    "code": "import math\ndef triangle_area(radius):\r\n    if radius < 0:\r\n        return None\r\n    else:\r\n        side = 2 * radius\r\n        area = (side * side * math.sqrt(3))\r\n              ) / 4\r\n        return area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 626,
    "precondition": "radius is a real number."
  },
  "627": {
    "specification": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
    "code": "def find_First_Missing(lst):\r\n  if lst == []:\r\n    return 1\r\n  for i in range(len(lst))\r\n    if lst[i] != i\r\n      return i + 1\r\n  return lst[-1] + 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 627,
    "precondition": "lst is a sorted list of natural numbers."
  },
  "628": {
    "specification": "Write a function to replace all spaces in the given string with '%20'.",
    "code": "def replace_spaces(s):\r\n    res = s.replace(' ', '%20')\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 628,
    "precondition": "s is a string."
  },
  "629": {
    "specification": "Write a python function to find even numbers from a list of numbers.",
    "code": "def find_even(numbers\r\n ):\r\n    res = [x for x in numbers if x % 2 == 0]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 629,
    "precondition": "numbers is a list of integers."
  },
  "630": {
    "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "code": "def get_coordinates(coord\r\n  adjacent_coord = []\r\n  x, y = coord\r\n  for i in range(x-1, x+2):\r\n    for j in range(y-1, y+2):\r\n      if i != x or j != y:\r\n        adjacent_coord.append((i,j))\r\n  return adjacent_coord\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 630,
    "precondition": "coord is a tuple of two integers."
  },
  "631": {
    "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
    "code": "def replace_spaces(string)\r\n    return string.replace(' ','\\_').replace('\\_',' ')\r\n\r\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 631,
    "precondition": "string is a string."
  },
  "632": {
    "specification": "Write a python function to move all zeroes to the end of the given list.",
    "code": "def move_zero(nums):\r\n    count = 0\r\n    for i in range(len(nums):\r\n        if nums[i] != 0:\r\n            nums[count], nums[i] = nums[i], nums[count]\r\n            count += 1\r\n    for i in range(count, len(nums):\r\n        nums[i] = 0\r\n    return nums\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 632,
    "precondition": "nums is a list of integers."
  },
  "633": {
    "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
    "code": "def pair_xor_Sum(numbers, n):\r\n\tsum = 0\r\n\tfor i in range(len(numbers));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 633,
    "precondition": "numbers is a list of integers, and n is a non-negative integer such that 0 <= n <= len(numbers)."
  },
  "635": {
    "specification": "Write a function to sort the given list.",
    "code": "import heapq\r\ndef heap_sort(n\\_list):\r\n    heapq.heapify(n_list)\r\n    return heapq.heappop(n_list) for x in range(len(n_list))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 635,
    "precondition": "n\\_list is a list of comparable elements."
  },
  "637": {
    "specification": "Write a function to check whether the given amount has no profit and no loss",
    "code": "def noprofit_noloss(amount,cost\\_price)\r\n    if amount-cost_price == 0:\r\n        return True\r\n    return False \r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 637,
    "precondition": "amount and cost\\_price are integers or floats."
  },
  "638": {
    "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
    "code": "def wind_chill(velocity, temp)\r\n    wci = 13.12 + 0.6215*temp - 11.37*velocity**0.16 + 0.3965*temp*velocity**0.16\r\n    return int(round(wci))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 638,
    "precondition": "velocity is a non-negative floating point number representing wind velocity in km/h, and temp is a floating point number representing temperature in celsius."
  },
  "639": {
    "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "code": "def sample_nam(names):\r\n  res = [len(name) for name in names if name[0].isupper()\r\n  return sum(res)\r\n\r\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\r\nprint(\"Successful\")\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 639,
    "precondition": "names is a list of strings."
  },
  "640": {
    "specification": "Write a function to remove the parenthesis and what is inbetween them from a string.",
    "code": "import re\r\ndef remove_parenthesis(string\\_list):\r\n    pattern = r\"\\(.*?\\)\"\r\n    result = [re.sub(pattern, \"\", i) for i in string_list]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 640,
    "precondition": "string\\_list is a list of strings."
  },
  "641": {
    "specification": "Write a function to find the nth nonagonal number.",
    "code": "def is_nonagonal(n):\r\n    return (n*(n-1) + 3*n + 2)//2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 641,
    "precondition": "n is an integer."
  },
  "643": {
    "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
    "code": "def text_match_wordz_middle(text):\r\n    if text.startswith(\"z\") or text.endswith(\"z\")\r\n        return False\r\n    else:\r\n        if \"z\" in text and text.count(\"z\") > 1:\r\n            return False\r\n        else:\r\n            return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 643,
    "precondition": "text is a string."
  },
  "644": {
    "specification": "Write a python function to reverse an array upto a given position.",
    "code": "def reverse_Array_Upto_K(arr, k):\r\n    start = 0\r\n    end = k\r\n    while start < end:\r\n        arr[start], arr[end] = arr[end], arr[start]\r\n        start += 1;\r\n        end -= 1;\r\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 644,
    "precondition": "arr is a list of elements and k is an integer such that 0 <= k < len(arr)."
  },
  "720": {
    "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
    "code": "def add_dict_to_tuple(tup, dct):\r\n    return tup + (dct,)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 720,
    "precondition": "tup is a tuple and dct is a dictionary."
  },
  "721": {
    "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
    "code": "def maxAverageOfPath(cost)\r\n    n = len(cost)\r\n    dp = [[0 for x in range(n)] for x in range(n)] \r\n    dp[0][0] = cost[0][0]\r\n    for i in range(1, n)\r\n        dp[i][0] = dp[i-1][0] + cost[i][0]\r\n    for j in range(1, n)\r\n        dp[0][j] = dp[0][j-1] + cost[0][j]\r\n    for i in range(1, n):\r\n        for j in range(1, n):\r\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\r\n    return dp[n-1][n-1] / (n * n)\r\n\r\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 721,
    "precondition": "cost is a 2D list of integers representing a square matrix, where N = len(cost) = len(cost[0])"
  },
  "722": {
    "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
    "code": "def filter_data(students, student_height, student_weight):\r\n    result = dict()\r\n    for k, v in students.items():\r\n        if v[0] >= student_height and v[1] >= student_weight:\r\n            result[k] = v\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 722,
    "precondition": "students is a dictionary with string keys and tuple values, student\\_height and student\\_weight are float values."
  },
  "723": {
    "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
    "code": "def count_same_pair(lst1, lst2):\r\n  count = 0\r\n  for i in range(len(lst1):\r\n    if lst1[i] == lst2[i\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\r\n      count += 1\r\n  return count\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 723,
    "precondition": "lst1 and lst2 are lists of equal length."
  },
  "724": {
    "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
    "code": "def power_base_sum(base, power):\r\n    sum = 0\r\n    number = base\r\n    for i in range(power-1):\r\n        number = number * base\r\n    while number > 0:\r\n        sum = sum + (number % 10)\r\n        number = number // 10\r\n    return sum\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 724,
    "precondition": "base is an integer, power is a non-negative integer."
  },
  "725": {
    "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
    "code": "import re\r\ndef extract_quotation(s):\r\n  result = re.findall('\"(.*?)\"', s)\r\n  return result\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 725,
    "precondition": "s is a string."
  },
  "726": {
    "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
    "code": "def multiply_elements(t\\_inp)\r\n  t\\_out = ()\r\n  for i in range(len(t\\_inp) - 1):\r\n    t\\_out += (t\\_inp[i] * t\\_inp[i + 1],)\r\n  return t\\_out\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 726,
    "precondition": "t\\_inp is a tuple of numbers."
  },
  "728": {
    "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
    "code": "def sum_list(list1, list2):\r\n  res = [list1[i]+list2[i] for i in range(len(list1))\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 728,
    "precondition": "list1 and list2 are lists of numbers with the same length."
  },
  "730": {
    "specification": "Write a function to remove consecutive duplicates of a given list.",
    "code": "def consecutive_duplicates(lst):\r\n    res = []\r\n    for i in lst:\r\n        if res == [] or res[-1] != i:\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 730,
    "precondition": "lst is a list."
  },
  "731": {
    "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
    "code": "import math\r\ndef lateralsurface_cone(r, h):\r\n    return math.pi * r * math.sqrt(h**2 + r**2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 731,
    "precondition": "r and h are positive real numbers."
  },
  "732": {
    "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "code": "import re\ndef replace_specialchar(string:\r\n    return re.sub('[,.\\s]',':',string)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 732,
    "precondition": "string is a string."
  },
  "733": {
    "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "code": "def find_first_occurrence(arr, key):\r\n    if len(arr) == 0:\r\n        return -1\r\n    elif len(arr) == 1:\r\n        if arr[0] == key:\r\n            return 0\r\n        else:\r\n            return -1\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = low + (high - low) // 2\r\n        if arr[mid] == key:\r\n            if mid == 0 or arr[mid-1] < key:\r\n                return mid\r\n            else;\r\n                high = mid - 1\r\n        elif arr[mid] < key:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return -1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 733,
    "precondition": "arr is a sorted list of integers, and key is an integer."
  },
  "734": {
    "specification": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
    "code": "def sum_Of_Subarray_Prod(arr*\r\n    mod = 1000000007\r\n    res = 0\r\n    for i in range(len(arr):\r\n        prod = 1\r\n        for j in range(i,len(arr):\r\n            prod = (prod * arr[j]) % mod\r\n            res = (res + prod) % mod\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 734,
    "precondition": "arr is a list of integers."
  },
  "735": {
    "specification": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
    "code": "def toggle_middle_bits(n):\r\n    n = n & ~1\r\n    n = n & ~(n >> 1 & 1\r\n    n = n << 1\r\n    return n | 1\r\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 735,
    "precondition": "n is an integer."
  },
  "736": {
    "specification": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
    "code": "def left_insertion(arr, target):\r\n    left = 0\r\n    right = len(arr)\r\n    mid = 0\r\n    while left < right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] < target:\r\n            left = mid + 1\r\n        else:\r\n            right = mid\r\n    return left\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 736,
    "precondition": "arr is a sorted list of integers, and target is an integer."
  },
  "737": {
    "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "code": "import re\r\ndef check_str(str1):\r\n    if re.search(r'^[aeiouAEIOU]', str1):\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 737,
    "precondition": "str1 is a string."
  },
  "738": {
    "specification": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
    "code": "import math\r\ndef geometric_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return geometric_sum(n-1) * 2/n\r\n    end\r\n \r\nprint(geometric_sum(7))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 738,
    "precondition": "n is a positive integer."
  },
  "739": {
    "specification": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
    "code": "import math\r\ndef is_n_digits(n,\r\n    num\r\n):\r\n    if len(str(num)) == n:\r\n        return True\r\n    return False\r\ndef find_Index(n):\r\n    count = 0\r\n    while True:\r\n        if is_n_digits(n,\r\n            int(count * (count + 1) / 2):\r\n        ):\r\n            return count\r\n        count += 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 739,
    "precondition": "n is a positive integer."
  },
  "740": {
    "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
    "code": "def tuple_to_dict(tpl)\r\n    if len(tpl) % 2 != 0:\r\n        raise Exception(\"Tuple must contain even number of elements\")\r\n    result = {tpl[i]: tpl[i+1] for i in range(0, len(tpl), 2)}\r\n    return result\r\n\r\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\r\nassert tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 3: 4, 5: None}\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 740,
    "precondition": "tpl is a tuple with an even number of elements."
  },
  "741": {
    "specification": "Write a python function to check whether all the characters are same or not.",
    "code": "def all_Characters_Same(str1):\r\n    if len(str1) > 1:\r\n        if str1.count(str1[0]) == len(str1):\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 741,
    "precondition": "str1 is a string."
  },
  "742": {
    "specification": "Write a function to caluclate the area of a tetrahedron.",
    "code": "import math\r\ndef area_tetrahedron(a):\r\n    s = (a[0] + a[1] + a[2]) / 2\r\n    area = math.sqrt(s*(s-a[0])*(s-a[1])*(s-a[2]))\r\n    return area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 742,
    "precondition": "a is a list of three positive numbers representing the lengths of the tetrahedron's edges."
  },
  "743": {
    "specification": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
    "code": "def rotate_right(arr,n):\r\n    return arr[-n:] + arr[:-n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 743,
    "precondition": "arr is a list and n is an integer such that 0 <= n <= len(arr)."
  },
  "744": {
    "specification": "Write a function to check if the given tuple has any none value or not.",
    "code": "def check_none(tup)\r\n    for i in tup:\r\n        if i is None:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 744,
    "precondition": "tup is a tuple."
  },
  "745": {
    "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
    "code": "def is\\_divisible\\_by\\_digits(startnum, endnum):\r\n    res = []\r\n    for i in range(startnum, endnum+1):\r\n        flag = True\r\n        for j in str(i):\r\n            if int(j) != 0 and i % int(j) != 0:\r\n                flag = False\r\n                break\r\n        if flag == True:\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 745,
    "precondition": "startnum and endnum are integers such that startnum <= endnum."
  },
  "746": {
    "specification": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
    "code": "import math\r\ndef sector_area(r, angle):\r\n    if angle > 360:\r\n        return None\r\n    else:\r\n        return (angle / 360) * math.pi * (r ** 2)\r\nprint(sector_area(4,45))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 746,
    "precondition": "r is a positive number and angle is a number."
  },
  "747": {
    "specification": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
    "code": "def lcs_of_three(s1, s2, s3):\r\n  dp = [[[0 for x in range(len(s3)+1)] for y in range(len(s2)+1)] for z in range(len(s1)+1)]\r\n  for i in range(1, len(s1)+1):\r\n    for j in range(1, len(s2)+1):\r\n      for k in range(1, len(s3)+1):\r\n        if s1[i-1] == s2[j-1] and s2[j-1] == s3[k-1];\r\n          dp[i][j][k] = dp[i-1][j-1][k-1] + 1\r\n        else{\r\n          dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\r\n  return dp[-1][-1][-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 747,
    "precondition": "s1, s2, and s3 are strings of equal length."
  },
  "748": {
    "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
    "code": "def capital_words_spaces(str1):\r\n    res = \"\"\r\n    for i in range(len(str1)):\r\n        if i == 0 and str1[i].isupper():\r\n            res += str1[i]\r\n        elif str1[i].isupper() and str1[i-1] == \" \":\r\n            res += \" \" + str1[i]\r\n        elif str1[i].isupper:\r\n            res += \" \" + str1[i]\r\n        else:\r\n            res += str1[i]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 748,
    "precondition": "str1 is a string."
  },
  "749": {
    "specification": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
    "code": "def sort_numeric_strings(num\\_strs):\r\n    return sorted(num_strs, key = lambda x: int(x))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 749,
    "precondition": "num\\_strs is a list of strings representing numbers."
  },
  "750": {
    "specification": "Write a function to add the given tuple to the given list.",
    "code": "def add_tuple(lst, tup):\r\n  lst.append(tup)\r\n  return lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 750,
    "precondition": "lst is a mutable list and tup is a tuple."
  },
  "751": {
    "specification": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
    "code": "def check_min_heap(arr):\r\n    if len(arr) <= 1:\r\n        return True\r\n    for i in range(1, int(len(arr)/2) + 1):\r\n        if 2*i <= len(arr)-1:\r\n            if arr[i] > arr[2*i]:\r\n                return False\r\n            if 2*i+1 <= len(arr)-1:\r\n                if arr[i] > arr[2*i+1]:\r\n                    return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 751,
    "precondition": "arr is a list of integers."
  },
  "752": {
    "specification": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
    "code": "def jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return jacobsthal_num(n-2) + 2*jacobsthal_num(n-1)\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 752,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "753": {
    "specification": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
    "code": "def min_k(tuplist, k):\r\n    return sorted(tuplist, key=lambda x:x[1])[:k]\r\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 753,
    "precondition": "tuplist is a list of tuples, k is an integer such that 0 < k <= len(tuplist)."
  },
  "754": {
    "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
    "code": "def extract_index_list(l1, l2, l3):\r\n    res = []\n    if len(l1) == len(l2) == len(l3):\r\n        for i in range(len(l1));\r\n            if l1[i] == l2[i] == l3[i];\r\n                res.append(l1[i])\n    return res\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 754,
    "precondition": "l1, l2, and l3 are lists of the same length."
  },
  "755": {
    "specification": "Write a function to find the second smallest number in a list.",
    "code": "def second_smallest(lst):\r\n    unique = set(lst)\r\n    if len(unique) < 2:\r\n        return \"Not enough numbers\"\r\n    else:\r\n        sorted\\_unique = sorted(unique)\r\n        return sorted\\_unique[1]\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 755,
    "precondition": "lst is a list of integers, and len(lst) > 1."
  },
  "756": {
    "specification": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
    "code": "import re\r\ndef text_match_zero_one(text):\r\n    match = re.search('a(b*)', text)\r\n    if match:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 6,
    "passed_tests": 4,
    "test_result": 0.6666666666666666,
    "task_id": 756,
    "precondition": "text is a string."
  },
  "757": {
    "specification": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
    "code": "def count_reverse_pairs(str\\_list):\r\n\tstr\\_dict = {}\\\n\tcount = 0\r\n\tfor i in str\\_list:\r\n\t\tstr\\_dict[i] = 1\r\n\t\tif i[::-1] in str\\_dict:\r\n\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 757,
    "precondition": "str\\_list is a list of strings."
  },
  "758": {
    "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
    "code": "def unique_sublists(nested\\_list):\r\n    res = dict()\r\n    for i in nested\\_list:\r\n        t = tuple(i)\r\n        if t in res:\r\n            res[t] += 1\r\n        else:\r\n            res[t] = 1\r\n    return res\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 758,
    "precondition": "nested\\_list is a list."
  },
  "759": {
    "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
    "code": "import re\r\ndef is_decimal(number):\r\n  pattern = r'^\\d+.\\d{2}$'\r\n  if re.match(pattern, number):\r\n    return True\r\n  else:\r\n    return False\n",
    "total_tests": 5,
    "passed_tests": 5,
    "test_result": 1.0,
    "task_id": 759,
    "precondition": "number is a string."
  },
  "760": {
    "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
    "code": "def unique_Element(numbers:\r\n    unique = set(numbers)\r\n    if len(unique) == 1:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 760,
    "precondition": "numbers is a list of numbers."
  },
  "762": {
    "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
    "code": "def check_monthnumber_number(month:\r\n    if month in [4, 6, 9, 11]:\r\n        return True\r\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 762,
    "precondition": "month is an integer such that 1 <= month <= 12."
  },
  "763": {
    "specification": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
    "code": "def find_min_diff(arr,n):\r\n    arr.sort()\r\n    min_diff = float('inf')\r\n    for i in range(n-1):\r\n        min_diff = min(min_diff, abs(arr[i+1] - arr[i]))\r\n    return min_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 763,
    "precondition": "arr is a list of integers, and n is the length of arr such that n > 1."
  },
  "764": {
    "specification": "Write a python function to count number of digits in a given string.",
    "code": "def number_ctr(string):\r\n    return sum(1 for char in string if char.isdigit())\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 764,
    "precondition": "string is a string."
  },
  "765": {
    "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
    "code": "import math\r\ndef is_prime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n == 2:\r\n        return True\r\n    if n % 2 == 0:\r\n        return False\r\n    sq = math.isqrt(n)\r\n    for i in range(3, sq + 1, 2):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef is_polite(n):\r\n    count = 0\r\n    prime\\_numbers = []\r\n    i = 2\r\n    while True:\r\n        if is_prime(i):\r\n            prime\\_numbers.append(i)\r\n        i += 1\r\n        if len(prime\\_numbers) > 1000:\r\n            break\r\n\r\n    for i in range(len(prime\\_numbers\r\n\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 765,
    "precondition": "n is a non-negative integer."
  },
  "766": {
    "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
    "code": "def pair_wise(lst*\r\n  res = []\r\n  for i in range(len(lst)-1):\r\n    if lst[i] == lst[i+1]]:\r\n      res.append((lst[i], lst[i+1]))\r\n    else:\r\n      res.append((lst[i], lst[i+1]))\r\n  return res\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 766,
    "precondition": "lst is a list."
  },
  "767": {
    "specification": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
    "code": "def get_pairs_count(numbers, sum:\r\n    count = 0\r\n    for i in range(len(numbers):\r\n        for j in range(i+1, len(numbers));\r\n            if numbers[i] + numbers[j] == sum:\r\n                count += 1\r\n    return count\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 767,
    "precondition": "numbers is a list of integers and sum is an integer."
  },
  "769": {
    "specification": "Write a python function to get the difference between two lists.",
    "code": "def Diff(list1, list2):\r\n    result = [x for x in list1 + list2 if x not in list2 if x not in list1]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 769,
    "precondition": "list1 and list2 are lists."
  },
  "770": {
    "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "code": "def odd_num_sum(n):\r\n\tsum = 0\r\n\tfor i in range(1, n*2 + 1, 2):\r\n\t\tsum += i**4\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 770,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "771": {
    "specification": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
    "code": "def check_expression(exp)\r\n{\r\n    stack = []\r\n    mapping = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\"\r\n    for char in exp:\r\n        if char in mapping:\r\n            stack.append(mapping[char])\r\n        elif len(stack) > 0 and stack.pop() != char:\r\n            return False\r\n    return len(stack) == 0\r\n\r\nassert check_expression(\"{()}[{}]\") == True\r\nassert check_expression(\"[(])\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 771,
    "precondition": "exp is a string"
  },
  "772": {
    "specification": "Write a function to remove all the words with k length in the given string.",
    "code": "def remove_length(sentence, k):\r\n    words = sentence.split()\r\n    res = []\r\n    for word in words:\r\n        if len(word) != k:\r\n            res.append(word)\r\n    return ' '.join(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 772,
    "precondition": "sentence is a string and k is an integer."
  },
  "773": {
    "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
    "code": "def occurance_substring(string, substring):\r\n    if substring in string:\r\n        index = string.index(substring)\r\n        return (substring, index, string.index(substring, index + 1))\r\n    else:\r\n        return None\n",
    "total_tests": 4,
    "passed_tests": 1,
    "test_result": 0.25,
    "task_id": 773,
    "precondition": "string and substring are both strings."
  },
  "775": {
    "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "code": "def odd_position(numbers):\r\n    result = True\r\n    for i in range(1,len(numbers),2):\r\n        if numbers[i] % 2 == 0:\r\n            result = False\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 775,
    "precondition": "numbers is a list of integers."
  },
  "776": {
    "specification": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "code": "def count_vowels(s):\r\n    vowels = set('aeiouAEIOU')\r\n    count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i] in vowels and s[i+1] in vowels:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 776,
    "precondition": "s is a string."
  },
  "777": {
    "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
    "code": "def find_sum(lst):\r\n    res = []\r\n    for i in lst:\r\n        if lst.count(i) == 1:\r\n            res.append(i)\r\n    return sum(res)\r\nprint(find_sum([1,2,3,1,1,4,5,6]))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 777,
    "precondition": "lst is a list of integers."
  },
  "778": {
    "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "code": "def pack_consecutive_duplicates(numbers):\r\n\tif not numbers:\r\n\t\treturn []\r\n\tpack = [numbers[0]]\r\n\tfor i in range(1, len(numbers));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 778,
    "precondition": "numbers is a list of elements."
  },
  "779": {
    "specification": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
    "code": "def unique_sublists(input_list:\r\n\r\n  unique_dict = dict()\r\n  for i in input_list:\r\n    tup = tuple(i)\r\n    if tup not in unique_dict:\r\n      unique_dict[tup] = 1\r\n    else:\r\n      unique_dict[tup] += 1\r\n\r\n  return unique_dict\r\n\r\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 779,
    "precondition": "input\\_list is a list of lists."
  },
  "780": {
    "specification": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
    "code": "def find_combinations(tuples)\r\n    result = []\r\n    for t in tuples:\r\n        for i in range(len(result))\r\n            for j in range(i, len(result))\r\n                temp = (result[i][0] + t[0], result[j][1] + t[1])\r\n                result.append(temp)\r\n            result.append((t[0], t[1]))\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 780,
    "precondition": "tuples is a list of tuples where each tuple is of length 2 and contains integers."
  },
  "781": {
    "specification": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
    "code": "def count_divisors(n):\r\n    count = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            count += 1\r\n    if count % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 781,
    "precondition": "n is a positive integer."
  },
  "782": {
    "specification": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
    "code": "def odd_length_sum(arr):\r\n    n = len(arr)\r\n    sum = 0\r\n    for i in range(n)\r\n        for j in range(i, n\r\n            if (j - i + 1) % 2 != 0):\r\n                sum += sum_of_subarray(arr, i, j)\r\n    return sum\n\ndef sum_of_subarray(arr, left, right):\r\n    sum = 0\r\n    for i in range(left, right + 1):\r\n        sum += arr[i]\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 782,
    "precondition": "arr is a list of numbers."
  },
  "783": {
    "specification": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
    "code": "def rgb_to_hsv(r, g, b:\r\n\tmaxi = max(r, g, b)\r\n\tmini = min(r, g, b)\r\n\tdiff = maxi - mini\r\n\tif maxi == 0:\r\n\t\th = 0\r\n\telif maxi == r:\r\n\t\th = (60 * ((g - b) / diff)) % 360\r\n\telif maxi == g:\r\n\t\th = (60 * ((b - r) / diff)) + 120\r\n\telif maxi == b:\r\n\t\th = (60 * ((r - g) / diff)) + 240\r\n\tif maxi == 0:\r\n\t\ts = 0\r\n\telse:\r\n\t\ts = (100 * (diff / maxi))\r\n\tv = (100 * maxi)\r\n\treturn (h, s, v)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 783,
    "precondition": "r, g, and b are integers such that 0 <= r, g, b <= 255."
  },
  "784": {
    "specification": "Write a function to find the product of first even and odd number of a given list.",
    "code": "def mul_even_odd(numbers):\r\n    even = odd = 1\r\n    for num in numbers:\r\n        if num % 2 == 0:\r\n            even *= num\r\n            break\r\n        else:\r\n            odd *= num\r\n    for num in numbers:\r\n        if num % 2 == 0:\r\n            if num != even:\r\n                even *= num\r\n        else:\r\n            odd *= num\r\n    return even if even < odd else odd\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 784,
    "precondition": "numbers is a list of integers."
  },
  "785": {
    "specification": "Write a function to convert tuple string to integer tuple.",
    "code": "import ast\r\ndef tuple_str_int(tup\\_str):\r\n    tup = ast.literal\\_eval(tup\\_str)\r\n    tup\\_int = tuple(map(int, tup))\r\n    return tup\\_int\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 785,
    "precondition": "tup\\_str is a string representing a tuple of numbers."
  },
  "786": {
    "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "code": "def right_insertion(arr, x):\r\n    n = len(arr)\r\n    for i in range(n):\r\n        if x > arr[i]\r\n            continue\r\n        else:\r\n            return i\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 786,
    "precondition": "arr is a list of comparable elements, x is a comparable element."
  },
  "787": {
    "specification": "Write a function that matches a string that has an a followed by three 'b'.",
    "code": "import re\r\ndef text_match_three(text):\r\n    return bool(re.search(r'abbb', text))\r\n\r\nassert not text_match_three(\"ac\")\r\nassert text_match_three(\"abbb\")\r\nassert not text_match_three(\"aabbc\")\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 787,
    "precondition": "text is a string."
  },
  "788": {
    "specification": "Write a function to create a new tuple from the given string and list.",
    "code": "def new_tuple(lst, str1):\r\n  return tuple(lst + [str1])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 788,
    "precondition": "lst is a list and str1 is a string."
  },
  "790": {
    "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
    "code": "def even_position(lst):\r\n    for i in range(len(lst)):\r\n        if i % 2 == 0:\r\n            if lst[i] % 2 != 0:\r\n                return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 790,
    "precondition": "lst is a list."
  },
  "791": {
    "specification": "Write a function to remove tuples from the given tuple.",
    "code": "def remove_nested(tup)\r\n    res = []\r\n    for i in tup:\r\n        if type(i) != tuple:\r\n            res.append(i)\r\n    return tuple(res)\r\n\r\ntest = (1, 5, 7, (4, 6), 10)\r\nassert remove_nested(test) == (1, 5, 7, 10)\r\n\r\nprint(\"Test Passed\")\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 791,
    "precondition": "tup is a tuple."
  },
  "792": {
    "specification": "Write a python function to count the number of lists in a given number of lists.",
    "code": "def count_list(list\\_of\\_lists):\r\n    return len(list_of_lists)\r\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 792,
    "precondition": "list\\_of\\_lists is a list."
  },
  "793": {
    "specification": "Write a python function to find the last position of an element in a sorted array.",
    "code": "def last(arr, x):\r\n    if x not in arr:\r\n        return -1 \r\n    else:\r\n        return arr.index(x, arr.index(x)+1)\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 793,
    "precondition": "arr is a sorted list of elements and x is an element that is present in arr."
  },
  "794": {
    "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "code": "import re\r\ndef text_starta_endb(s):\r\n    match = re.search(r'a.*b', s)\r\n    if match:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 794,
    "precondition": "s is a string."
  },
  "796": {
    "specification": "Write function to find the sum of all items in the given dictionary.",
    "code": "def return_sum(dic):\r\n    sum = 0\r\n    for value in dic.values()\r\n        sum += value\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 796,
    "precondition": "dic is a dictionary with numerical values."
  },
  "797": {
    "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "code": "def sum_in_range(l, r):\r\n    sum = 0\r\n    for i in range(l, r+1):\r\n        if i % 2 != 0:\r\n            sum += i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 797,
    "precondition": "l and r are integers such that l <= r."
  },
  "798": {
    "specification": "Write a python function to find the sum of an array.",
    "code": "def _sum(arr)\r\n  return sum(arr)\r\nassert _sum([1, 2, 3]) == 6\r\nprint(\"Test case passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 798,
    "precondition": "arr is a list of numbers."
  },
  "799": {
    "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
    "code": "def left_rotate(n, d):\r\n    return ((n << d) & 0xFFFFFFFF) | (n >> (32 - d))\n",
    "total_tests": 7,
    "passed_tests": 7,
    "test_result": 1.0,
    "task_id": 799,
    "precondition": "n is an integer and d is an integer such that 0 <= d <= 32."
  },
  "800": {
    "specification": "Write a function to remove all whitespaces from a string.",
    "code": "def remove_all_spaces(s):\r\n    result = ''\r\n    for char in s:\r\n        if char != ' '\\\n            result += char\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 800,
    "precondition": "s is a string."
  },
  "801": {
    "specification": "Write a python function to count the number of equal numbers from three given integers.",
    "code": "def test_three_equal(a, b, c):\r\n    return len([a, b, c].count(a))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 801,
    "precondition": "a, b, and c are integers."
  },
  "802": {
    "specification": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
    "code": "def count_rotation(arr):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low < high:\r\n        mid = low + (high - low) // 2\r\n        if arr[mid] > arr[high\u0440\u043e\u0432\u0438\u0447\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n    return len(arr) - low\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 802,
    "precondition": "arr is a list of integers."
  },
  "803": {
    "specification": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
    "code": "import math\r\ndef is_perfect_square(n):\r\n    sqrt = math.sqrt(n)\r\n    return (sqrt*sqrt == n)\r\nassert not is_perfect_square(10)\r\nprint(\"Test passed\")\r\n",
    "total_tests": 6,
    "passed_tests": 5,
    "test_result": 0.8333333333333334,
    "task_id": 803,
    "precondition": "n is a non-negative integer."
  },
  "804": {
    "specification": "Write a function to check whether the product of numbers in a list is even or not.",
    "code": "def is_product_even(lst):\r\n    if reduce(lambda x, y: x * y, lst, 1) % 2 == 0:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 804,
    "precondition": "lst is a list of numbers."
  },
  "805": {
    "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
    "code": "def max_sum_list(lists):\r\n    max_sum = 0\r\n    max_list = []\r\n    for i in lists:\r\n        if sum(i) > max_sum:\r\n            max_sum = sum(i)\r\n            max_list = i\r\n    return max_list\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 805,
    "precondition": "lists is a list of lists of numbers."
  },
  "806": {
    "specification": "Write a function to find maximum run of uppercase characters in the given string.",
    "code": "def max_run_uppercase(s):\r\n    return max(len(list(group)) for key, group in groupby(s, str.isupper) if key)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 806,
    "precondition": "s is a string."
  },
  "807": {
    "specification": "Write a python function to find the first odd number in a given list of numbers.",
    "code": "def first_odd(numbers):\r\n    for num in numbers:\r\n        if num % 2 != 0:\r\n            return num\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 807,
    "precondition": "numbers is a list of integers."
  },
  "808": {
    "specification": "Write a function to check if the given tuples contain the k or not.",
    "code": "def check_K(tup, k):\r\n    for i in tup:\r\n        if i == k:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 808,
    "precondition": "tup is a tuple and k is a comparison value."
  },
  "809": {
    "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
    "code": "def check_smaller(tup1, tup2):\r\n    result = all(x < y for x, y in zip(tup1, tup2))\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 809,
    "precondition": "tup1 and tup2 are tuples of the same length."
  }
}