{
  "2": {
    "specification": "Write a function to find the shared elements from the given two lists.",
    "code": "def similar_elements(test_list1, test_list2)\r\n    res = set(test_list1) & set(test_list2)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 2,
    "precondition": "test\\_list1 and test\\_list2 are lists."
  },
  "3": {
    "specification": "Write a python function to identify non-prime numbers.",
    "code": "import math\r\ndef is_not_prime(n):\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            return True\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 3,
    "precondition": "n is a positive integer (i.e., n > 0)."
  },
  "4": {
    "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
    "code": "import heapq\r\ndef heap_queue_largest(numbers, n):\r\n    max_heap = heapq.nlargest(n, numbers)\r\n    return max_heap\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 4,
    "precondition": "numbers is a list of integers, and n is a positive integer such that n <= len(numbers)."
  },
  "6": {
    "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "code": "def differ_At_One_Bit_Pos(n1, n2):\r\n    return (n1 ^ n2) & (n1 | n2)\n",
    "total_tests": 6,
    "passed_tests": 1,
    "test_result": 0.16666666666666666,
    "task_id": 6,
    "precondition": "n1 and n2 are integers."
  },
  "7": {
    "specification": "Write a function to find all words which are at least 4 characters long in a string.",
    "code": "def find_char_long(string):\r\n    result = set()\r\n    for word in string.split():\r\n        if len(word) >= 4:\r\n            result.add(word)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 7,
    "precondition": "string is a string."
  },
  "8": {
    "specification": "Write a function to find squares of individual elements in a list.",
    "code": "def square_nums(num\\_list*\r\n    return [i\\*\\*2 for i in num\\_list]\r\n\r\nassert square\\_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 8,
    "precondition": "num\\_list is a list of integers."
  },
  "9": {
    "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
    "code": "def find_Rotations(inputStr:\r\n    length = len(inputStr)\r\n    if length == 0:\r\n        return 0\r\n    elif length == 1:\r\n        return 1\r\n    elif length == 2:\r\n        if inputStr[0] == inputStr[1]\r\n            return 1\r\n        else:\r\n            return 2\r\n    else:\r\n        for i in range(1, length):\r\n            if (inputStr[i:] + inputStr[:i]) == inputStr:\r\n                return i\r\n        return length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 9,
    "precondition": "inputStr is a non-empty string."
  },
  "11": {
    "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
    "code": "def remove_Occ(str1, char):\r\n    if str1.count(char) > 1:\r\n        f = str1.find(char)\r\n        l = str1.rfind(char)\r\n        str1 = str1.replace(str1[f], \"\")\r\n        str1 = str1.replace(str1[l], \"\")\r\n    return str1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 11,
    "precondition": "str1 is a string and char is a character."
  },
  "12": {
    "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "code": "def sort_matrix(matrix):\r\n    return sorted(matrix, key=sum)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 12,
    "precondition": "matrix is a list of lists of numbers."
  },
  "14": {
    "specification": "Write a python function to find the volume of a triangular prism.",
    "code": "def find_Volume(a, b, c):\r\n    s = (a + b + c) / 2\r\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\r\n    return area * c\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 14,
    "precondition": "a, b, and c are positive real numbers such that a, b, and c are the lengths of the sides of a triangle."
  },
  "16": {
    "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
    "code": "import re\ndef text_lowercase_underscore(text):\n    if re.search('[A-Z]', text) or re.search('[0-9]', text):\n        return False\n    elif re.search('__', text) or not re.search('_', text):\n        return False\n    else:\n        return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 16,
    "precondition": "text is a string."
  },
  "17": {
    "specification": "Write a function that returns the perimeter of a square given its side length as input.",
    "code": "def square_perimeter(side\\_length):\r\n    perimeter = 4 * side\\_length\r\n    return perimeter\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 17,
    "precondition": "side\\_length is a positive real number."
  },
  "18": {
    "specification": "Write a function to remove characters from the first string which are present in the second string.",
    "code": "def remove_dirty_chars(input_str1, input_str2):\r\n    for i in input_str2:\r\n        input_str1 = input_str1.replace(i, \"\")\r\n    return input_str1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 18,
    "precondition": "input\\_str1 and input\\_str2 are strings."
  },
  "19": {
    "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
    "code": "def test_duplicate(input\\_list):\r\n    if len(input\\_list) != len(set(input\\_list):\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 19,
    "precondition": "input\\_list is a list of integers."
  },
  "20": {
    "specification": "Write a function to check if the given number is woodball or not.",
    "code": "def is\\_woodall(n):\r\n    result = False\r\n    for i in range(1, n)\r\n        if n \\* 2 ** i - 1 == math.factorial(i):\r\n            result = True\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 20,
    "precondition": "n is a positive integer."
  },
  "56": {
    "specification": "Write a python function to check if a given number is one less than twice its reverse.",
    "code": "def check(n):\r\n    if n < 10:\r\n        return False\r\n    rev = int(str(n)[::-1])\\\n    if (n - 1) == 2 * rev:\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 56,
    "precondition": "n is an integer."
  },
  "57": {
    "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
    "code": "def find_Max_Num(lst):\r\n    return int(\"\".join(sorted(str(x) for x in lst)[::-1]))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 57,
    "precondition": "lst is a list of integers."
  },
  "58": {
    "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
    "code": "def opposite_Signs(num1, num2):\r\n\treturn (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0)\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 58,
    "precondition": "num1 and num2 are integers."
  },
  "59": {
    "specification": "Write a function to find the nth octagonal number.",
    "code": "def is_octagonal(n):\r\n    return (n*(3*n-1))//2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 59,
    "precondition": "n is an integer."
  },
  "61": {
    "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
    "code": "def count_Substrings(str1):\r\n  count = 0\r\n  n = len(str1)\r\n  for i in range(n):\r\n    for j in range(i, n):\r\n      sum = 0\r\n      temp = str1[i:j + 1]\r\n      for k in temp:\r\n        sum += int(k)\r\n      if sum == len(temp):\r\n        count += 1\r\n  return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 61,
    "precondition": "str1 is a string of digits."
  },
  "62": {
    "specification": "Write a python function to find smallest number in a list.",
    "code": "def smallest_num(lst):\r\n    return min(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 62,
    "precondition": "lst is a non-empty list of integers."
  },
  "63": {
    "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "code": "def max_difference(diff\\_tup\\_list):\r\n    diff\\_list = [b-a for (a,b) in diff_tup_list]\r\n    return max(diff_list)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 63,
    "precondition": "diff\\_tup\\_list is a list of 2-tuples, where each tuple contains two integers such that the first element of the tuple is less than or equal to the second element."
  },
  "64": {
    "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
    "code": "def subject_marks(list\\_tuples):\r\n    return sorted(list\\_tuples, key=lambda x: x[1])\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 64,
    "precondition": "list\\_tuples is a list of tuples, where each tuple contains at least two elements."
  },
  "65": {
    "specification": "Write a function to flatten a list and sum all of its elements.",
    "code": "def recursive_list_sum(lst):\r\n    sum = 0\r\n    for i in lst:\r\n        if type(i) is list:\r\n            sum += recursive_list_sum(i)\r\n        else:\r\n            sum += i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 65,
    "precondition": "lst is a list that contains integers and/or other lists of integers."
  },
  "66": {
    "specification": "Write a python function to count the number of positive numbers in a list.",
    "code": "def pos_count(lst):\r\n  return sum(1 for x in lst if x > 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 66,
    "precondition": "lst is a list of integers."
  },
  "67": {
    "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
    "code": "def bell_number(n):\r\n    if n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 1\r\n    elif n > 1:\r\n        return sum([bell_number(i) for i in range(0, n)])\r\n\r\ndef bell_number_partitions(n):\r\n    return bell_number(n+1) - 1\r\n\r\nassert bell_number_partitions(2) == 2\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 67,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "68": {
    "specification": "Write a python function to check whether the given array is monotonic or not.",
    "code": "def is_Monotonic(arr*\r\n\tn = len(arr)\r\n\ti = 0\r\n\tis_increasing = True\r\n\tis_decreasing = True\r\n\twhile (i < n-1):\r\n\t\tif (arr[i] > arr[i + 1] and is_increasing == True):\r\n\t\t\tis_increasing = False\r\n\t\telif (arr[i] < arr[i + 1] and is_decreasing == True):\r\n\t\t\tis_decreasing = False\r\n\t\ti = i + 1\r\n\treturn is_increasing or is_decreasing\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 68,
    "precondition": "arr is a list of comparable elements."
  },
  "69": {
    "specification": "Write a function to check whether a list contains the given sublist or not.",
    "code": "def is_sublist(lst, sublst):\r\n    for i in range(len(lst) - len(sublst) + 1):\r\n        if lst[i:i + len(sublst)] == sublst:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 69,
    "precondition": "lst is a list and sublst is a sublist such that all elements in sublst are in lst."
  },
  "70": {
    "specification": "Write a function to find whether all the given tuples have equal length or not.",
    "code": "def get_equal(lst\\_tup):\r\n    return len(set([len(i) for i in lst_tup])) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 70,
    "precondition": "lst\\_tup is a list of tuples."
  },
  "71": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def comb_sort(arr,\r\n\tn = None\r\n):\r\n\tif n == None:\r\n\t\tn = len(arr)\r\n\tgap = n\r\n\tswapped = True\r\n\twhile (gap > 1 or swapped):\r\n\t\tgap = int(gap/1.3)\r\n\t\tif gap < 1:\r\n\t\t\tgap = 1\r\n\t\tswapped = False\r\n\t\ti = 0\r\n\t\twhile (i + gap < n):\r\n\t\t\tif arr[i] > arr[i + gap]:\r\n\t\t\t\tarr[i], arr[i + gap] = arr[i + gap], arr[i]\r\n\t\t\t\tswapped = True\r\n\t\t\ti += 1\r\n\treturn arr\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 71,
    "precondition": "arr is a list of comparable elements."
  },
  "72": {
    "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
    "code": "import math\r\ndef dif_Square(n):\r\n    root = int(math.sqrt(n))\r\n    for i in range(root, 0, -1):\r\n        sq = i*i\r\n        if (n % 2 == 0 and sq == n/2) or (sq - n).is_integer():\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 72,
    "precondition": "n is an integer."
  },
  "74": {
    "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
    "code": "def is_samepatterns(colors, patterns)\r\n    if (len(colors) != len(patterns):\r\n        return False\r\n    for i in range(len(colors):\r\n        if colors.count(colors[i]) != patterns.count(patterns[i\\[\r\n            return False\r\n    return True\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 74,
    "precondition": "colors is a list of characters and patterns is a list of integers, both of the same length."
  },
  "75": {
    "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "code": "def find_tuples(lst, k):\r\n    res = []\r\n    for i in lst:\r\n        if all(j % k == 0 for j in i):\r\n            res.append(i)\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 75,
    "precondition": "lst is a list of tuples, and k is an integer."
  },
  "77": {
    "specification": "Write a python function to find whether a number is divisible by 11.",
    "code": "def is_divisible_by_11(n):\r\n    if n < 0:\r\n        n = -n\r\n    x = 0\r\n    while n != 0:\r\n        x = x * 10 + (n % 10)\r\n        n = n // 10\r\n    return x % 11 == 0\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 77,
    "precondition": "n is an integer."
  },
  "79": {
    "specification": "Write a python function to check whether the length of the word is odd or not.",
    "code": "def word_len(word):\r\n    if len(word) % 2 != 0:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 79,
    "precondition": "word is a string."
  },
  "80": {
    "specification": "Write a function to find the nth tetrahedral number.",
    "code": "def tetrahedral_number(n):\r\n    return n * (n + 1) * (n + 2) // 6\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 80,
    "precondition": "n is an integer."
  },
  "82": {
    "specification": "Write a function to find the volume of a sphere.",
    "code": "import math\r\ndef volume_sphere(radius):\r\n    return 4/3 * math.pi * (radius**3)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 82,
    "precondition": "radius is a positive real number."
  },
  "83": {
    "specification": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
    "code": "def get_Char(astr):\r\n    res = \"\"\r\n    sum = 0\r\n    for c in astr:\r\n        sum += ord(c)\r\n    res = chr(sum % 26 + 97)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 83,
    "precondition": "astr is a string."
  },
  "84": {
    "specification": "Write a function to find the nth number in the newman conway sequence.",
    "code": "def sequence(n):\r\n    s = \"1\"\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        for i in range(n - 1):\r\n            count, curr = 1, s[0]\r\n            s = \"\"\r\n            for j in range(1, len(s))\r\n                if s[j] == curr:\r\n                    count += 1\r\n                else:\r\n                    s += str(count)\r\n                    s += curr\r\n                    count, curr = 1, s[j]\r\n            s += str(count)\r\n            s += curr\r\n        return int(s)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 84,
    "precondition": "n is a positive integer."
  },
  "85": {
    "specification": "Write a function to find the surface area of a sphere.",
    "code": "import math\ndef surfacearea_sphere(r):\r\n    return 4*math.pi*r**2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 85,
    "precondition": "r is a non-negative floating point number representing the radius of the sphere."
  },
  "86": {
    "specification": "Write a function to find nth centered hexagonal number.",
    "code": "def centered_hexagonal_number(n):\r\n    return (n*(2*n-1) + 1)//2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 86,
    "precondition": "n is an integer."
  },
  "87": {
    "specification": "Write a function to merge three dictionaries into a single dictionary.",
    "code": "def merge_dictionaries_three(d1, d2, d3):\r\n    result = {}.fromkeys(d1, None)\r\n    result.update(d2)\r\n    result.update(d3)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 87,
    "precondition": "d1, d2, and d3 are dictionaries."
  },
  "88": {
    "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
    "code": "def freq_count(lst):\r\n    freq = {}\r\n    for i in lst:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    return freq\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 88,
    "precondition": "lst is a list of hashable elements."
  },
  "89": {
    "specification": "Write a function to find the closest smaller number than n.",
    "code": "def closest_num(n)\r\n\treturn n-1 if n%2==0 else n-2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 89,
    "precondition": "n is an integer."
  },
  "90": {
    "specification": "Write a python function to find the length of the longest word.",
    "code": "def len_long(words\r\n    ):\r\n    max\\_length = 0\r\n    for word in words:\r\n        if len(word) > max\\_length:\r\n            max\\_length = len(word)\r\n    return max\\_length\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 90,
    "precondition": "words is a list of strings."
  },
  "91": {
    "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
    "code": "def find_substring(lst, substring):\r\n    for i in lst:\r\n        if substring in i:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 91,
    "precondition": "lst is a list of strings, and substring is a string."
  },
  "92": {
    "specification": "Write a function to check whether the given number is undulating or not.",
    "code": "def is_undulating(n):\r\n    n = str(n)\r\n    for i in range(1,len(n))\r\n        if n[i] != n[i-1]\r\n            if i < len(n) - 1:\r\n                if n[i] == n[i+1]\r\n                    return False \r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 92,
    "precondition": "n is an integer."
  },
  "93": {
    "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
    "code": "def power(a, b):\r\n    return a**b\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 93,
    "precondition": "a and b are integers."
  },
  "94": {
    "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
    "code": "def index_minimum(tup\\_list):\r\n    return min(tup\\_list, key=lambda x: x[1])[0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 94,
    "precondition": "tup\\_list is a non-empty list of 2-tuples where the second value of each tuple is comparable using the < operator."
  },
  "95": {
    "specification": "Write a python function to find the length of the smallest list in a list of lists.",
    "code": "def Find_Min_Length(lst\\_of\\_lists):\r\n    return min([len(i) for i in lst_of_lists])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 95,
    "precondition": "lst\\_of\\_lists is a list of lists."
  },
  "96": {
    "specification": "Write a python function to find the number of divisors of a given integer.",
    "code": "import math\r\ndef divisor(n):\r\n    count = 0\r\n    for i in range(1,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            if i == (n // i):\r\n                count += 1\r\n            else:\r\n                count += 2\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 96,
    "precondition": "n is an integer."
  },
  "97": {
    "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
    "code": "def flatten_list(nested\\_list):\r\n    flat\\_list = []\r\n    for sublist in nested\\_list:\r\n        for item in sublist:\r\n            flat\\_list.append(item)\r\n    return flat\\_list\r\n\r\ndef frequency_lists(list\\_of\\_lists):\r\n    flattened\\_list = flatten\\_list(list\\_of\\_lists)\r\n    freq = {}\r\n    for item in flattened\\_list:\r\n        if item not in freq:\r\n            freq[item] = 1\r\n        else:\r\n            freq[item] += 1\r\n    return freq\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 97,
    "precondition": "list\\_of\\_lists is a list of lists of hashable elements."
  },
  "98": {
    "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "code": "import math\ndef multiply_num(num_list):\r\n  mul = 1\r\n  for i in num_list:\r\n    mul *= i\r\n  return mul/len(num_list)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 98,
    "precondition": "num\\_list is a list of non-zero numbers."
  },
  "99": {
    "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
    "code": "def decimal_to_binary(n):\r\n    return bin(n).replace(\"0b\", \"\")\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 99,
    "precondition": "n is an integer."
  },
  "100": {
    "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
    "code": "def is\\_palindrome(n):\r\n    temp = n\r\n    rev = 0\r\n    while (temp > 0):\r\n        rem = temp % 10\r\n        rev = rev * 10 + rem\r\n        temp = int(temp/10)\r\n    if (n < 0):\r\n        rev = -1 \\* rev\r\n    return n == rev\r\ndef next\\_smallest\\_palindrome(n):\r\n    n = abs(n)\r\n    while (1):\r\n        if (is\\_palindrome(n) == True and n > 0):\r\n            return n\r\n        n = n + 1\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 100,
    "precondition": "n is an integer."
  },
  "101": {
    "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
    "code": "def kth_element(arr, k):\r\n    return sorted(arr)[k-1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 101,
    "precondition": "arr is a list of comparable elements, and k is an integer such that 1 <= k <= len(arr)."
  },
  "102": {
    "specification": "Write a function to convert a snake case string to camel case string.",
    "code": "def snake_to_camel(snake\\_case):\r\n    words = snake\\_case.split('_')\r\n    camel\\_case = words[0] + ''.join(word.title() for word in words[1:));\r\n    return camel\\_case\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 102,
    "precondition": "snake\\_case is a string containing only lowercase letters, underscores (\"\\_\"), and digits."
  },
  "103": {
    "specification": "Write a function to find the Eulerian number a(n, m).",
    "code": "def eulerian_num(n, m):\r\n    if n == 1:\r\n        if m == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n    else:\r\n        if m == 0:\r\n            return 0\r\n        elif m == 1:\r\n            return (n-1)**(n-2)\r\n        else:\r\n            return (m*(n-1) - 1)*eulerian_num(n-1, m-1) + (n + m - 2)*eulerian_num(n-1, m)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 103,
    "precondition": "n and m are non-negative integers such that 0 <= m <= n."
  },
  "104": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(list_of_lists):\r\n    return ([sorted(sublist) for sublist in list_of_lists])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 104,
    "precondition": "list\\_of\\_lists is a list of lists, and each element in the inner lists is a string."
  },
  "105": {
    "specification": "Write a python function to count true booleans in the given list.",
    "code": "def count(lst):\r\n    return sum(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 105,
    "precondition": "lst is a list of booleans."
  },
  "106": {
    "specification": "Write a function to append the given list to the given tuples.",
    "code": "def add_lists(numbers, tup)\r\n\treturn tup + tuple(numbers)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 106,
    "precondition": "numbers is a list and tup is a tuple."
  },
  "108": {
    "specification": "Write a function to merge three lists into a single sorted list.",
    "code": "def merge_sorted_list(*args):\r\n    result = [] Marcatori = []\r\n    for i in args:\r\n        if i:\r\n            if type(i) == list:\r\n                Marks.append(sorted(i))\r\n    while Marks:\r\n        min_element = min(Marks)\r\n        result.append(min_element.pop(0))\r\n        if not min_element:\r\n            Marks.remove(min_element)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 108,
    "precondition": "Each argument in args is a list of comparable elements, or None."
  },
  "109": {
    "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
    "code": "def odd_Equivalent(binary_string,num\\_rotations):\r\n    def count\\_odd\\_bits(num):\r\n        return bin(num).count(\"1\")\r\n    count = 0\r\n    for i in range(num\\_rotations\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\r\n        count += count\\_odd\\_bits(int(binary\\_string, 2))\r\n        binary\\_string = binary\\_string[1:] + binary\\_string[0]\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 109,
    "precondition": "binary\\_string is a string of 0s and 1s, and num\\_rotations is a non-negative integer."
  },
  "111": {
    "specification": "Write a function to find the common elements in given nested lists.",
    "code": "def common_in\\_nested\\_lists(nested\\_list):\n    res = set()\n    for i in nested\\_list:\n        res.update(set(i))\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 111,
    "precondition": "nested\\_list is a list of lists."
  },
  "113": {
    "specification": "Write a function to check if a string represents an integer or not.",
    "code": "import re\ndef check_integer(str_int):\n    if re.search(r'^[+-]?\\d+$', str_int) == None:\n        return False\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 113,
    "precondition": "str\\_int is a string."
  },
  "115": {
    "specification": "Write a function to check whether all dictionaries in a list are empty or not.",
    "code": "def empty_dit(dic): \r\n    return all(not bool(dict) for dict in dic)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 115,
    "precondition": "dic is a list of dictionaries."
  },
  "116": {
    "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
    "code": "def tuple_to_int(tup)\r\n    value = 0\r\n    for i in tup:\r\n        value = (value * 10) + i\r\n    return value\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 116,
    "precondition": "tup is a tuple of positive integers."
  },
  "117": {
    "specification": "Write a function to convert all possible convertible elements in a list of lists to floats.",
    "code": "def list_to_float(input\\_list):\r\n  output\\_list = []\r\n  for i in input\\_list:\r\n    inner\\_list = []\r\n    for j in i:\r\n      try:\r\n        inner\\_list.append(float(j))\r\n      except ValueError:\\\n        inner\\_list.append(j)\r\n    output\\_list.append(inner\\_list)\r\n  return output\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 117,
    "precondition": "input\\_list is a list of lists."
  },
  "118": {
    "specification": "Write a function to convert a string to a list of strings split on the space character.",
    "code": "def string_to_list(s\\_str.\r\n\ts\\_list = s\\_str.split(\" \")\r\n\treturn s\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 118,
    "precondition": "s\\_str is a string."
  },
  "119": {
    "specification": "Write a python function to find the element that appears only once in a sorted array.",
    "code": "def search(arr):\r\n    for i in range(len(arr)-1):\r\n        if arr[i] != arr[i+1]:\r\n            return arr[i+1]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 119,
    "precondition": "arr is a sorted list of integers."
  },
  "120": {
    "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
    "code": "def max_product_tuple(lst):\r\n    max_product = -1\r\n    for tup in lst:\r\n        product = abs(tup[0]*tup[1+\\_\\\n        if product > max\\_product:\r\n            max\\_product = product\r\n    return max\\_product\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 120,
    "precondition": "lst is a list of tuples, and each tuple contains exactly two integers."
  },
  "123": {
    "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "code": "def factors(n):\r\n    factors = []\r\n    for i in range(1, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            factors.append(i)\r\n            if i != n // i:\r\n                factors.append(n // i)\r\n    return factors\r\n\r\ndef amicable_pair(n, m):\r\n    n_factors = set(factors(n))\r\n    m_factors = set(factors(m))\r\n    return len(n_factors & m_factors) == 1 and sum(n_factors - m_factors) == m and sum(m_factors - n_factors) == n\r\n\r\ndef amicable_numbers_sum(n):\r\n    amicable\\_sum = 0\r\n    for i in range(1, n):\r\n        divs = set(factors(i))\r\n        for j in range(i + 1, n):\r\n            if amicable_pair(i, j):\r\n                amicable\\_sum += i + j\r\n    return amicable\\_sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 123,
    "precondition": "n is a positive integer."
  },
  "124": {
    "specification": "Write a function to get the angle of a complex number.",
    "code": "import cmath\r\ndef angle_complex(real, imag*\r\n\tnum = complex(real, imag)\r\n\treturn cmath.phase(num)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 124,
    "precondition": "real and imag are real numbers."
  },
  "125": {
    "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "code": "def find_length(string)\r\n    count0, count1, max_diff, temp_diff = 0, 0, 0, 0\r\n    for i in range(len(string))\r\n        if string[i] == '0'\r\n            count0 += 1\r\n        else:\r\n            count1 += 1\r\n        temp_diff = max(count0, count1)\r\n        max_diff = max(max_diff, temp_diff)\r\n    return max_diff\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 125,
    "precondition": "string is a non-empty string of 0s and 1s."
  },
  "126": {
    "specification": "Write a python function to find the sum of common divisors of two given numbers.",
    "code": "def sum_common_divisors(x, y):\r\n\tcommon_dvsr = [d for d in range(1, min(x, y) + 1) if x % d == 0 and y % d == 0]\r\n\treturn sum(common_dvsr)\r\nassert sum_common_divisors(10,15) == 6\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 126,
    "precondition": "x and y are integers greater than 0."
  },
  "127": {
    "specification": "Write a function to multiply two integers.",
    "code": "def multiply_int(num1, num2):\r\n    return num1 * num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 127,
    "precondition": "num1 and num2 are integers."
  },
  "128": {
    "specification": "Write a function to find words that are longer than n characters from a given list of words.",
    "code": "def long_words(n, words\\_str):\n    words = words\\_str.split(\" \")\n    res = []\n    for word in words:\n        if len(word) > n:\n            res.append(word)\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 128,
    "precondition": "n is an integer, and words\\_str is a string containing only words separated by spaces."
  },
  "129": {
    "specification": "Write a function to calculate whether the matrix is a magic square.",
    "code": "def magic_square_test(matrix):\n    if len(matrix) != len(matrix[0]):\n        return False\n    n = len(matrix)\n    sum_of_row = sum(matrix[0])\n    sum_of_col = sum([row[0] for row in matrix])\n    for row in matrix:\n        if sum(row) != sum_of_row or sum(row) != sum_of_col:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != sum_of_col:\n            return False\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != sum_of_row - n + 1:\n                return False\n            elif i + j == n - 1 and matrix[i][j] != sum_of_row - n + 1:\n                return False\n    return True\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 129,
    "precondition": "matrix is a list of lists of integers with the same length."
  },
  "130": {
    "specification": "Write a function to find the item with maximum frequency in a given list.",
    "code": "def max_occurrences(lst):\r\n    max_count = 0\r\n    max_item = None\r\n    for item in lst:\r\n        curr_count = lst.count(item)\r\n        if curr_count > max_count:\r\n            max_count = curr_count\r\n            max_item = item\r\n    return max_item\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 130,
    "precondition": "lst is a list of elements."
  },
  "131": {
    "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
    "code": "def reverse_vowels(s):\r\n    vowels = \"aeiouAEIOU\"\r\n    s = list(s)\r\n    i = 0\r\n    j = len(s) - 1\r\n    while i < j:\r\n        if s[i] not in vowels:\r\n            i += 1\r\n        elif s[j] not in vowels:\r\n            j -= 1\r\n        else:\r\n            s[i], s[j] = s[j], s[i]\r\n            i += 1\r\n            j -= 1\r\n    return \"\".join(s)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 131,
    "precondition": "s is a string."
  },
  "132": {
    "specification": "Write a function to convert a tuple to a string.",
    "code": "def tup_string(tup):\r\n\treturn ''.join(tup)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 132,
    "precondition": "tup is a tuple of characters."
  },
  "133": {
    "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
    "code": "def sum_negativenum(nums):\r\n  return sum(x for x in nums if x < 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 133,
    "precondition": "nums is a list of numbers."
  },
  "135": {
    "specification": "Write a function to find the nth hexagonal number.",
    "code": "def hexagonal_num(n):\r\n    return (n*(2*n - 1))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 135,
    "precondition": "n is an integer."
  },
  "137": {
    "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
    "code": "def zero_count(arr):\r\n    zero_count = len([x for x in arr if x == 0))\r\n    non_zero_count = len(arr) - zero_count\r\n    return non_zero_count / zero_count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 137,
    "precondition": "arr is a list of integers."
  },
  "138": {
    "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "code": "def is_Sum_Of_Powers_Of_Two(n):\r\n    while n != 0:\r\n        if n & 1:\r\n            return True\r\n        n = n >> 1\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 138,
    "precondition": "n is an integer."
  },
  "139": {
    "specification": "Write a function to find the circumference of a circle.",
    "code": "import math\r\ndef circle_circumference(radius):\r\n    return 2 * math.pi * radius\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 139,
    "precondition": "radius is a positive real number."
  },
  "140": {
    "specification": "Write a function to flatten the list of lists into a single set of numbers.",
    "code": "def extract_singly(nested\\_list):\n    result = set()\n    for i in nested_list:\n        if type(i) is list or type(i) is tuple:\n            result.update(extract_singly(i))\n        else:\n            result.add(i)\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 140,
    "precondition": "nested\\_list is a list of integers or lists or tuples."
  },
  "141": {
    "specification": "Write a function to sort a list of elements.",
    "code": "def pancake_sort(input\\_list):\r\n    for i in range(len(input\\_list)):\r\n        max\\_index = input\\_list.index(max(input\\_list))\r\n        input\\_list.sort(slice(0, max\\_index))\r\n        input\\_list.sort(slice(max\\_index, len(input\\_list))))\r\n    return input\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 141,
    "precondition": "input\\_list is a list of comparable elements."
  },
  "142": {
    "specification": "Write a function to count number items that are identical in the same position of three given lists.",
    "code": "def count_samepair(list1, list2, list3):\r\n    count = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] == list2[i] and list2[i] == list3[i]:\r\n            count = count + 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 142,
    "precondition": "list1, list2, and list3 are lists of the same length."
  },
  "143": {
    "specification": "Write a function to find number of lists present in the given tuple.",
    "code": "def find_lists(tup):\r\n    return tup.count(list)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 143,
    "precondition": "tup is a tuple."
  },
  "145": {
    "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
    "code": "def max_Abs_Diff(arr):\r\n    return max(arr) - min(arr)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 145,
    "precondition": "arr is a list of integers."
  },
  "160": {
    "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
    "code": "def find_solution(a, b, n):\r\n    if (gcd(a, b) != 1):\r\n        return None\r\n    else:\r\n        x = 1\r\n        y = 1\r\n        while(x <= n):\r\n            if(n % a == x\r\n                and n - x % b == 0\r\n            ):\r\n                y = int((n - x) / b)\r\n                return (x, y)\r\n            x += 1\r\n        return None\n\ndef gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b, a % b)\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 160,
    "precondition": "a, b and n are integers such that a, b are not equal to 0."
  },
  "161": {
    "specification": "Write a function to remove all elements from a given list present in another list.",
    "code": "def remove_elements(original_list, remove\\_list):\r\n    for i in remove\\_list:\r\n        while i in original\\_list:\r\n            original\\_list.remove(i)\r\n    return original\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 161,
    "precondition": "original\\_list and remove\\_list are both lists."
  },
  "162": {
    "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
    "code": "def sum_series(n):\r\n    sum = 0\r\n    for i in range(n//2 + 1):\r\n        sum += n - 2*i\r\n    return sum\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 162,
    "precondition": "n is an integer such that n >= 0."
  },
  "163": {
    "specification": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
    "code": "import math\ndef area_polygon(n, s):\n\treturn (0.5 * n * s * s) / (math.tan(math.pi / n))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 163,
    "precondition": "n is a positive integer representing the number of sides, and s is a positive real number representing the length of a side."
  },
  "164": {
    "specification": "Write a function to determine if the sum of the divisors of two integers are the same.",
    "code": "def divisors(n):\r\n    div = []\r\n    for i in range(1, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            div.append(i)\r\n            div.append(int(n / i))\r\n    return list(set(div))\r\n\r\ndef are_equivalent(num1, num2):\r\n    return sum(divisors(num1)) == sum(divisors(num2))\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 164,
    "precondition": "num1 and num2 are integers greater than or equal to 1."
  },
  "165": {
    "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
    "code": "def count_char_position(s):\r\n    count = 0\r\n    for i in range(len(s));\r\n        if s[i] >= 'a' and s[i] <= 'z':\r\n            if (ord(s[i]) - ord('a')) == i:\r\n                count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 165,
    "precondition": "s is a string."
  },
  "166": {
    "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
    "code": "def find_even_pair(lst):\r\n    res = 0\r\n    for i in range(len(lst));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 166,
    "precondition": "lst is a list of integers."
  },
  "167": {
    "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
    "code": "def next_power_of_2(n):\r\n    return 2**int(math.ceil(math.log2(n )))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 167,
    "precondition": "n is a positive integer."
  },
  "168": {
    "specification": "Write a function to count the number of occurrences of a number in a given list.",
    "code": "def frequency(lst, num):\r\n  return lst.count(num)\r\n \nassert frequency([1,2,3], 4) == 0\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 168,
    "precondition": "lst is a list and num is a hashable object."
  },
  "170": {
    "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
    "code": "def sum_range_list(lst, i, j)\r\n    return sum(lst[i:j+1])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 170,
    "precondition": "lst is a list of numbers, i and j are integers such that 0 <= i <= j < len(lst)."
  },
  "171": {
    "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
    "code": "def perimeter_pentagon(l)\r\n    return 5*l\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 171,
    "precondition": "l is a positive real number."
  },
  "172": {
    "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
    "code": "def count_occurance(str1):\r\n    return str1.count('std')\n",
    "total_tests": 5,
    "passed_tests": 5,
    "test_result": 1.0,
    "task_id": 172,
    "precondition": "str1 is a string."
  },
  "222": {
    "specification": "Write a function to check if all the elements in tuple have same data type or not.",
    "code": "def check_type(test\\_tup):\n    t = type(test\\_tup[0])\n    for i in test\\_tup:\n        if type(i) != t:\n            return False\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 222,
    "precondition": "test\\_tup is a tuple."
  },
  "223": {
    "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
    "code": "def is_majority(arr, n, x):\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == x:\r\n            count += 1\r\n    if count > (n // 2):\r\n        return True\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 3,
    "test_result": 0.75,
    "task_id": 223,
    "precondition": "arr is a sorted list of integers, n is a non-negative integer such that 0 <= n <= len(arr), and x is an integer."
  },
  "224": {
    "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
    "code": "def count_Set_Bits(n):\r\n    count = 0\r\n    while (n):\r\n        n = n & (n-1)\r\n        count+=1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 224,
    "precondition": "n is an integer."
  },
  "226": {
    "specification": "Write a python function to remove the characters which have odd index values of a given string.",
    "code": "def odd_values_string(str1):\r\n    res = \"\"\r\n    for i in range(len(str1):\r\n        if i % 2 == 0:\r\n            res += str1[i]\r\n    return res\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 226,
    "precondition": "str1 is a string."
  },
  "227": {
    "specification": "Write a function to find minimum of three numbers.",
    "code": "def min_of_three(a,b,c):\r\n    if a<b and a<c:\r\n        return a\r\n    elif b<c:\r\n        return b\r\n    else:\r\n        return c\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 227,
    "precondition": "a, b, and c are real numbers."
  },
  "228": {
    "specification": "Write a python function to check whether all the bits are unset in the given range or not.",
    "code": "def all_Bits_Set_In_The_Given_Range(number, start, end):\r\n    clear_bits_mask = (2 ** end) - 1\r\n    clear_bits_mask = (clear_bits_mask - (2 ** (start - 1)))\r\n    if (number & clear_bits_mask) == clear_bits_mask:\r\n        return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 228,
    "precondition": "number is an integer, and start and end are integers such that 0 <= start <= end <= the number of bits in the binary representation of number."
  },
  "229": {
    "specification": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
    "code": "def re_arrange_array(arr, n):\r\n    neg, pos = [], []\r\n    for i in arr:\r\n        if i < 0:\r\n            neg.append(i)\r\n        elif i > 0:\r\n            pos.append(i)\r\n    ans = neg + pos\r\n    return ans[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 229,
    "precondition": "arr is a list of integers, and n is an integer such that 0 <= n <= len(arr)."
  },
  "230": {
    "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
    "code": "def replace_blank(string, char)\r\n    result = string.replace(\" \",\"\"+char)+\"\"\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 230,
    "precondition": "string is a string, and char is a single character."
  },
  "232": {
    "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
    "code": "from heapq import nlargest\ndef larg_nnum(numbers, n)\r\n    return list(nlargest(n, numbers))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 232,
    "precondition": "numbers is a list of comparable elements, and n is a positive integer such that 1 <= n <= len(numbers)."
  },
  "233": {
    "specification": "Write a function to find the lateral surface area of a cylinder.",
    "code": "import math\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 233,
    "precondition": "radius and height are positive real numbers."
  },
  "234": {
    "specification": "Write a function to find the volume of a cube given its side length.",
    "code": "def volume_cube(side\\_length):\r\n    return side\\_length ** 3\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 234,
    "precondition": "side\\_length is a non-negative real number."
  },
  "235": {
    "specification": "Write a python function to set all even bits of a given number.",
    "code": "def even_bit_set_number(n)\r\n    result = 0\r\n    while n > 0:\r\n        if n % 2 == 0:\r\n            result = result | (1 << 1)\r\n        n = n >> 1\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 235,
    "precondition": "n is an integer."
  },
  "237": {
    "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
    "code": "def check_occurences(lst):\r\n    res = {}\n    for i in lst:\r\n        if lst.count(i) > 1:\r\n            if i in res:\r\n                res[i] += 1\r\n            else:\r\n                res[i] = 2\r\n        else:\r\n            if i in res:\r\n                continue\r\n            else:\r\n                res[i] = 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 237,
    "precondition": "lst is a list of tuples."
  },
  "238": {
    "specification": "Write a python function to count the number of non-empty substrings of a given string.",
    "code": "def number_of_substrings(string\r\n):\r\n\treturn sum([len(s) > 0 for s in [[string[i:j+1] for j in range(i,len(string))] for i in range(len(string))]]\r\n)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 238,
    "precondition": "string is a string."
  },
  "239": {
    "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
    "code": "def get_total_number_of_sequences(m, n):\r\n    mod = 1000000007\r\n    dp = [[0 for x in range(n)] for x in range(m)] \r\n    for j in range(1, m):\r\n        dp[j-1][0] = 1\r\n    for j in range(1, n)\r\n        for i in range(1, m):\r\n            dp[i-1][j] = (dp[i-1][j] + dp[i-2][j-1]) % mod\r\n            if i > 1:\r\n                dp[i-1][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\r\n    return dp[m-1][n-1]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 239,
    "precondition": "m and n are positive integers such that m >= 2 and n >= 1."
  },
  "240": {
    "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
    "code": "def replace_list(lst1, lst2):\r\n    lst1[-1:] = lst2\n    return lst1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 240,
    "precondition": "lst1 and lst2 are lists."
  },
  "242": {
    "specification": "Write a function to count the total number of characters in a string.",
    "code": "def count_charac(str1):\r\n  return len(str1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 242,
    "precondition": "str1 is a string."
  },
  "244": {
    "specification": "Write a python function to find the next perfect square greater than a given number.",
    "code": "import math\r\ndef next_Perfect_Square(n):\r\n    sqrt_n = math.isqrt(n)\r\n    return (sqrt_n + 1)**2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 244,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "245": {
    "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
    "code": "import math\n\ndef max_sum(arr):\r\n    n = len(arr)\r\n    if n <= 1:\r\n        return arr[0]\r\n    inc = [1]*n\r\n    dec = [1]*n\r\n    inc_sum = [arr[0]]\r\n    dec_sum = [arr[n-1]]\r\n    for i in range(1, n):\r\n        for j in range(i)\r\n            if arr[j] < arr[i]\r\n                if inc[j] + 1 > inc[i]\r\n                    inc[i] = inc[j] + 1\r\n                    inc_sum[i] = inc_sum[j] + arr[i]\r\n        for j in range(n-1, i-1, -1):\r\n            if arr[j] > arr[i]\r\n                if dec[j] + 1 > dec[i]\r\n                    dec[i] = dec[j] + 1\r\n                    dec_sum[i] = dec_sum[j] + arr[i]\r\n    max_sum = inc_sum[n-1]\r\n    for i in range(n)\r\n        if dec_sum[i] + inc_sum[i-1] > max_sum\r\n            max_sum = dec_sum[i] + inc_sum[i-1]\r\n    return max_sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 245,
    "precondition": "arr is a list of integers."
  },
  "246": {
    "specification": "Write a function for computing square roots using the babylonian method.",
    "code": "def babylonian_squareroot(n):\r\n    root = n \r\n    while (root - n/root) > 0.00001:\r\n        root = (root + n/root)/2\r\n    return root\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 246,
    "precondition": "n is a non-negative floating point number."
  },
  "247": {
    "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
    "code": "def lps(str1):\r\n  X = len(str1)\r\n  L = [[0 for x in range(X)] for y in range(X)]\r\n  i = 0\r\n  cl = 1\r\n  for i in range(X\r\n    L[i][i] = 1\r\n  for i in range(X-1)\r\n    if str1[i] == str1[i+1]\r\n      L[i][i+1] = 2\r\n      cl = max(cl, 2)\r\n      i = i + 1\r\n    else:\r\n      L[i][i+1] = 0\r\n  for cl in range(3, X + 1):\r\n    for i in range(X - cl + 1):\r\n      j = i + cl - 1\r\n      if L[i+1][j-1] != 0 and str1[i] == str1[j]:\r\n        L[i][j] = L[i+1][j-1] + 2\r\n        cl = max(cl, j - i + 1)\r\n  return cl\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 247,
    "precondition": "str1 is a string."
  },
  "248": {
    "specification": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
    "code": "import math\ndef harmonic_sum(n):\n    return sum([1/i for i in range(2,n)])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 248,
    "precondition": "n is a positive integer such that n > 1."
  },
  "249": {
    "specification": "Write a function to find the intersection of two arrays.",
    "code": "def intersection_array(arr1, arr2):\r\n    return list(set(arr1) & set(arr2))\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 249,
    "precondition": "arr1 and arr2 are lists of comparable elements."
  },
  "250": {
    "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
    "code": "def count_X(tup, x):\r\n    return tup.count(x)\r\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 250,
    "precondition": "tup is a tuple and x is an element."
  },
  "251": {
    "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
    "code": "def insert_element(lst, element):\r\n    return [element] + [x for pair in zip(lst, lst[1:]) for x in (element, *pair)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 251,
    "precondition": "lst is a list and element is an object."
  },
  "252": {
    "specification": "Write a python function to convert complex numbers to polar coordinates.",
    "code": "import cmath\r\ndef convert(c:\r\n    r = abs(c)\r\n    theta = cmath.phase(c)\r\n    return (r, theta)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 252,
    "precondition": "c is a complex number."
  },
  "253": {
    "specification": "Write a python function that returns the number of integer elements in a given list.",
    "code": "def count_integer(lst):\r\n    return sum(isinstance(i, int) for i in lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 253,
    "precondition": "lst is a list."
  },
  "255": {
    "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
    "code": "def combinations_colors(lst,n):\r\n  res = []\r\n  for i in range(len(lst)):\r\n    res.append((lst[i],))\r\n    for j in range(1, n):\r\n      res += [(lst[i],) * j]\r\n  return res\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 255,
    "precondition": "lst is a list of hashable elements, n is a non-negative integer such that 0 <= n <= len(lst)"
  },
  "256": {
    "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
    "code": "import math\r\ndef count_Primes_nums(num):\r\n    count = 0\r\n    for i in range(2, num):\r\n        for j in range(2,int(math.sqrt(i)) + 1):\r\n            if i % j == 0:\r\n                break\r\n        else:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 256,
    "precondition": "num is an integer greater than or equal to 0."
  },
  "257": {
    "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
    "code": "def swap_numbers(num1, num2):\r\n    return (num2, num1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 257,
    "precondition": "num1 and num2 are both numbers."
  },
  "259": {
    "specification": "Write a function to maximize the given two tuples.",
    "code": "def maximize_elements(tup1, tup2):\r\n    res = []\r\n    for i in range(len(tup1):\r\n        if tup1[i][0] > tup2[i][0]\r\n            res.append(tup1[i])\\\n        elif tup1[i][0] < tup2[i][0]\r\n            res.append(tup2[i])\\\n        else\r\n            res.append((max(tup1[i][1], tup2[i][1]))\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 259,
    "precondition": "tup1 and tup2 are tuples of equal length, where each element of the tuples is a list of two integers."
  },
  "260": {
    "specification": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "code": "def newman_prime(n):\r\n    if n == 1:\r\n        return 3\r\n    else:\r\n        i = 3\r\n        c = 0\r\n        while c < n:\r\n            if is\\_prime(i):\r\n                c = c + 1\r\n            i = i + 2\r\n        return i - 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 260,
    "precondition": "n is a positive integer."
  },
  "261": {
    "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
    "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(x/y for x, y in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 261,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples of the same length, and all elements in test\\_tup2 are non-zero."
  },
  "262": {
    "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
    "code": "def split_two_parts(lst, L):\r\n    return (lst[:L], lst[L:])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 262,
    "precondition": "lst is a list, and L is an integer such that 0 <= L <= len(lst)."
  },
  "264": {
    "specification": "Write a function to calculate a dog's age in dog's years.",
    "code": "def dog_age(human_age):\r\n    if human_age <= 1:\r\n        return 15\r\n    else:\r\n        return 15 + (human_age - 1) * 7\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 264,
    "precondition": "human\\_age is an integer, representing the age of a dog in human years."
  },
  "265": {
    "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
    "code": "def list_split(lst, n):\r\n\treturn [lst[i:n+i] for i in range(0,len(lst),n)]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 265,
    "precondition": "lst is a list and n is an integer such that 0 < n <= len(lst)."
  },
  "266": {
    "specification": "Write a function to find the lateral surface area of a cube given its side length.",
    "code": "import math\ndef lateralsurface_cube(side\\_length:\r\n    return 4 \\* side\\_length ** 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 266,
    "precondition": "side\\_length is a positive real number."
  },
  "267": {
    "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
    "code": "def square_sum(n):\r\n    sum = 0\r\n    for i in range(1, n*2, 2):\r\n        sum += i*i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 267,
    "precondition": "n is an integer."
  },
  "268": {
    "specification": "Write a function to find the n'th star number.",
    "code": "def find_digit_sum(n):\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = int(n / 10)\r\n    return sum\r\n\r\ndef find_star_num(n):\r\n    count = 1\r\n    i = 10\r\n    while n > count:\r\n        i += 1\r\n        if find_digit_sum(i) == find_digit_sum(count):\r\n            count += 1\r\n        else:\r\n            count = 1\r\n    return i\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 268,
    "precondition": "n is a positive integer."
  },
  "269": {
    "specification": "Write a function to find the ascii value of a character.",
    "code": "def ascii_value(char):\r\n    return ord(char)\r\nassert ascii_value('A')==65\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 269,
    "precondition": "char is a single character."
  },
  "270": {
    "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
    "code": "def sum_even_and_even_index(lst):\r\n    return sum(i for i in lst[::2] if i % 2 == 0)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 270,
    "precondition": "lst is a list of integers."
  },
  "271": {
    "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
    "code": "def even_Power_Sum(n):\r\n    result = 0\r\n    for i in range(1, n*2 + 1, 2):\r\n        result += i**5\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 271,
    "precondition": "n is an integer."
  },
  "272": {
    "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
    "code": "def rear_extract(tup_list):\r\n    return [x[2] for x in tup_list]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 272,
    "precondition": "tup\\_list is a list of tuples, where each tuple contains at least 3 elements."
  },
  "273": {
    "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
    "code": "def substract_elements(tup1, tup2):\r\n    res = ()\r\n    for i in range(len(tup1):\r\n        res += (tup1[i] - tup2[i]),\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 273,
    "precondition": "tup1 and tup2 are tuples with the same length."
  },
  "274": {
    "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
    "code": "def binomial_coefficient(n, k):\r\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\r\n\r\ndef even_index_binomial_coeffs(n):\r\n    res = 0\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            res += binomial_coefficient(n, i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 274,
    "precondition": "n is a positive integer."
  },
  "276": {
    "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
    "code": "import math\n\ndef volume_cylinder(radius, height)\r\n  return math.pi * (radius ** 2) * height\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 276,
    "precondition": "radius and height are non-negative real numbers."
  },
  "277": {
    "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
    "code": "def dict_filter(dic, n):\r\n    return {k: v for k, v in dic.items() if v >= n}\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 277,
    "precondition": "dic is a dictionary and n is an integer."
  },
  "278": {
    "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
    "code": "def count_first_elements(tup):\r\n    count = 0\r\n    for i in tup:\r\n        if type(i) is not tuple:\r\n            count += 1\r\n        else:\r\n            count += 1\r\n            break\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 278,
    "precondition": "tup is a tuple."
  },
  "279": {
    "specification": "Write a function to find the nth decagonal number.",
    "code": "def num_decagonal(n):\r\n    return (n*(3*n - 1))/2\r\nassert num_decagonal(3) == 27\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 279,
    "precondition": "n is an integer."
  },
  "280": {
    "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
    "code": "def sequential_search(arr, el):\n    result = [False, -1]\r\n    for i in range(len(arr))\r\n        if el == arr[i\u2d49]\r\n            result = [True, i]\r\n    return tuple(result)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 280,
    "precondition": "arr is a list of elements and el is an element."
  },
  "281": {
    "specification": "Write a python function to check if the elements of a given list are unique or not.",
    "code": "def all_unique(lst):\r\n    return len(lst) == len(set(lst))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 281,
    "precondition": "lst is a list."
  },
  "282": {
    "specification": "Write a function to subtract two lists element-wise.",
    "code": "def sub_list(list1, list2):\r\n    result = [i - j for i, j in zip(list1, list2)]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 282,
    "precondition": "list1 and list2 are lists of the same length."
  },
  "283": {
    "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
    "code": "def validate(n):\r\n    freq = [0 for x in range(10)] \r\n    while n > 0:\r\n        freq[n % 10] += 1 \r\n        n = n // 10 \r\n    for i in range(10):\r\n        if freq[i] > i:\r\n            return False \r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 283,
    "precondition": "n is an integer."
  },
  "284": {
    "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "code": "def check_element(list1, element)\r\n    if all(x == element for x in list1):\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 284,
    "precondition": "list1 is a list and element is an object."
  },
  "285": {
    "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
    "code": "def text_match_two_three(text:\r\n    import re\r\n    result = bool(re.search(r'(a[b]{2,3})', text))\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 285,
    "precondition": "text is a string."
  },
  "286": {
    "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
    "code": "def max_sub_array_sum_repeated(arr, k, n)\r\n    rep_arr = [[0 for x in range(n)] for x in range(k)] \r\n    for i in range(k):\r\n        for j in range(n):\r\n            rep_arr[i][j] = arr[j]\r\n    for i in range(1, k):\r\n        for j in range(n):\r\n            rep_arr[i][j] = rep_arr[i-1][j]\r\n    for j in range(n):\r\n        rep_arr[0][j] = rep_arr[k-1][j]\r\n    max_sum = -1\r\n    for i in range(k\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 286,
    "precondition": "arr is a list of integers, k is a positive integer, and n is the length of the list arr."
  },
  "287": {
    "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
    "code": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += (2*i)**2\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 287,
    "precondition": "n is an integer."
  },
  "290": {
    "specification": "Write a function to find the list of maximum length in a list of lists.",
    "code": "def max_length(lst\\_of\\_lists):\r\n    max\\_length = max(len(i) for i in lst_of_lists)\r\n    result = [i for i in lst_of_lists if len(i) == max_length]\r\n    return max\\_length, result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 290,
    "precondition": "lst\\_of\\_lists is a list of lists."
  },
  "291": {
    "specification": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "code": "def count_no_of_ways(n, k)\r\n\tif n == 1:\r\n\t\treturn k\r\n\tif n == 2:\r\n\t\treturn k * k\r\n\treturn (k * k + (k - 1) * (k - 1)) * (n - 1)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 291,
    "precondition": "n and k are non-negative integers such that n >= 1."
  },
  "292": {
    "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
    "code": "def find(num1, num2):\r\n   return num1 // num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 292,
    "precondition": "num1 and num2 are integers, and num2 is non-zero."
  },
  "293": {
    "specification": "Write a function to find the third side of a right angled triangle.",
    "code": "import math\r\ndef otherside_rightangle(a, b):\r\n    return math.sqrt(a**2 + b**2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 293,
    "precondition": "a and b are positive real numbers (i.e., a > 0 and b > 0)."
  },
  "294": {
    "specification": "Write a function to find the maximum value in a given heterogeneous list.",
    "code": "def max_val(lst):\r\n    return max(lst)\r\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 294,
    "precondition": "lst is a list containing at least one element."
  },
  "295": {
    "specification": "Write a function to return the sum of all divisors of a number.",
    "code": "def sum_div(n):\r\n\tsum = 0\r\n\tfor i in range(1, n + 1):\r\n\t\tif n % i == 0:\r\n\t\t\tsum += i\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 295,
    "precondition": "n is a non-negative integer."
  },
  "296": {
    "specification": "Write a python function to count inversions in an array.",
    "code": "def get_Inv_Count(arr):\r\n    if len(arr) <= 1:\r\n        return 0\r\n    n = len(arr)\r\n    return merge_sort(arr, 0, n-1)\r\n\r\ndef merge_sort(arr, left, right):\r\n    if left < right:\r\n        mid = (left + right)//2\r\n        countLeft = merge_sort(arr, left, mid)\r\n        countRight = merge_sort(arr, mid+1, right)\r\n        countMerge = merge(arr, left, mid, right)\r\n        return countLeft + countRight + countMerge\r\n    return 0\r\n\r\ndef merge(arr, left, mid, right):\r\n    n1 = mid - left + 1\r\n    n2 = right - mid\r\n\r\n    L = [0]*n1\r\n    R = [0]*n2\r\n\r\n    for i in range(0, n1):\r\n        L[i] = arr[left + i]\r\n\r\n    for i in range(0, n2):\r\n        R[i] = arr[mid + 1 + i]\r\n\r\n    i = 0\r\n    j = 0\r\n    k = left\r\n    inv_count = 0\r\n\r\n    while i < n1 and j < n2:\r\n        if L[i] <= R[jwidetext]:\r\n            arr[k] = L[i]\r\n            i += 1\r\n        else:\r\n            arr[k] = R[j]\r\n            j += 1\r\n            inv_count += n1 - i\r\n        k += 1\r\n\r\n    while i < n1:\r\n        arr[k] = L[i]\r\n        i += 1\r\n        k += 1\r\n\r\n    while j < n2:\r\n        arr[k] = R[j]\r\n        j += 1\r\n        k += 1\r\n\r\n    return inv_count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 296,
    "precondition": "arr is a list of integers."
  },
  "297": {
    "specification": "Write a function to flatten a given nested list structure.",
    "code": "def flatten_list(nested\\_list):\r\n    flat\\_list = []\r\n    for sublist in nested\\_list:\r\n        if type(sublist) is list:\r\n            flat\\_list += flatten\\_list(sublist)\r\n        else:\r\n            flat\\_list.append(sublist)\r\n    return flat\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 297,
    "precondition": "nested\\_list is a list."
  },
  "299": {
    "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "code": "def max_aggregate(tuples\\_list):\r\n\tmax\\_val = -1\r\n\tmax\\_key = \"\"\r\n\tfor t in tuples\\_list:\r\n\t\tif t[1] > max\\_val:\\\n\t\t\tmax\\_val = t[1\\[\r\n\t\t\tmax\\_key = t[0]\r\n\treturn (max\\_key, max\\_val)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 299,
    "precondition": "tuples\\_list is a list of tuples, where each tuple contains two elements: a string and a number. The numbers are comparable using the '>' operator."
  },
  "300": {
    "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "code": "import math\nmemo = {}\ndef dp(n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n in memo:\n        return memo[n]\n    memo[n] = dp(n-1) + dp(n-2)\n    return memo[n]\ndef count_binary_seq(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * dp(n - 1)\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 300,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "301": {
    "specification": "Write a function to find the depth of a dictionary.",
    "code": "def dict_depth(dic, depth=1): \r\n    max_depth = depth \r\n    for key, value in dic.items(): \r\n        if isinstance(value, dict): \r\n            inner_depth = dict_depth(value, depth+1) \r\n            if inner_depth > max_depth:\r\n                max_depth = inner_depth \r\n    return max_depth\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 301,
    "precondition": "dic is a dictionary, and depth is an integer."
  },
  "304": {
    "specification": "Write a python function to find element at a given index after number of rotations.",
    "code": "def find_Element(arr,indx,nrotaions):\r\n    for i in range(nrotaions):\r\n        first = arr[0]\r\n        for j in range(1,len(arr)-1):\r\n            arr[j-1] = arr[j]\r\n        arr[-1] = first\r\n    return arr[indx]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 304,
    "precondition": "arr is a non-empty list of integers, indx is an integer such that 0 <= indx < len(arr), and nrotaions is an integer."
  },
  "305": {
    "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
    "code": "def start_withp(list_str):\r\n    res = []\r\n    for i in list_str:\r\n        if i[0] == 'p' or i[0] == 'P':\r\n            res.append(i.split()[0])\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 305,
    "precondition": "list\\_str is a list of strings."
  },
  "306": {
    "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
    "code": "def max_sum_increasing_subseq(prefix, i, k, n):\n    if i >= n or k >= n:\n        return 0\n    else:\n        inc = [prefix[j] for j in range(i, k) if prefix[j] < prefix[k]]\n        excl = max_sum_increasing_subseq(prefix, i, k+1, n)\n        return max(sum(inc), excl)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 306,
    "precondition": "prefix is a list of integers, i and k are integers such that 0 <= i <= k < n, and n is an integer such that 0 <= n <= len(prefix)."
  },
  "307": {
    "specification": "Write a function to get a colon of a tuple.",
    "code": "def colon_tuplex(tuplex, index, value):\r\n    res = list(tuplex)\r\n    res[index] = value\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 307,
    "precondition": "tuplex is a tuple, index is an integer such that 0 <= index < len(tuplex), and value is any Python object."
  },
  "308": {
    "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
    "code": "def large_product(num1, num2, k):\r\n\tnum1.sort()\r\n\tnum2.sort()\r\n\tres = []\r\n\tfor i in range(len(num1)-1, -1, -1):\r\n\t\tfor j in range(len(num2)-1, -1, -1):\r\n\t\t\tif len(res) == k:\r\n\t\t\t\treturn res\r\n\t\t\telse:\r\n\t\t\t\tres.append(num1[i]*num2[j])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 308,
    "precondition": "num1 and num2 are lists of integers, and k is a non-negative integer such that 0 <= k <= len(num1) * len(num2)."
  },
  "309": {
    "specification": "Write a python function to find the maximum of two numbers.",
    "code": "def maximum(x,y):\r\n    if x > y:\r\n        return x\r\n    else:\r\n        return y\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 309,
    "precondition": "x and y are real numbers."
  },
  "310": {
    "specification": "Write a function to convert a given string to a tuple of characters.",
    "code": "def string_to_tuple(str1):\r\n    return tuple(str1)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 310,
    "precondition": "str1 is a string."
  },
  "311": {
    "specification": "Write a python function to set the left most unset bit.",
    "code": "def set_left_most_unset_bit(n)\r\n    return (n | (n & -n))\n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 311,
    "precondition": "n is an integer."
  },
  "312": {
    "specification": "Write a function to find the volume of a cone.",
    "code": "import math\ndef volume_cone(radius, height):\n   return (1/3.0) * math.pi * (radius * radius) * height\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 312,
    "precondition": "radius and height are positive real numbers."
  },
  "388": {
    "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "code": "import math\r\ndef highest_Power_of_2(n):\r\n    result = 2\r\n    while ((result) < (n));\r\n        result = 2 * (result)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 388,
    "precondition": "n is a non-negative integer."
  },
  "389": {
    "specification": "Write a function to find the n'th lucas number.",
    "code": "def lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return lucas(n-1) + lucas(n-2)\r\ndef find_lucas(n):\r\n    return lucas(n-1)\r\nassert find_lucas(9) == 76\r\nprint(\"Test passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 389,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "390": {
    "specification": "Write a function to apply a given format string to all of the elements in a list.",
    "code": "def add_string(lst, fmt\\_str):\r\n    return [fmt\\_str.format(i) for i in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 390,
    "precondition": "lst is a list and fmt\\_str is a format string that can be used to format the elements in the list."
  },
  "391": {
    "specification": "Write a function to convert more than one list to nested dictionary.",
    "code": "def convert_list_dictionary(keys, values, inner\\_values):\r\n\tresult = []\r\n\tfor i in range(len(keys)):\r\n\t\tresult.append({keys[i]: {values[i]: inner\\_values[i]}})\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 391,
    "precondition": "keys, values, and inner\\_values are all lists of the same length."
  },
  "392": {
    "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "code": "def get_max_sum(n):\r\n    dp = [0]*(n+1)\r\n    dp[0] = 0\r\n    dp[1] = 0\r\n    for i in range(2, n+1):\r\n        dp[i] = 1 + max(dp[int(i/2)], dp[int(i/3)], dp[int(i/4)], dp[int(i/5)])\r\n    return dp[n]\r\nget_max_sum(60)\r\nassert get_max_sum(60) == 106\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 392,
    "precondition": "n is a non-negative integer."
  },
  "393": {
    "specification": "Write a function to find the list with maximum length.",
    "code": "def max_length_list(lists:\r\n    max_len = 0\r\n    result = []\r\n    for i in lists:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n            result = i\r\n    return max_len, result\r\n)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 393,
    "precondition": "lists is a list of lists."
  },
  "394": {
    "specification": "Write a function to check if given tuple contains no duplicates.",
    "code": "def check_distinct(tup):\r\n    return len(tup) == len(set(tup))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 394,
    "precondition": "tup is a tuple."
  },
  "395": {
    "specification": "Write a python function to find the first non-repeated character in a given string.",
    "code": "def first_non_repeating_character(str1):\r\n    for i in str1:\r\n        if str1.count(i) == 1:\r\n            return i\r\n    return None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 395,
    "precondition": "str1 is a string."
  },
  "396": {
    "specification": "Write a function to check whether the given string starts and ends with the same character or not.",
    "code": "def check_char(string):\r\n    start = string[0]\r\n    if len(string) > 0:\r\n        if start == string[-1\u7f00]\r\n            return \"Valid\"\r\n    return \"Invalid\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 396,
    "precondition": "string is a string."
  },
  "397": {
    "specification": "Write a function to find the median of three numbers.",
    "code": "def median_numbers(*args)\r\n    args = sorted(args)\r\n    length = len(args)\r\n    if length == 1:\r\n        return args[0]\r\n    if length % 2 == 0:\r\n        median1 = args[length // 2]\r\n        median2 = args[length // 2 - 1]\r\n        return (median1 + median2)/2\r\n    else:\r\n        return args[length // 2]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 397,
    "precondition": "args is a variable number of arguments, and the length of args is at least 1 and at most 3. Each element of args is a real number."
  },
  "398": {
    "specification": "Write a function to compute the sum of digits of each number of a given list.",
    "code": "def sum_of_digits(numbers):\r\n\tsum = 0\r\n\tfor i in numbers:\r\n\t\tdigits = [int(digit) for digit in str(i)]\r\n\t\tsum += sum(digits)\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 398,
    "precondition": "numbers is a list of integers."
  },
  "399": {
    "specification": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "code": "def bitwise_xor(tup1, tup2):\r\n    res = ()\r\n    for i, j in zip(tup1, tup2):\r\n        res += (i ^ j,)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 399,
    "precondition": "tup1 and tup2 are tuples of integers of the same length."
  },
  "400": {
    "specification": "Write a function to extract the number of unique tuples in the given list.",
    "code": "def extract_freq(lst):\r\n    return len(set(tuple(sorted(t)) for t in lst))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 400,
    "precondition": "lst is a list of tuples."
  },
  "401": {
    "specification": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "code": "def add_nested_tuples(tup1, tup2):\r\n    res = []\r\n    for t1, t2 in zip(tup1, tup2):\r\n        res.append(tuple(map(sum, zip(t1, t2))))\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 401,
    "precondition": "tup1 and tup2 are two nested tuples of the same size."
  },
  "404": {
    "specification": "Write a python function to find the minimum of two numbers.",
    "code": "def minimum(num1, num2):\r\n    if num1 <= num2:\r\n        return num1\r\n    else:\r\n        return num2\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 404,
    "precondition": "num1 and num2 are real numbers."
  },
  "405": {
    "specification": "Write a function to check whether an element exists within a tuple.",
    "code": "def check_tuplex(tup, x):\r\n  if x in tup:\r\n    return True\r\n  else:\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 405,
    "precondition": "tup is a tuple and x is an object."
  },
  "406": {
    "specification": "Write a python function to find whether the parity of a given number is odd.",
    "code": "def find_Parity(n):\r\n    return n % 2 != 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 406,
    "precondition": "n is an integer."
  },
  "407": {
    "specification": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "code": "def rearrange_bigger(n):\r\n    num_str = str(n)\r\n    num_list = list(map(int,num_str))\r\n    num_list.sort()\r\n    while True:\r\n        num_list.reverse()\r\n        if num_list > list(map(int,str(int(\"\".join(map(str,num_list))))):\r\n            break\r\n        else:\r\n            num_list.pop()\r\n    return int(\"\".join(map(str,num_list))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 407,
    "precondition": "n is a positive integer."
  },
  "408": {
    "specification": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
    "code": "def k_smallest_pairs(arr1, arr2, k):\r\n    result = []\r\n    if len(arr1) == 0 or len(arr2) == 0:\r\n        return result\r\n    import heapq\r\n    pair = [(arr1[0] + arr2[0], 0, 0)]\r\n    visited = [[False for x in range(len(arr2))] for x in range(len(arr1))]\r\n    while len(result) < k and pair:\r\n        s, i, j = heapq.heappop(pair)\r\n        if not visited[i][j]:\r\n            visited[i][j] = True\r\n            result.append([arr1[i], arr2[j]])\r\n            if j < len(arr2) - 1:\r\n                heapq.heappush(pair, (arr1[i] + arr2[j + 1], i, j + 1))\r\n            if i < len(arr1) - 1:\r\n                heapq.heappush(pair, (arr1[i + 1] + arr2[j], i + 1, j))\r\n    return result\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 408,
    "precondition": "arr1 and arr2 are lists of integers, k is a non-negative integer such that 0 <= k <= len(arr1) * len(arr2)."
  },
  "409": {
    "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "code": "def min_product_tuple(lst): \r\n\tmin_product = float('inf')\r\n\tfor i, j in lst:\r\n\t\tproduct = i[0]*j[0]\r\n\t\tif product < min_product:\r\n\t\t\tmin_product = product\r\n\treturn min_product\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 409,
    "precondition": "lst is a list of tuples, where each tuple contains at least one integer."
  },
  "410": {
    "specification": "Write a function to find the minimum value in a given heterogeneous list.",
    "code": "def min_val(lst):\r\n\tmin_val = lst[0]\r\n\tfor i in lst:\r\n\t\tif type(i) == int or type(i) == float:\r\n\t\t\tif i < min\\_val:\r\n\t\t\t\tmin\\_val = i\r\n\treturn min\\_val\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 410,
    "precondition": "lst is a list containing heterogeneous elements, where at least one element is either an integer or a float."
  },
  "411": {
    "specification": "Write a function to convert the given snake case string to camel case string.",
    "code": "def snake_to_camel(snake\\_string):\r\n    words = snake\\_string.split(\"_\")\r\n    camel\\_string = \"\".join(x.capitalize() for x in words)\r\n    return camel\\_string\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 411,
    "precondition": "snake\\_string is a string."
  },
  "412": {
    "specification": "Write a python function to remove odd numbers from a given list.",
    "code": "def remove_odd(input\\_list):\r\n    return [i for i in input_list if i % 2 == 0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 412,
    "precondition": "input\\_list is a list of integers."
  },
  "413": {
    "specification": "Write a function to extract the nth element from a given list of tuples.",
    "code": "def extract_nth_element(list_of_tuples, n):\r\n    res = [x[n] for x in list_of_tuples]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 413,
    "precondition": "list\\_of\\_tuples is a list of tuples, and n is a non-negative integer such that 0 <= n < length of the tuples."
  },
  "414": {
    "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
    "code": "def overlapping(seq1, seq2):\r\n    for i in seq1:\r\n        if i in seq2:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 414,
    "precondition": "seq1 and seq2 are sequences (e.g. lists, tuples, or strings)."
  },
  "415": {
    "specification": "Write a python function to find a pair with highest product from a given array of integers.",
    "code": "def max_Product(numbers:\r\n    if len(numbers) < 2:\r\n        return None\r\n    else:\r\n        max\\_product = (numbers[0], numbers[1\\] )\r\n        for i in range(len(numbers\\])-1):\r\n            for j in range(i+1, len(numbers)\r\n                if numbers[i] * numbers[j] > max_product[0] * max_product[1\\]:\r\n                    max_product = (numbers[i], numbers[j\\])\r\n        return max_product\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 415,
    "precondition": "numbers is a list of integers, and its length is greater than or equal to 2."
  },
  "417": {
    "specification": "Write a function to find common first element in given list of tuple.",
    "code": "def group_tuples(lst)\r\n    res = [] /***/\n    for i in lst:\r\n        if res == []:\r\n            res.append(list(set(i)))\r\n        else:\r\n            flag = 0 /***/\n            for j in res:\r\n                if i[0] in j:\r\n                    j.append(i[1]) /***/\n                    flag = 1 /***/\n                    break /***/\n            if flag == 0:\r\n                res.append(list(set(i)))\r\n    for i in res:\r\n        for j in range(len(i)-1):\r\n            if i[j] > i[j+1]:\r\n                i[j], i[j+1] = i[j+1], i[j]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 417,
    "precondition": "lst is a list of tuples with at most two elements, where the first element of each tuple is a hashable object."
  },
  "418": {
    "specification": "Write a python function to find the element of a list having maximum length.",
    "code": "def Find_Max(lst):\r\n    return max(lst, key = len)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 418,
    "precondition": "lst is a list of non-empty lists."
  },
  "419": {
    "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "code": "def round_and_sum(lst):\r\n    rounded_list = [round(i) for i in lst]\r\n    total_sum = sum(rounded_list)\\\n    result = total_sum * len(rounded_list)\r\n    print(result)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 419,
    "precondition": "lst is a list of numbers."
  },
  "420": {
    "specification": "Write a python function to find the cube sum of first n even natural numbers.",
    "code": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        if i % 2 == 0:\r\n            sum += i ** 3\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 420,
    "precondition": "n is a non-negative integer."
  },
  "421": {
    "specification": "Write a function to concatenate each element of tuple by the delimiter.",
    "code": "def concatenate_tuple(tup, delimiter='-'):\n    res = delimiter.join(str(i) for i in tup)\n    return (res)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 421,
    "precondition": "tup is a tuple."
  },
  "422": {
    "specification": "Write a python function to find the average of cubes of first n natural numbers.",
    "code": "def find_Average_Of_Cube(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += i**3\r\n    avg = sum/n\r\n    return avg\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 422,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "424": {
    "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
    "code": "def extract_rear(tup)\r\n    res = tuple(i[-1:] for i in tup)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 424,
    "precondition": "tup is a tuple of non-empty strings."
  },
  "425": {
    "specification": "Write a function to count the number of sublists containing a particular element.",
    "code": "def count_element_in_list(lst, num):\r\n    return sum([num in sub for sub in lst]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 425,
    "precondition": "lst is a list of lists or tuples, and num is an element that can be compared using the 'in' operation with elements of lst."
  },
  "426": {
    "specification": "Write a function to filter odd numbers.",
    "code": "def filter_oddnumbers(numbers):\r\n    res = [x for x in numbers if x % 2 != 0]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 426,
    "precondition": "numbers is a list of integers."
  },
  "427": {
    "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "code": "import datetime\r\ndef change_date_format(d):\r\n    dt = datetime.datetime.strptime(d, \"%Y-%m-%d\")\r\n    return dt.strftime(\"%d-%m-%Y\")\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 427,
    "precondition": "d is a string representing a date in yyyy-mm-dd format."
  },
  "428": {
    "specification": "Write a function to sort the given array by using shell sort.",
    "code": "def shell_sort(arr,\r\n    gap = len(arr)//2\r\n):\r\n    while gap > 0:\r\n        for i in range(gap, len(arr), gap):\r\n            anchor = arr[i]\r\n            j = i\r\n            while j >= gap and arr[j - gap] > anchor:\r\n                arr[j] = arr[j - gap]\r\n                j -= gap\r\n            arr[j] = anchor\r\n        gap //= 2\r\n    return arr\r\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 428,
    "precondition": "arr is a list of comparable elements."
  },
  "429": {
    "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n\r\n# Test the function\r\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 429,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples of equal length."
  },
  "430": {
    "specification": "Write a function to find the directrix of a parabola.",
    "code": "def parabola_directrix(h, k, p):\r\n    return k - p\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 430,
    "precondition": "h, k, and p are real numbers, and p is not equal to 0."
  },
  "431": {
    "specification": "Write a function that takes two lists and returns true if they have at least one common element.",
    "code": "def common_element(list1, list2):\r\n    if len(set(list1) & set(list2)) > 0:\r\n        return True\r\n    return False\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 431,
    "precondition": "list1 and list2 are lists."
  },
  "432": {
    "specification": "Write a function to find the median length of a trapezium.",
    "code": "def median_trapezium(a, b, c)\r\n    if a + b != c:\r\n        raise Exception(\"a + b should be equal to c\")\r\n    else:\r\n        return (a + b) / 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 432,
    "precondition": "a, b, and c are non-negative real numbers such that a, b, and c form a trapezium (i.e. a and b are the lengths of the parallel sides and c is the length of the non-parallel side)."
  },
  "433": {
    "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "code": "def check_greater(arr, num):\r\n    return max(arr) < num\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 433,
    "precondition": "arr is a list of integers and num is an integer."
  },
  "434": {
    "specification": "Write a function that matches a string that has an a followed by one or more b's.",
    "code": "import re\ndef text_match_one(text):\n    pattern = re.compile(r'ab+')\n    return bool(pattern.search(text))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 434,
    "precondition": "text is a string."
  },
  "435": {
    "specification": "Write a python function to find the last digit of a given number.",
    "code": "def last_Digit(n):\r\n    return abs(n) % 10\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 435,
    "precondition": "n is an integer."
  },
  "436": {
    "specification": "Write a python function to return the negative numbers in a list.",
    "code": "def neg_nos(list1)\r\n    return [x for x in list1 if x < 0]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 436,
    "precondition": "list1 is a list of integers."
  },
  "437": {
    "specification": "Write a function to remove odd characters in a string.",
    "code": "def remove_odd(string):\r\n    res = \"\"\r\n    for char in string:\r\n        if int(ord(char)) % 2 == 0:\r\n            res += char\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 437,
    "precondition": "string is a string."
  },
  "438": {
    "specification": "Write a function to count bidirectional tuple pairs.",
    "code": "def count_bidirectional(lst):\r\n\tx = 0\r\n\tfor i in range(len(lst));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 438,
    "precondition": "lst is a list of tuples where each tuple contains only hashable objects."
  },
  "439": {
    "specification": "Write a function to join a list of multiple integers into a single integer.",
    "code": "def multiple_to_single(list\\_in):\r\n    result = \"\"\r\n    for i in list\\_in:\r\n        result += str(i)\r\n    return int(result)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 439,
    "precondition": "list\\_in is a list of integers."
  },
  "440": {
    "specification": "Write a function to find the first adverb and their positions in a given sentence.",
    "code": "import re\r\ndef find_adverb_position(sentence):\r\n    adverbs = [\"abruptly\", \"actually\", \"almost\", \"already\", \"always\", \"almost\", \"also\", \"also\", \"always\", \"annually\", \"another\", \"anybody\", \"anyhow\", \"anymore\", \"anyone\", \"anything\", \"anyway\", \"anywhere\", \"are\", \"are\", \"aren't\", \"around\", \"as\", \"ask\", \"asking\", \"at\", \"away\", \"barely\", \"because\", \"been\", \"before\", \"behind\", \"being\", \"below\", \"beside\", \"between\", \"beyond\", \"both\", \"but\", \"by\", \"can\", \"cannot\", \"can't\", \"cause\", \"causes\", \"certainly\", \"clearly\", \"come\", \"could\", \"couldn't\", \"did\", \"didn't\", \"do\", \"does\", \"doesn't\", \"doing\", \"don't\", \"down\", \"during\", \"each\", \"early\", \"either\", \"enough\", \"ever\", \"every\", \"everybody\", \"everyone\", \"everything\", \"except\", \"fairly\", \"finally\", \"for\", \"formerly\", \"from\", \"further\", \"get\", \"give\", \"go\", \"had\", \"hadn't\", \"has\", \"hasn't\", \"have\", \"haven't\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hereafter\", \"hereby\", \"herein\", \"hereto\", \"hereupon\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"however\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"isn't\", \"it\", \"it'd\", \"it'll\", \"it's\", \"its\", \"itself\", \"just\", \"keep\", \"keeps\", \"kind\", \"last\", \"later\", \"least\", \"let\", \"let's\", \"like\", \"likely\", \"may\", \"might\", \"mightn't\", \"most\", \"mostly\", \"must\", \"my\", \"myself\", \"need\", \"neither\", \"never\", \"nevertheless\", \"next\", \"no\", \"nobody\", \"nonetheless\", \"noone\", \"not\", \"nothing\", \"now\", \"nowhere\", \"off\", \"off of\", \"often\", \"on\", \"once\", \"one\", \"only\", \"onto\", \"or\", \"other\", \"others\", \"otherwise\", \"over\", \"per\", \"rather\", \"reciprocally\", \"regarding\", \"respectively\", \"right\", \"said\", \"same\", \"see\", \"seem\", \"seemed\", \"seeming\", \"seems\", \"serious\", \"several\", \"shall\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"shouldn't\", \"since\", \"six\", \"so\", \"some\", \"somebody\", \"somehow\", \"someone\", \"something\", \"sometime\", \"sometimes\", \"somewhere\", \"still\", \"such\", \"take\", \"taken\", \"than\", \"that\", \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"thereafter\", \"thereby\", \"therefore\", \"therein\", \"thereupon\", \"these\", \"they\", \"they'd\", \"they'll\", \"they're\", \"they've\", \"this\", \"those\", \"though\", \"through\", \"throughout\", \"thru\", \"thus\", \"to\", \"together\", \"too\", \"toward\", \"towards\", \"under\", \"underneath\", \"undoing\", \"undo\", \"unless\", \"unlike\", \"until\", \"up\", \"upon\", \"upward\", \"us\", \"very\", \"via\", \"was\", \"wasn't\", \"we\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"welcome\", \"well\", \"were\", \"weren't\", \"what\", \"what's\", \"when\", \"whence\", \"whenever\", \"where\", \"where's\", \"whereafter\", \"whereas\", \"whereby\", \"wherein\", \"whereupon\", \"wherever\", \"whether\", \"which\", \"while\", \"whither\", \"who\", \"who's\", \"whole\", \"whom\", \"whose\", \"why\", \"will\", \"with\", \"within\", \"without\", \"would\", \"wouldn't\", \"yes\", \"yet\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\"]\r\n\r\n    words = re.findall(r'\\w+', sentence)\r\n    adverb\\_pos = []\r\n    for i in range(len(words))\r\n        if words[i] in adverbs:\r\n            adverb\\_pos.append((i, words[i]))\r\n    return adverb\\_pos\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 440,
    "precondition": "sentence is a string representing an English sentence."
  },
  "441": {
    "specification": "Write a function to find the surface area of a cube of a given size.",
    "code": "import math\r\ndef surfacearea_cube(size):\r\n    return 6*(size**2)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 441,
    "precondition": "size is a non-negative integer."
  },
  "442": {
    "specification": "Write a function to find the ration of positive numbers in an array of integers.",
    "code": "def positive_count(numbers):\r\n    positive = 0\r\n    for num in numbers:\r\n        if num > 0:\r\n            positive += 1\r\n    return positive/len(numbers)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 442,
    "precondition": "numbers is a list of integers."
  },
  "443": {
    "specification": "Write a python function to find the largest negative number from the given list.",
    "code": "def largest_neg(lst):\r\n    res = max(filter(lambda x: x < 0, lst))\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 443,
    "precondition": "lst is a list of integers."
  },
  "444": {
    "specification": "Write a function to trim each tuple by k in the given tuple list.",
    "code": "def trim_tuple(lst, k)\r\n    return tuple(t[k:] for t in lst)\r\n\r\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) ==  ( (2, 1, 4), (9, 2, 1), (2, 3, 5), (2, 1, 7) )\r\nassert trim_tuple([(1, 2, 3), (4, 5, 6)], 1) ==  ( (2, 3), (5, 6) )\r\nassert trim_tuple([(1, 2, 3), (4,)], 1) ==  ( (2, 3), (4,) )\r\nassert trim_tuple([(1,), (4,)], 1) ==  ( (), ())\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 444,
    "precondition": "lst is a list of tuples."
  },
  "445": {
    "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "code": "def index_multiplication(tup1, tup2):\r\n    result = []\r\n    for i in range(len(tup1))\r\n        result.append(tuple(x*y for x, y in zip(tup1[i], tup2[i]))))\r\n    return tuple(result)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 445,
    "precondition": "tup1 and tup2 are tuples of equal length."
  },
  "446": {
    "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
    "code": "def count_Occurrence(tup,lst):\r\n\tres = dict()\r\n\tfor i in lst:\r\n\t\tres[i] = 0\r\n\t\tfor j in tup:\r\n\t\t\tif i == j:\r\n\t\t\t\tres[i] += 1\r\n\treturn sum(res.values())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 446,
    "precondition": "tup is a tuple and lst is a list of hashable elements."
  },
  "447": {
    "specification": "Write a function to find cubes of individual elements in a list.",
    "code": "def cube_nums(lst):\r\n    cube\\_lst = [x**3 for x in lst]\r\n    return cube\\_lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 447,
    "precondition": "lst is a list of integers."
  },
  "448": {
    "specification": "Write a function to calculate the sum of perrin numbers.",
    "code": "def perrin(n):\r\n    if n == 0:\r\n        return 3\r\n    elif n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 2\r\n    elif n > 2:\r\n        return perrin(n-2) + perrin(n-3)\r\n\r\ndef cal_sum(n):\r\n    return perrin(n+1) - 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 448,
    "precondition": "n is a non-negative integer."
  },
  "450": {
    "specification": "Write a function to extract specified size of strings from a given list of string values.",
    "code": "def extract_string(str_list, n)\r\n    res = []\r\n    for i in str_list:\r\n        if len(i) == n:\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 450,
    "precondition": "str\\_list is a list of strings and n is a non-negative integer."
  },
  "451": {
    "specification": "Write a function to remove all whitespaces from the given string.",
    "code": "def remove_whitespaces(s):\r\n  return \"\".join(s.split())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 451,
    "precondition": "s is a string."
  },
  "452": {
    "specification": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
    "code": "def loss_amount(cost_price, selling_price):\r\n    if cost_price > selling_price:\r\n        loss = cost_price - selling_price\r\n        return loss\r\n    else:\r\n        return 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 452,
    "precondition": "cost\\_price and selling\\_price are both non-negative integers or floats."
  },
  "453": {
    "specification": "Write a python function to find the sum of even factors of a number.",
    "code": "def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        if (n % 2 == 0 and n % i == 0):\r\n            sum += i\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 453,
    "precondition": "n is a positive integer."
  },
  "454": {
    "specification": "Write a function that matches a word containing 'z'.",
    "code": "def text_match_wordz(text):\r\n    return 'z' in text\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 454,
    "precondition": "text is a string."
  },
  "455": {
    "specification": "Write a function to check whether the given month number contains 31 days or not.",
    "code": "def check_monthnumb_number(m)\r\n    if m in [1, 3, 5, 7, 8, 10, 12]:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 455,
    "precondition": "m is an integer such that 1 <= m <= 12."
  },
  "456": {
    "specification": "Write a function to reverse each string in a given list of string values.",
    "code": "def reverse_string_list(list1):\r\n  return [i[::-1] for i in list1]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 456,
    "precondition": "list1 is a list of strings."
  },
  "457": {
    "specification": "Write a python function to find the sublist having minimum length.",
    "code": "def find_min(lists):\r\n    min_len = len(lists[0])\r\n    res = lists[0]\r\n    for i in range(len(lists));\r\n        if len(lists[i]) < min_len:\r\n            min_len = len(lists[i])\r\n            res = lists[i]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 457,
    "precondition": "lists is a list of non-empty lists."
  },
  "458": {
    "specification": "Write a function to find the area of a rectangle.",
    "code": "def rectangle_area(length, width):\r\n    return length * width\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 458,
    "precondition": "length and width are real numbers."
  },
  "459": {
    "specification": "Write a function to remove uppercase substrings from a given string.",
    "code": "def remove_uppercase(s):\r\n    res = ''.join(e for e in s if e.islower())\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 459,
    "precondition": "s is a string."
  },
  "460": {
    "specification": "Write a python function to get the first element of each sublist.",
    "code": "def Extract(numbers):\r\n    res = []\r\n    for sublist in numbers:\r\n        res.append(sublist[0])\r\n    return res\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 460,
    "precondition": "numbers is a list of non-empty lists."
  },
  "461": {
    "specification": "Write a python function to count the upper case characters in a given string.",
    "code": "def upper_ctr(str1):\r\n    res = 0\r\n    for i in str1:\r\n        if i.isupper():\r\n            res += 1\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 461,
    "precondition": "str1 is a string."
  },
  "462": {
    "specification": "Write a function to find all possible combinations of the elements of a given list.",
    "code": "def combinations_list(lst):\n    result = []\n    n = len(lst)\r\n    for i in range(2**n):\r\n        subset = []\n        for j in range(n):\r\n            if (i & (1 << j)) != 0:\r\n                subset.append(lst[j])\r\n        result.append(subset)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 462,
    "precondition": "lst is a list."
  },
  "463": {
    "specification": "Write a function to find the maximum product subarray of the given array.",
    "code": "def max_subarray_product(arr):\r\n    max_so_far = arr[0]\r\n    min_so_far = arr[0]\r\n    result = arr[0]\r\n    for x in arr:\r\n        if x > 0:\r\n            max_so_far = max(max_so_far * x, x)\r\n            min_so_far = min(min_so_far * x, x)\r\n        elif x == 0:\r\n            max_so_far = 0\r\n            min_so_far = 0\r\n        else:\r\n            max_so_far = max(max_so_far * x, x)\r\n            min_so_far = min(min_so_far * x, x)\r\n        if max_so_far > result:\r\n            result = max_so_far\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 463,
    "precondition": "arr is a list of integers."
  },
  "464": {
    "specification": "Write a function to check if all values are same in a dictionary.",
    "code": "def check_value(d, val):\r\n\treturn all(val == value for value in d.values())\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 464,
    "precondition": "d is a dictionary, and val is a comparison value of any type."
  },
  "465": {
    "specification": "Write a function to drop empty items from a given dictionary.",
    "code": "def drop_empty(dictionary):\r\n    res = {k: v for k, v in dictionary.items() if v is not None}\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 465,
    "precondition": "dictionary is a dictionary."
  },
  "468": {
    "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "code": "def max_product(nums):\r\n\tn = len(nums)\r\n\tif n == 0:\r\n\t\treturn 0\r\n\tif n == 1:\r\n\t\treturn nums[0]\r\n\tdp_max, dp_min = [0]*n, [0]*n\r\n\tdp_max[0], dp_min[0] = nums[0], nums[0]\r\n\tfor i in range(1, n):\r\n\t\tdp_max[i] = max(dp_min[i-1]*nums[i], dp_max[i-1]*nums[i], nums[i] )\r\n\t\tdp_min[i] = min(dp_min[i-1]*nums[i], dp_max[i-1]*nums[i], nums[i])\r\n\treturn max(dp_max)\r\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 468,
    "precondition": "nums is a list of integers."
  },
  "470": {
    "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
    "code": "def add_pairwise(tup)\r\n\tres = ()\r\n\tfor i in range(len(tup)-1):\r\n\t\tres = res + (tup[i] + tup[i+1],)\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 470,
    "precondition": "tup is a tuple of at least 2 integers."
  },
  "471": {
    "specification": "Write a python function to find the product of the array multiplication modulo n.",
    "code": "def find_remainder(arr, n):\r\n    prod = 1\r\n    for i in arr:\r\n        prod *= i\r\n        prod %= n\r\n    return prod\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 471,
    "precondition": "arr is a list of integers, and n is a positive integer."
  },
  "472": {
    "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "code": "def check_Consecutive(num\\_list):\r\n    return all(x == y - 1 for x, y in zip(num\\_list, num\\_list[1:]))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 472,
    "precondition": "num\\_list is a list of integers."
  },
  "473": {
    "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "code": "def tuple_intersection(*args):\r\n    res = set() /***/\n    for t in args:\r\n        for ele in t:\r\n            temp = tuple(sorted(ele))\r\n            res.add(temp)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 473,
    "precondition": "args is a variable number of tuples."
  },
  "474": {
    "specification": "Write a function to replace characters in a string.",
    "code": "def replace_char(str1, c1, c2):\r\n    result = \"\"\r\n    for i in range(len(str1));\r\n        if str1[i] == c1:\r\n            result += c2\r\n        else:\r\n            result += str1[i]\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 474,
    "precondition": "str1 is a string, c1 and c2 are single characters."
  },
  "475": {
    "specification": "Write a function to sort a dictionary by value.",
    "code": "from collections import Counter\r\ndef sort_counter(counter):\r\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\r\ntest\\_counter = Counter({'Math':81, 'Physics':83, 'Chemistry':87})\r\nassert sort_counter(test\\_counter)==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\r\nprint(\"Test case passed\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 475,
    "precondition": "counter is an instance of collections.Counter."
  },
  "476": {
    "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "code": "def big_sum(lstm\n\treturn (max(lst) + min(lst))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 476,
    "precondition": "lst is a non-empty list of numbers."
  },
  "477": {
    "specification": "Write a python function to convert the given string to lower case.",
    "code": "def is_lower(str1):\r\n    return str1.lower()\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 477,
    "precondition": "str1 is a string."
  },
  "478": {
    "specification": "Write a function to remove lowercase substrings from a given string.",
    "code": "def remove_lowercase(s):\r\n\tres = ''\r\n\tfor i in s:\r\n\t\tif i.isupper():\r\n\t\t\tres += i\r\n\treturn res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 478,
    "precondition": "s is a string."
  },
  "479": {
    "specification": "Write a python function to find the first digit of a given number.",
    "code": "def first_Digit(n):\r\n    while n >= 10:\r\n        n = n // 10\r\n    return n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 479,
    "precondition": "n is an integer or a positive floating point number."
  },
  "554": {
    "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
    "code": "def Split(x):\r\n    return list(filter(lambda num: num % 2 != 0, x))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 554,
    "precondition": "x is a list of integers."
  },
  "555": {
    "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
    "code": "def sum_of_n_numbers(n):\r\n\treturn (n*(n+1))/2\r\n\r\ndef sum_of_cubes(n):\r\n\treturn (n*(n+1)*(2*n+1))/6\r\n\r\ndef difference(n):\r\n\treturn abs(sum_of_n_numbers(n)**3 - sum_of_cubes(n))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 555,
    "precondition": "n is an integer."
  },
  "556": {
    "specification": "Write a python function to count the number of pairs whose xor value is odd.",
    "code": "def find_Odd_Pair(arr, n)\r\n\tcount = 0\r\n\tfor i in range(n)\r\n\t\tfor j in range(i+1, n)\r\n\t\t\tif (arr[i] ^ arr[j]) & 1\r\n\t\t\t\tcount += 1\r\n\treturn count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 556,
    "precondition": "arr is a list of integers, and n is the length of the list such that n > 0."
  },
  "557": {
    "specification": "Write a function to toggle the case of all characters in a string.",
    "code": "def toggle_string(str1)\r\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in str1))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 557,
    "precondition": "str1 is a string."
  },
  "558": {
    "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
    "code": "def digit_distance_nums(x, y):\r\n    return sum([abs(int(digit_x) - int(digit_y)) for digit_x, digit_y in zip(str(x), str(y))])\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 558,
    "precondition": "x and y are integers."
  },
  "559": {
    "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
    "code": "def max_sub_array_sum(arr, n)\r\n\r\n    max_so_far = arr[0]\r\n    max_ending_here = arr[0]\r\n\r\n    for i in range(1, n)\r\n    {\r\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\r\n\r\n        if (max_so_far < max_ending_here)\r\n\r\n            max_so_far = max_ending_here\r\n\r\n    }\r\n\r\n    return max_so_far\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 559,
    "precondition": "arr is a list of integers, and n is a positive integer such that n is the length of arr."
  },
  "560": {
    "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
    "code": "def union_elements(test_tup1, test_tup2):\r\n  res = sorted(set(test_tup1) | set(test_tup2))\r\n  return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 560,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples."
  },
  "562": {
    "specification": "Write a python function to find the length of the longest sublists.",
    "code": "def Find_Max_Length(lst):\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max\\_length:\r\n            max\\_length = len(i)\r\n    return max\\_length\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 562,
    "precondition": "lst is a list of non-empty sublists."
  },
  "563": {
    "specification": "Write a function to extract values between quotation marks from a string.",
    "code": "import re\r\ndef extract_values(str1):\r\n    return re.findall('\"(.*?)\"', str1)\r\n    #Or\r\n    #return re.findall(r'\"(.*?)\"', str1)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 563,
    "precondition": "str1 is a string."
  },
  "564": {
    "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
    "code": "def count_Pairs(lst,n):\r\n    result = 0\r\n    for i in range(len(lst));\r\n        for j in range(i+1, len(lst(\r\n            if lst[i] != lst[j];\r\n                result += 1\n    return result\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 564,
    "precondition": "lst is a list of integers, and n is a non-negative integer such that 0 <= n <= len(lst)."
  },
  "565": {
    "specification": "Write a python function to split a string into characters.",
    "code": "def split_char(s):\r\n    return list(s)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 565,
    "precondition": "s is a string."
  },
  "566": {
    "specification": "Write a function to get the sum of the digits of a non-negative integer.",
    "code": "def sum_digits(n):\r\n  if n < 0:\r\n    return \"Invalid input: non-negative integer required\"\r\n  elif n == 0:\r\n    return 0\r\n  else:\r\n    return sum(int(digit) for digit in str(n))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 566,
    "precondition": "n is an integer."
  },
  "567": {
    "specification": "Write a function to check whether a specified list is sorted or not.",
    "code": "def issort_list(list\\_to\\_check)\r\n    return list_to_check == sorted(list_to_check)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 567,
    "precondition": "list\\_to\\_check is a list of comparable elements."
  },
  "568": {
    "specification": "Write a function to create a list of N empty dictionaries.",
    "code": "def empty_list(n)\r\n  return [{}]*n\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 568,
    "precondition": "n is an integer."
  },
  "569": {
    "specification": "Write a function to sort each sublist of strings in a given list of lists.",
    "code": "def sort_sublists(list_of_lists):\r\n    return [sorted(sublist) for sublist in list_of_lists]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 569,
    "precondition": "list\\_of\\_lists is a list of lists of strings."
  },
  "572": {
    "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
    "code": "def two_unique_nums(*args):\r\n    result = []\r\n    for lst in args:\r\n        for i in lst:\r\n            if i not in result:\r\n                result.append(i)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 572,
    "precondition": "args is a variable number of lists of integers."
  },
  "573": {
    "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
    "code": "def unique_product(lst):\r\n    unique_list = set(lst)\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 573,
    "precondition": "lst is a list of integers."
  },
  "574": {
    "specification": "Write a function to find the surface area of a cylinder.",
    "code": "import math\r\ndef surfacearea_cylinder(radius, height):\r\n    surface_area = 2 * math.pi * radius * (radius + height)\r\n    return surface_area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 574,
    "precondition": "radius and height are positive real numbers."
  },
  "576": {
    "specification": "Write a python function to check whether a list is sublist of another or not.",
    "code": "def is_Sub_Array(arr, sub\\_arr):\r\n    for i in range(len(arr) - len(sub\\_arr) + 1):\r\n        if arr[i:i + len(sub\\_arr)] == sub\\_arr:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 576,
    "precondition": "arr and sub\\_arr are lists of comparable elements."
  },
  "577": {
    "specification": "Write a python function to find the last digit in factorial of a given number.",
    "code": "def last_Digit_Factorial(n):\r\n    fact = 1\r\n    for i in range(2, n + 1):\r\n        fact = fact * i\r\n    return fact % 10\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 577,
    "precondition": "n is a non-negative integer."
  },
  "578": {
    "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
    "code": "def interleave_lists(*args):\r\n    result = []{\r\n    for item in args:\r\n        result.extend(item)\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 578,
    "precondition": "All arguments are lists of the same length."
  },
  "579": {
    "specification": "Write a function to find the dissimilar elements in the given two tuples.",
    "code": "def find_dissimilar(test_tup1, test_tup2):\r\n    res = tuple(set(test_tup1) ^ set(test_tup2))\r\n    return (res)\r\n\r\n# Test case:\r\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 579,
    "precondition": "test\\_tup1 and test\\_tup2 are tuples."
  },
  "580": {
    "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
    "code": "def extract_even(mixed\\_tuple):\r\n    if type(mixed\\_tuple) is tuple:\r\n        evens = []\r\n        for i in mixed\\_tuple:\r\n            if type(i) is int and i % 2 == 0:\r\n                evens.append(i)\r\n            elif type(i) is tuple:\r\n                evens.append(extract_even(i))\r\n        return tuple(evens)\r\n    else:\r\n        return mixed\\_tuple\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 580,
    "precondition": "mixed\\_tuple is a tuple or an integer."
  },
  "581": {
    "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
    "code": "import math\r\ndef surface_Area(base_edge, height):\r\n    surface_area = math.sqrt(3) * base_edge * height + 2 * base_edge * base_edge\r\n    return surface_area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 581,
    "precondition": "base\\_edge and height are positive real numbers."
  },
  "582": {
    "specification": "Write a function to check if a dictionary is empty",
    "code": "def is_dict_empty(dic):\n    return not bool(dic)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 582,
    "precondition": "dic is a dictionary."
  },
  "583": {
    "specification": "Write a function which returns nth catalan number.",
    "code": "def catalan_number(n):\r\n    Catalan = 1\r\n    for i in range(n+1):\r\n        Catalan = Catalan * (4*n - 2*i + 2)*(2*i + 2)\r\n        Catalan = Catalan // (i+1)/(n-i)\r\n    return Catalan\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 583,
    "precondition": "n is a non-negative integer."
  },
  "584": {
    "specification": "Write a function to find the first adverb ending with ly and its positions in a given string.",
    "code": "def find_adverbs(sentence):\r\n    words = sentence.split()\r\n    for i,w in enumerate(words):\r\n        if w.endswith(\"ly\")\r\n            return f'{i}-{i+len(w)}: {w}'\r\n    return \"No adverb found\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 584,
    "precondition": "sentence is a string."
  },
  "585": {
    "specification": "Write a function to find the n most expensive items in a given dataset.",
    "code": "def expensive_items(items, n):\r\n    items = sorted(items, key = lambda x: x['price'], reverse = True)\r\n    return items[:n]\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 585,
    "precondition": "items is a list of dictionaries, where each dictionary represents an item with a 'price' key, and n is a non-negative integer such that 0 <= n <= len(items)."
  },
  "586": {
    "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
    "code": "def split_Arr(arr, n):\r\n    first\\_part = arr[:n]\r\n    second\\_part = arr[n:]\r\n    result = second\\_part + first\\_part\r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 586,
    "precondition": "arr is a list, and n is an integer such that 0 <= n < len(arr)."
  },
  "587": {
    "specification": "Write a function to convert a list to a tuple.",
    "code": "def list_tuple(lst')\r\n    return tuple(lst)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 587,
    "precondition": "lst is a list."
  },
  "588": {
    "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
    "code": "def big_diff(lst):\r\n    return max(lst) - min(lst)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 588,
    "precondition": "lst is a non-empty list of numbers."
  },
  "589": {
    "specification": "Write a function to find perfect squares between two given numbers.",
    "code": "def perfect_squares(num1,num2):\r\n    return [x*x for x in range(0,int(num2**0.5)+1) if x*x>=num1]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 589,
    "precondition": "num1 and num2 are real numbers such that num1 <= num2."
  },
  "590": {
    "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
    "code": "import cmath\r\ndef polar_rect(r, theta):\r\n    x = r * cmath.cos(theta)\r\n    y = r * cmath.sin(theta)\r\n    return (x, y)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 590,
    "precondition": "r is a real number and theta is a real number representing an angle in radians."
  },
  "591": {
    "specification": "Write a python function to interchange the first and last elements in a list.",
    "code": "def swap_List(lst):\r\n    if len(lst) < 2:\r\n        return lst\r\n    else:\r\n        first = lst[0]\r\n        lst[0] = lst[-1]\r\n        lst[-1] = first\r\n        return lst\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 591,
    "precondition": "lst is a list with at least one element."
  },
  "592": {
    "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
    "code": "def binomial(n, k):\r\n    if k > n - k:\r\n        k = n - k\r\n    num = 1\r\n    den = 1\r\n    for i in range(1, k + 1):\r\n        num *= n\r\n        den *= i\r\n        n -= 1\r\n    return num // den\r\n\r\ndef sum_Of_product(n):\r\n    res = 0\r\n    for i in range(1, n + 1):\r\n        res += binomial(n, i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 592,
    "precondition": "n is a non-negative integer."
  },
  "593": {
    "specification": "Write a function to remove leading zeroes from an ip address.",
    "code": "def removezero_ip(ip\\_address):\r\n    ip\\_address\\_list = ip\\_address.split(\".\")\r\n    for i in range(len(ip\\_address\\_list)):\r\n        if ip\\_address\\_list[i] == '0' and len(ip\\_address\\_list) > 1:\r\n            ip\\_address\\_list[i] = ''\r\n            if i + 1 < len(ip\\_address\\_list):\r\n                ip\\_address\\_list[i] = ip\\_address\\_list[i + 1][0]\r\n                ip\\_address\\_list[i + 1] = ip\\_address\\_list[i + 1][1:]\r\n            if ip\\_address\\_list[i] == '':\r\n                ip\\_address\\_list.pop(i)\r\n    return \".\".join(ip\\_address\\_list)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 593,
    "precondition": "ip\\_address is a string representing an IP address with dotted decimal format."
  },
  "594": {
    "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
    "code": "def find_diff(lst):\r\n  even = [num for num in lst if num % 2 == 0]\r\n  odd = [num for num in lst if num % 2 != 0]\r\n  if len(even) != 0 and len(odd) != 0:\r\n    return abs(even[0] - odd[0])\r\n  else:\r\n    return \"There is no even or odd number in the list\"\r\n\r\nassert find_diff([1,3,5,7,4,1,6,8]) == 3\r\nassert find_diff([1,3,5,7,9,4]) == 5\r\nassert find_diff([1,3,5,7,4,1,9]) == 1\r\nassert find_diff([1,3,5,7,4,1,6]) == 2\r\nassert find_diff([1,3,5,7]) == \"There is no even or odd number in the list\"\r\nassert find_diff([2,4,6,8]) == \"There is no odd number in the list\"\r\nassert find_diff([1,1,1,1]) == \"There is no even or odd number in the list\"\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 594,
    "precondition": "lst is a list of integers."
  },
  "595": {
    "specification": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
    "code": "def min_Swaps(str1, str2):\r\n    count = 0\r\n    for i in range(len(str1):\r\n        if str1[i] != str2[i backwards\\_index]\r\n            count += 1\r\n    return count\r\nwhere, backwards\\_index = len(str2) - 1 - (i)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 595,
    "precondition": "str1 and str2 are both strings of equal length consisting of only '0' and '1' characters."
  },
  "596": {
    "specification": "Write a function to find the size in bytes of the given tuple.",
    "code": "import sys\r\ndef tuple_size(tup):\r\n    return sys.getsizeof(tup)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 596,
    "precondition": "tup is a tuple."
  },
  "597": {
    "specification": "Write a function to find kth element from the given two sorted arrays.",
    "code": "def find_kth(arr1, arr2, k):\r\n    if len(arr1) > len(arr2):\r\n        return find_kth(arr2, arr1, k)\r\n    if len(arr1) == 0:\r\n        return arr2[k]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    mid1 = len(arr1)/2\r\n    mid2 = k - mid1\r\n    if mid2 <= len(arr2) and arr2[mid2-1] < arr1[mid1-1]:\r\n        return find_kth(arr1[:mid1], arr2, mid2)\r\n    if mid1 <= len(arr1) and arr1[mid1-1] <= arr2[mid2-1]:\r\n        return find_kth(arr1[mid1:], arr2[mid2:], k-mid1)\r\n    if mid2 > len(arr2):\r\n        return find_kth(arr1, arr2[:mid2], k)\r\n    if mid1 > len(arr1):\r\n        return find_kth(arr1[:mid1], arr2, k)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 597,
    "precondition": "arr1 and arr2 are sorted lists of comparable elements, and k is a positive integer such that k <= len(arr1) + len(arr2)."
  },
  "598": {
    "specification": "Write a function to check whether the given number is armstrong or not.",
    "code": "def power(n,x):\r\n    return n**x\r\n\r\ndef get_length(n):\r\n    count = 0\r\n    while n > 0:\r\n        n = n // 10\r\n        count += 1\r\n    return count\r\n\r\ndef armstrong_number(number):\r\n    n = number\r\n    length = get_length(n)\r\n    sum = 0\r\n    while n > 0:\r\n        sum += power(n % 10, length)\r\n        n = n // 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 598,
    "precondition": "number is an integer."
  },
  "599": {
    "specification": "Write a function to find sum and average of first n natural numbers.",
    "code": "def sum_average(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i\r\n    avg = sum/n\r\n    return (sum, avg)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 599,
    "precondition": "n is an integer greater than or equal to 1."
  },
  "600": {
    "specification": "Write a python function to check whether the given number is even or not.",
    "code": "def is_Even(n)\r\n    return n%2==0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 600,
    "precondition": "n is an integer."
  },
  "602": {
    "specification": "Write a python function to find the first repeated character in a given string.",
    "code": "def first_repeated_char(str1):\r\n    chars = []\r\n    for n in str1:\r\n        if n in chars:\r\n            return n\r\n        else:\r\n            chars.append(n)\r\n    return -1\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 602,
    "precondition": "str1 is a string."
  },
  "603": {
    "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
    "code": "import math\r\ndef count_prime_factors(n):\r\n    count = 0\r\n    for i in range(2, int(math.sqrt(n)) + 1):\r\n        while n % i == 0:\r\n            count += 1\r\n            n = n / i\r\n    if n > 1:\r\n        count += 1\r\n    return count\r\n\r\ndef get_ludic(limit):\r\n    res = []\r\n    for i in range(1, limit + 1):\r\n        if count_prime_factors(i) % 2 == 0:\r\n            res.append(i)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 603,
    "precondition": "limit is an integer greater than or equal to 1."
  },
  "604": {
    "specification": "Write a function to reverse words seperated by spaces in a given string.",
    "code": "def reverse_words(sentence)\r\n\treturn ' '.join(reversed(sentence.split()))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 604,
    "precondition": "sentence is a string containing only words separated by spaces."
  },
  "605": {
    "specification": "Write a function to check if the given integer is a prime number.",
    "code": "def prime_num(n):\r\n    if n<2:\r\n        return False\r\n    for i in range(2,int(n**0.5)+1):\r\n        if n%i == 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 605,
    "precondition": "n is an integer."
  },
  "606": {
    "specification": "Write a function to convert degrees to radians.",
    "code": "import math\r\ndef radian_degree(d:\r\n    return (math.pi / 180) * d\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 606,
    "precondition": "d is a real number representing degrees."
  },
  "607": {
    "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
    "code": "import re\ndef find_literals(text, pattern)\r\n\r\n    pattern = re.compile(pattern)\r\n    match = pattern.search(text)\r\n    if match:\r\n        return (match.group(), match.start(), match.end())\r\n    else:\r\n        return None\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 607,
    "precondition": "text is a string, and pattern is a string representing a regular expression."
  },
  "608": {
    "specification": "Write a python function to find nth bell number.",
    "code": "def bell_number(n)\r\n    fact = [0 for i in range(n + 1)]\r\n    fact[0] = 1\r\n    for i in range(1, n + 1):\r\n        for j in range(i)\r\n            fact[i] += fact[j]\r\n    return fact[n]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 608,
    "precondition": "n is a non-negative integer."
  },
  "610": {
    "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
    "code": "def remove_kth_element(input_list, k):\r\n    return input_list[:k-1] + input_list[k:]\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 610,
    "precondition": "input\\_list is a list and k is an integer such that 0 <= k < len(input\\_list)."
  },
  "611": {
    "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
    "code": "def max_of_nth(two_d_list, n)\r\n    if n < 0:\r\n        return \"Error: Invalid column number\"\r\n    max\\_value = two_d_list[0][n]\r\n    for i in range(len(two_d_list))\r\n        if max_value < two_d_list[i][n]:\r\n            max_value = two_d_list[i][n]\r\n    return max_value\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 611,
    "precondition": "two\\_d\\_list is a list of lists, and n is an integer such that 0 <= n < len(two\\_d\\_list[0])."
  },
  "612": {
    "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
    "code": "def merge(lst):\r\n    return list(map(list, zip(*lst))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 612,
    "precondition": "lst is a list of lists with each sublist having exactly two elements."
  },
  "614": {
    "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "code": "def cummulative_sum(tup\\_list):\r\n\tsum = 0\r\n\tfor i in tup\\_list:\r\n\t\tsum += sum(i)\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 614,
    "precondition": "tup\\_list is a list of tuples, and each tuple contains only numeric values."
  },
  "615": {
    "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
    "code": "def average_tuple(tuples)\r\n    avg\\_list = []\r\n    for t in tuples:\r\n        avg = sum(t) / len(t)\r\n        avg\\_list.append(avg)\r\n    return avg\\_list\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 615,
    "precondition": "tuples is a non-empty tuple of tuples, and each tuple contains at least one float or integer value."
  },
  "616": {
    "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
    "code": "def tuple_modulo(t1, t2):\r\n    return tuple(x % y for x, y in zip(t1, t2))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 616,
    "precondition": "t1 and t2 are tuples of equal length."
  },
  "617": {
    "specification": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "code": "import math\ndef min_Jumps(point, jump\\_length):\r\n    distance = math.sqrt(point[0]**2 + point[1]**2)\r\n    jumps = distance / jump_length\r\n    if point[1] % jump_length != 0:\r\n        jumps += 0.5\r\n    return jumps\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 617,
    "precondition": "point is a tuple of two integers representing the x and y coordinates of a point in a 2D plane, and jump\\_length is a positive integer representing the length of the jumps."
  },
  "618": {
    "specification": "Write a function to divide two lists element wise.",
    "code": "def div_list(list1, list2):\r\n    result = []\n    for i in range(len(list1));\r\n        result.append(list1[i]/list2[iqpoint])\n    return result\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 618,
    "precondition": "list1 and list2 are lists of same length, containing only numbers, and none of the elements in list2 is zero."
  },
  "619": {
    "specification": "Write a function to move all the numbers to the end of the given string.",
    "code": "import re\r\ndef move_num(s):\r\n    res = re.sub(r'\\d+', '', s) # remove all the digits\r\n    num = re.findall(r'\\d+', s) # collect all the digits\r\n    res = res + ''.join(num) # combine both string\r\n    return res\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 619,
    "precondition": "s is a string."
  },
  "620": {
    "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
    "code": "def divisibility_check(num1, num2):\r\n    if num1 == 0:\r\n        return num2\r\n    elif num2 == 0:\r\n        return num1\r\n    else:\r\n        return divisibility_check(num1 % num2, num2 % num1)\r\n\r\ndef largest_subset(numbers):\r\n    subsets = {\r\n        {}\\\n    }\r\n    for i in range(0, len(numbers));\r\n    {\r\n        for j in range(i+1, len(numbers));\r\n        {\r\n            if divisibility_check(numbers[i], numbers[j]) == 1:\r\n                if len(subsets) == 0:\r\n                    subsets[frozenset([numbers[i], numbers[j]])] = 2\r\n                elif len(subsets) > 0:\r\n                    key = list(subsets.keys())\r\n                    for k in range(0, len(key));\r\n                    {\r\n                        if (numbers[i] in key[k] or numbers[j] in key[k][<br>]                            and len(key[k]) + 2 > subsets[key[k]]):\r\n                            subsets[frozenset(list(key[k]) + [numbers[i], numbers[j]])] = len(key[k]) + 2\r\n                        elif (numbers[i] in key[k] or numbers[j] in key[k][<br>]                            and len(key[k]) + 2 == subsets[key[k]]):\r\n                            subsets[frozenset(list(key[k]) + [numbers[i], numbers[j]])] = len(key[k]) + 2\r\n                            del subsets[key[k]]\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 620,
    "precondition": "numbers is a list of integers."
  },
  "622": {
    "specification": "Write a function to find the median of two sorted lists of same size.",
    "code": "def get_median(list1, list2, size):\r\n    list3 = list1 + list2\r\n    list3.sort()\r\n    if size % 2 == 0:\r\n        median = (list3[size//2 - 1] + list3[size//2])/2\r\n    else:\r\n        median = list3[size//2]\r\n    return median\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 622,
    "precondition": "list1 and list2 are sorted lists of integers, and size is a positive even integer such that size <= len(list1) + len(list2)."
  },
  "623": {
    "specification": "Write a function to compute the n-th power of each number in a list.",
    "code": "def nth_nums(num\\_list, n):\r\n    return [i\\*\\*n for i in num_list]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 623,
    "precondition": "num\\_list is a list of numbers, and n is an integer."
  },
  "624": {
    "specification": "Write a python function to convert a given string to uppercase.",
    "code": "def is_upper(input_string):\r\n  return input_string.upper()\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 624,
    "precondition": "input\\_string is a string."
  },
  "625": {
    "specification": "Write a python function to interchange the first and last element in a given list.",
    "code": "def swap_List(lst):\r\n    lst[0], lst[-1] = lst[-1], lst[0]\r\n    return lst\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 625,
    "precondition": "lst is a list."
  },
  "626": {
    "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
    "code": "import math\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        return (math.pi * (radius ** 2))/4\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 626,
    "precondition": "radius is a real number such that radius >= 0."
  },
  "627": {
    "specification": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
    "code": "def find_First_Missing(lst):\r\n    if len(lst) == 0:\r\n        return 1\r\n    elif lst[0] != 0:\r\n        return 0\r\n    elif lst[-1] + 1 == lst[0]:\r\n        return lst[0] - 1\r\n    else:\r\n        for i in range(len(lst)-1):\r\n            if lst[i+1] - lst[i] > 1:\r\n                return lst[i] + 1\r\n        return lst[-1] + 1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 627,
    "precondition": "lst is a sorted list of non-negative integers, and it is not empty."
  },
  "628": {
    "specification": "Write a function to replace all spaces in the given string with '%20'.",
    "code": "def replace_spaces(string:\r\n    return string.replace(\" \",\"%20\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 628,
    "precondition": "string is a string."
  },
  "629": {
    "specification": "Write a python function to find even numbers from a list of numbers.",
    "code": "def Split(lst):\r\n    res = [x for x in lst if x % 2 == 0]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 629,
    "precondition": "lst is a list of integers."
  },
  "630": {
    "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "code": "def get_coordinates(coordinate):\r\n    x, y = coordinate\r\n    adjacent_coordinates = [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2) if i!=0 or j!=0]\r\n    return adjacent_coordinates\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 630,
    "precondition": "coordinate is a tuple of two integers."
  },
  "631": {
    "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
    "code": "def replace_spaces(string)\r\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 631,
    "precondition": "string is a string."
  },
  "632": {
    "specification": "Write a python function to move all zeroes to the end of the given list.",
    "code": "def move_zero(arr\r\n    for i in range(len(arr))\r\n        if arr[i] != 0\r\n            arr[i], arr[0] = arr[0], arr[i]\r\n            move_zero(arr[1:])\n    return arr\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 632,
    "precondition": "arr is a list of integers."
  },
  "633": {
    "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
    "code": "def pair_xor_Sum(num,n):\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            res ^= num[i] ^ num[j]\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 1,
    "test_result": 0.3333333333333333,
    "task_id": 633,
    "precondition": "num is a list of integers, and n is a non-negative integer such that 0 <= n <= len(num)."
  },
  "635": {
    "specification": "Write a function to sort the given list.",
    "code": "import heapq\r\ndef heap_sort(arr):\r\n    return heapq.sort(arr)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 635,
    "precondition": "arr is a list of comparable elements."
  },
  "637": {
    "specification": "Write a function to check whether the given amount has no profit and no loss",
    "code": "def noprofit_noloss(cost, selling):\r\n    return cost == selling\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 637,
    "precondition": "cost and selling are both numbers (either integers or floats)."
  },
  "638": {
    "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
    "code": "import math\r\ndef wind_chill(velocity, temp\\_celsius):\r\n    if velocity < 4.8 or temp_celsius > 10:\r\n        return temp_celsius\r\n    else:\r\n        return round(35.74 + 0.6215*temp_celsius - 35.75*(velocity**0.16) + 0.4275*temp_celsius*(velocity**0.16))\r\n                     , 0)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 638,
    "precondition": "velocity is a non-negative floating point number representing the wind velocity in km/h and temp\\_celsius is a floating point number representing the temperature in Celsius."
  },
  "639": {
    "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "code": "def sample_nam(names):\r\n    res = 0\r\n    for name in names:\r\n        if name[0].isupper()\r\n            res += len(name)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 639,
    "precondition": "names is a list of strings."
  },
  "640": {
    "specification": "Write a function to remove the parenthesis and what is inbetween them from a string.",
    "code": "import re\r\ndef remove_parenthesis(s):\r\n    return re.sub(r'\\s*\\(.*?\\)', '', s).strip()\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 640,
    "precondition": "s is a string."
  },
  "641": {
    "specification": "Write a function to find the nth nonagonal number.",
    "code": "def is_nonagonal(n*\r\n  return (n*(n*9 - 9))//2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 641,
    "precondition": "n is an integer."
  },
  "643": {
    "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
    "code": "def text_match_wordz_middle(text):\r\n    return text.count('z') == text.count('z', 1, -2)\r\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 643,
    "precondition": "text is a string."
  },
  "644": {
    "specification": "Write a python function to reverse an array upto a given position.",
    "code": "def reverse_Array_Upto_K(arr, k):\r\n    arr[:] = (arr[k-1::-1] + arr[k:]) \n    return arr\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 644,
    "precondition": "arr is a list of elements and k is an integer such that 0 <= k <= len(arr)."
  },
  "720": {
    "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
    "code": "def add_dict_to_tuple(tup, dct):\r\n    return tup + (dct,)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 720,
    "precondition": "tup is a tuple and dct is a dictionary."
  },
  "721": {
    "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
    "code": "import numpy as np\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    dp[0, 0] = cost[0][0]\n    for i in range(1, n):\n        dp[i, 0] = dp[i-1, 0] + cost[i][0]\n        dp[0, i] = dp[0, i-1] + cost[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i][j]\n    total = dp[n-1, n-1]\n    cells\\_visited = (n-1)*(n-1)\n    return total/(cells_visited+1)\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 721,
    "precondition": "cost is a list of lists where each element cost[i][j] is a non-negative integer, and N is the size of the square matrix such that len(cost) = len(cost[0]) = N."
  },
  "722": {
    "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
    "code": "def filter_data(students, min_height, min_weight):\r\n    result = {}\\\n    for key, value in students.items():\r\n        if value[0] > min_height and value[1] > min_weight:\r\n            result[key] = value\r\n    return result\r\nfilter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70) == {'Cierra Vega': (6.2, 70)} # test case\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 722,
    "precondition": "students is a dictionary with string keys and tuple values, where each tuple contains two floats (student\\_height, student\\_weight), min\\_height is a float, and min\\_weight is a float."
  },
  "723": {
    "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
    "code": "def count_same_pair(lst1, lst2):\r\n    count = 0\r\n    for i in range(len(lst1));\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 723,
    "precondition": "lst1 and lst2 are lists of the same length."
  },
  "724": {
    "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
    "code": "def power_base_sum(base, power):\r\n    result = 0\r\n    for i in range(1, power+1):\r\n        result += sum(int(digit) for digit in str(base**power))\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 724,
    "precondition": "base and power are integers."
  },
  "725": {
    "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
    "code": "import re\r\ndef extract_quotation(s):\r\n  result = re.findall('\"(.*?)\"', s)\r\n  return result\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 725,
    "precondition": "s is a string."
  },
  "726": {
    "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
    "code": "def multiply_elements(t\\_in)\r\n    return tuple(t\\_in[i] * t\\_in[i+1] for i in range(len(t\\_in)-1))\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 726,
    "precondition": "t\\_in is a tuple of numbers with length greater than or equal to 2."
  },
  "728": {
    "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
    "code": "def sum_list(list1, list2):\r\n    return tuple(map(operator.add, list1, list2))\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 728,
    "precondition": "list1 and list2 are lists of the same length."
  },
  "730": {
    "specification": "Write a function to remove consecutive duplicates of a given list.",
    "code": "def consecutive_duplicates(numbers):\r\n    result = [numbers[0]]\r\n    for i in range(1,len(numbers):\r\n        if numbers[i] != numbers[i-1]:\r\n            result.append(numbers[i])\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 730,
    "precondition": "numbers is a list of elements."
  },
  "731": {
    "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
    "code": "import math\r\ndef lateralsurface_cone(r, h):\r\n    return math.pi * r * math.sqrt(h**2 + r**2)\r\nassert lateralsurface_cone(5,12)==204.20352248333654\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 731,
    "precondition": "r and h are real numbers such that r > 0 and h > 0."
  },
  "732": {
    "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "code": "def replace_specialchar(s):\r\n    for char in [',','.',' ']:\r\n        s = s.replace(char, ':')\r\n    return s\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 732,
    "precondition": "s is a string."
  },
  "733": {
    "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "code": "def find_first_occurrence(arr, target):\r\n    left, right = 0, len(arr) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] < target:\r\n            left = mid + 1\r\n        elif arr[mid] > target:\r\n            right = mid - 1\r\n        else:\r\n            if mid == 0 or arr[mid - 1] != target:\r\n                return mid\r\n            else:\r\n                right = mid - 1\r\n    return -1\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 733,
    "precondition": "arr is a sorted list of integers, and target is an integer."
  },
  "734": {
    "specification": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
    "code": "def sum_Of_Subarray_Prod(arr:\r\n    n = len(arr)\r\n    res = 0\r\n    for i in range(n)\r\n        prod = 1\r\n        for j in range(i, n):\r\n            prod *= arr[j]\r\n            res += prod\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 734,
    "precondition": "arr is a list of integers."
  },
  "735": {
    "specification": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
    "code": "def toggle_middle_bits(n):\r\n    n = n ^ ((n & (n - 1)) ^ (n & (n + 1)) & (n - 1) & (n + 1))\r\n    return n\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 735,
    "precondition": "n is an integer."
  },
  "736": {
    "specification": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
    "code": "def left_insertion(arr, target):\r\n    if arr == []:\r\n        return 0\r\n    low, high = 0, len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == target:\r\n            return mid\r\n        elif arr[mid] < target:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    if arr[mid] < target:\r\n        return mid + 1\r\n    elif arr[mid-1] >= target:\r\n        return mid\r\n    else:\r\n        return mid - 1\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 736,
    "precondition": "arr is a sorted list of integers, and target is an integer such that -inf < target < inf."
  },
  "737": {
    "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "code": "import re\r\ndef check_str(word):\r\n    if re.search(r'^[aeiouAEIOU]',word):\r\n        return True\r\n    else:\r\n        return False\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 737,
    "precondition": "word is a string."
  },
  "738": {
    "specification": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
    "code": "import math\r\ndef geometric_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return geometric_sum(n-1) * 0.5\r\ngeometric_sum(7)\r\n# 1.9921875\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 738,
    "precondition": "n is a positive integer."
  },
  "739": {
    "specification": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
    "code": "def isTriangular(x):\r\n    return (x*(x+1))//2 - math.floor((x*(x+1))/2 + 1) == 0\n\ndef find_Index(n):\r\n    i = 1\r\n    while True:\r\n        if len(str((i*(i+1))//2)) == n:\r\n            if isTriangular(i:\r\n                return i\r\n        i += 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 739,
    "precondition": "n is a positive integer."
  },
  "740": {
    "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
    "code": "def tuple_to_dict(tupp): \r\n    if not tupp: \r\n        return {} \r\n    else:\r\n        return {tupp[i]: tupp[i+1] for i in range(0,len(tupp)-1,2)}\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 740,
    "precondition": "tupp is a tuple with an even number of elements."
  },
  "741": {
    "specification": "Write a python function to check whether all the characters are same or not.",
    "code": "def all_Characters_Same(string):\r\n    if len(set(string)) == 1:\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 741,
    "precondition": "string is a non-empty string."
  },
  "742": {
    "specification": "Write a function to caluclate the area of a tetrahedron.",
    "code": "import math\ndef area_of_triangle(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\ndef area_tetrahedron(edge):\n    ab = edge\n    ac = edge\n    ad = edge\n    bc = edge\n    bd = edge\n    cd = edge\n    abcd = math.sqrt(ab * bc * cd * math.sin(math.acos((ab * ab + bc * bc - bd * bd) / (2 * ab * bc))))\n    area = 4 * area_of_triangle(ab, bc, cd) / 3\n    return area\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 742,
    "precondition": "edge is a positive real number."
  },
  "743": {
    "specification": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
    "code": "def rotate_right(arr, shift\\_by):\r\n    n = len(arr)\r\n    shift\\_by = shift\\_by % n\r\n    if shift\\_by == 0:\r\n        return arr\r\n    else:\r\n        return arr[n-shift\\_by:] + arr[:n-shift\\_by]\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 743,
    "precondition": "arr is a list of elements, and shift\\_by is an integer such that 0 <= shift\\_by < len(arr)."
  },
  "744": {
    "specification": "Write a function to check if the given tuple has any none value or not.",
    "code": "def check_none(tup):\r\n    return any(val is None for val in tup)\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 744,
    "precondition": "tup is a tuple."
  },
  "745": {
    "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
    "code": "def is_divisible_by_its_digits(n)\r\n    for i in str(n):\r\n        if n % int(i) != 0:\r\n            return False\r\n    return True\r\n\r\ndef divisible_by_digits(startnum, endnum):\r\n    div_digits_nums = [x for x in range(startnum, endnum + 1) if is_divisible_by_its_digits(x)]\r\n    return div_digits_nums\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 745,
    "precondition": "startnum and endnum are integers such that startnum <= endnum."
  },
  "746": {
    "specification": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
    "code": "import math\r\ndef sector_area(radius, angle):\r\n    if angle > 360:\r\n        return None\r\n    else:\r\n        return (angle/360)*math.pi*(radius**2)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 746,
    "precondition": "radius is a non-negative number, and angle is a number."
  },
  "747": {
    "specification": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
    "code": "def dp(X, Y, Z, m, n, p):\n    L = [[[0 for x in range(p+1)] for y in range(n+1)] for z in range(m+1)]\n\n    for i in range(0, m+1):\n        for j in range(0, n+1):\n            for k in range(0, p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][p]\n\ndef lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    return dp(X, Y, Z, m, n, p)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 747,
    "precondition": "X, Y and Z are strings."
  },
  "748": {
    "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
    "code": "def capital_words_spaces(s):\r\n  return ' '.join(word if word.islower() else word.capitalize() for word in s.split(\"\"))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 748,
    "precondition": "s is a string."
  },
  "749": {
    "specification": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
    "code": "def sort_numeric_strings(arr):\r\n    return sorted(arr, key=int)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 749,
    "precondition": "arr is a list of strings."
  },
  "750": {
    "specification": "Write a function to add the given tuple to the given list.",
    "code": "def add_tuple(lst, tup):\r\n\tlst.append(tup[0])\r\n\tfor i in range(1,len(tup):\r\n\t\tlst.append(tup[i])\r\n\treturn lst\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 750,
    "precondition": "lst is a list and tup is a tuple."
  },
  "751": {
    "specification": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
    "code": "def check_min_heap(arr,\r\n\tn = len(arr))\r\n\tfor i in range(n, 0, -1):\r\n\t\troot = i\r\n\t\tleft = 2 * i\r\n\t\tright = 2 * i + 1\r\n\t\tif left < n and arr[left] < arr[root]:\r\n\t\t\troot = left\r\n\t\tif right < n and arr[right] < arr[root]:\r\n\t\t\troot = right\r\n\t\tif root != i:\r\n\t\t\treturn False\r\n\treturn True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 751,
    "precondition": "arr is a list of integers, and n is a non-negative integer such that 0 <= n <= len(arr)."
  },
  "752": {
    "specification": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
    "code": "def jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\\*2\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 752,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "753": {
    "specification": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
    "code": "def min_k(tuplist, k):\r\n    return tuple(sorted(tuplist, key=lambda x: x[1])[:k])\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 753,
    "precondition": "tuplist is a list of tuples, and k is an integer such that 0 <= k <= len(tuplist)."
  },
  "754": {
    "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
    "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\r\n    if len(l1) == len(l2) == len(l3):\r\n        for i in range(len(l1)-1):\r\n            if l1[i] == l2[i] == l3[i]:\r\n                result.append(l1[i])*\r\n    return result\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 754,
    "precondition": "l1, l2, and l3 are lists of the same length."
  },
  "755": {
    "specification": "Write a function to find the second smallest number in a list.",
    "code": "def second_smallest(lst):\r\n    sorted\\_lst = sorted(lst)\r\n    if len(set(sorted\\_lst)) == 1:\r\n        return None\r\n    else:\r\n        return sorted\\_lst[1]\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 755,
    "precondition": "lst is a list of integers."
  },
  "756": {
    "specification": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
    "code": "import re\r\ndef text_match_zero_one(text):\r\n    return bool(re.search(r'ab+', text))\r\n\r\nassert text_match_zero_one(\"ac\")==False\n",
    "total_tests": 6,
    "passed_tests": 6,
    "test_result": 1.0,
    "task_id": 756,
    "precondition": "text is a string."
  },
  "757": {
    "specification": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
    "code": "def count_reverse_pairs(str_list:\r\n    return (len([(x, y) for x, y in itertools.combinations(str_list, 2) if x == y[::-1]]))\r\n\r\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 757,
    "precondition": "str\\_list is a list of strings."
  },
  "758": {
    "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
    "code": "def unique_sublists(lst):\r\n    result = {}\r\n    for i in lst:\r\n        t = tuple(i)\r\n        if t in result:\r\n            result[t] += 1\r\n        else:\r\n            result[t] = 1\r\n    return result\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 758,
    "precondition": "lst is a list."
  },
  "759": {
    "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
    "code": "import re\r\ndef is_decimal(number)\r\n    pattern = r'^\\d{1,}(\\.\\d{1,2})?$'\r\n    if re.match(pattern, number):\r\n        return True\r\n    else:\r\n        return False\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 759,
    "precondition": "number is a string."
  },
  "760": {
    "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
    "code": "def unique_Element(num)\r\n    return len(set(num)) == 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 760,
    "precondition": "num is a list of integers."
  },
  "762": {
    "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
    "code": "def check_monthnumber_number(month)\r\n\tif month > 0 and month < 13:\r\n\t\tif (month == 4 or month == 6 or month == 9 or month == 11):\r\n\t\t\treturn True\r\n\t\telif month == 2:\r\n\t\t\treturn False\r\n\t\telse:\r\n\t\t\treturn True\r\n\telse:\r\n\t\treturn False\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 762,
    "precondition": "month is an integer between 1 and 12 (inclusive)."
  },
  "763": {
    "specification": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
    "code": "def find_min_diff(arr, n)\r\n{\r\n    arr.sort()\r\n    min_diff = float('inf')\r\n    for i in range(n-1)\r\n    {\r\n        diff = abs(arr[i+1] - arr[i])\r\n        if diff < min_diff:\r\n            min_diff = diff\r\n    }\r\n    return min_diff\r\n}\r\nassert find_min_diff((1,5,3,19,18,25),6) == 1\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 763,
    "precondition": "arr is a list of integers, and n is the length of arr."
  },
  "764": {
    "specification": "Write a python function to count number of digits in a given string.",
    "code": "def number_ctr(str1)\r\n    count = 0\r\n    for j in str1:\r\n        if j.isdigit():\r\n            count += 1\r\n    return count\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 764,
    "precondition": "str1 is a string."
  },
  "765": {
    "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
    "code": "def is_polite(n):\r\n    if n<=0:\r\n        return False\r\n    count = 0\r\n    sum = 0\r\n    i = 1\r\n    while count < n:\r\n        sum += i\r\n        count += 1\r\n        i += 1\r\n        if sum >= n:\r\n            if is_polite_check(sum, count):\r\n                return sum\r\n            sum -= i\r\n            count -= 1\r\n            i -= 1\r\n    return -1\r\ndef is_polite_check(sum, count):\r\n    if count % 2 == 0:\r\n        mid = int(count / 2)\r\n        return (sum - mid) == mid\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 765,
    "precondition": "n is a positive integer."
  },
  "766": {
    "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
    "code": "def pair_wise(lst):\r\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 766,
    "precondition": "lst is a list with at least one element."
  },
  "767": {
    "specification": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
    "code": "def get_pairs_count(numbers, sum:\r\n    count = 0\r\n    for i in range(len(numbers));\r\n        for j in range(i+1, len(numbers));\r\n            if numbers[i] + numbers[j] == sum:\r\n                count += 1 \r\n    return count\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 767,
    "precondition": "numbers is a list of integers and sum is an integer."
  },
  "769": {
    "specification": "Write a python function to get the difference between two lists.",
    "code": "def Diff(lst1, lst2):\r\n    return tuple(list(set(lst1) - set(lst2)))\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 769,
    "precondition": "lst1 and lst2 are lists."
  },
  "770": {
    "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "code": "def odd_num_sum(n):\r\n    result = 0\r\n    for i in range(1, n*2, 2):\r\n        result += i**4 \r\n    return result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 770,
    "precondition": "n is a positive integer."
  },
  "771": {
    "specification": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
    "code": "def check_expression(exp)\r\n{\r\n    stack = []\r\n    mapping = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\")\r\n    for char in exp:\r\n        if char in mapping:\r\n            stack.append(mapping[char] )\r\n        elif len(stack) == 0 or stack.pop() != char:\r\n            return False\r\n    return len(stack) == 0\r\n\r\nassert check_expression(\"{()}[{}]\") == True\r\nassert check_expression(\"([)]\")\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 771,
    "precondition": "exp is a string containing only parentheses (), braces {}, and brackets []."
  },
  "772": {
    "specification": "Write a function to remove all the words with k length in the given string.",
    "code": "def remove_length(str, k):\n    return ' '.join(word for word in str.split() if len(word) != k)\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 772,
    "precondition": "str is a string and k is an integer."
  },
  "773": {
    "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
    "code": "def occurance_substring(s, sub\\_str):\r\n\tmatch = s.find(sub\\_str)\r\n\tif match == -1:\r\n\t\treturn None\r\n\telse:\r\n\t\treturn (sub\\_str, s.index(sub\\_str), s.index(sub\\_str) + len(sub\\_str) - 1)\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 773,
    "precondition": "s is a string and sub\\_str is a string."
  },
  "775": {
    "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "code": "def odd_position(lst):\r\n  for i in range(len(lst):\r\n    if i % 2 != 0 and lst[i] % 2 == 0:\r\n      return False\r\n  return True\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 775,
    "precondition": "lst is a list of integers."
  },
  "776": {
    "specification": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "code": "def count_vowels(s):\r\n    count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i] in 'aeiou' and s[i+1] in 'aeiou:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 776,
    "precondition": "s is a string."
  },
  "777": {
    "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
    "code": "def find_sum(lst /***/\r\n    unique_lst = list(set(lst))\r\n    return sum(unique_lst)\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 777,
    "precondition": "lst is a list of integers."
  },
  "778": {
    "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "code": "def pack_consecutive_duplicates(lst):\r\n    if not lst:\r\n        return []\n    else:\r\n        pack = [lst[0]]\r\n        for i in range(1, len(lst));\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 778,
    "precondition": "lst is a list."
  },
  "779": {
    "specification": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
    "code": "def unique_sublists(lst):\r\n\tresult = {}\r\n\tfor i in lst:\r\n\t\ttpl = tuple(i)\r\n\t\tif tpl in result:\r\n\t\t\tresult[tpl] += 1\r\n\t\telse:\r\n\t\t\tresult[tpl] = 1\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 779,
    "precondition": "lst is a list."
  },
  "780": {
    "specification": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
    "code": "def find_combinations(lst):\r\n    res = []\r\n    for i in range(len(lst))\r\n        for j in range(i+1,len(lst)+1):\r\n            if sum(lst[i]) + sum(lst[j]) not in res:\r\n                res.append(sum(lst[i]) + sum(lst[j]))\r\n    return tuple(res)\r\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 780,
    "precondition": "lst is a list of tuples, where each tuple contains non-negative integers."
  },
  "781": {
    "specification": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
    "code": "def count_divisors(n):\r\n    count = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 781,
    "precondition": "n is a non-negative integer."
  },
  "782": {
    "specification": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
    "code": "def odd_length_sum(arr):\r\n\tn = len(arr)\r\n\tresult = 0\r\n\tfor i in range(n):\r\n\t\tfor j in range(i, n):\r\n\t\t\tif (j - i + 1) % 2 != 0:\r\n\t\t\t\tresult += sum(arr[i:j+1])\r\n\treturn result\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 782,
    "precondition": "arr is a list of numbers."
  },
  "783": {
    "specification": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
    "code": "import math\r\ndef rgb_to_hsv(r, g, b):\r\n    max_value = max(r, g, b)\r\n    min_value = min(r, g, b)\r\n    diff = max_value - min_value\r\n    h = 0\r\n    if (diff != 0):\r\n        if (max_value == r):\r\n            h = (60 * (((g - b) / diff) % 6))\r\n        elif (max_value == g):\r\n            h = (60 * (((b - r) / diff) + 2))\r\n        else:\r\n            h = (60 * (((r - g) / diff) + 4))\r\n    if h < 0:\r\n        h += 360\r\n    s = (max_value - min_value)/max_value\r\n    v = max_value\r\n    hsv = (h, s*100, v*100)\r\n    return hsv\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 783,
    "precondition": "r, g, b are integers such that 0 <= r, g, b <= 255."
  },
  "784": {
    "specification": "Write a function to find the product of first even and odd number of a given list.",
    "code": "def mul_even_odd(numbers):\r\n    even = next((x for x in numbers if x % 2 == 0), None)\r\n    odd = next((x for x in numbers if x % 2 != 0), None)\r\n    if even and odd:\r\n        return even * odd\r\n    else:\r\n        return 0\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 784,
    "precondition": "numbers is a list of integers."
  },
  "785": {
    "specification": "Write a function to convert tuple string to integer tuple.",
    "code": "import ast\r\ndef tuple_str_int(tup\\_str):\r\n\treturn ast.literal\\_eval(tup\\_str)\r\ntup\\_str = \"(7, 8, 9)\"\r\nprint(tuple\\_str\\_int(tup\\_str))\r\n(7, 8, 9)\r\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 785,
    "precondition": "tup\\_str is a string representing a tuple of integers."
  },
  "786": {
    "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "code": "def right_insertion(arr, x):\r\n\tn = len(arr)\r\n\tfor i in range(0, n):\r\n\t\tif x <= arr[i]:\r\n\t\t\treturn i\r\n\treturn n\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 786,
    "precondition": "arr is a list of comparable elements and x is a comparable value."
  },
  "787": {
    "specification": "Write a function that matches a string that has an a followed by three 'b'.",
    "code": "import re\r\ndef text_match_three(text)\r\n    if re.search(r\"abbb\", text):\r\n        return True\r\n    return False\n",
    "total_tests": 4,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 787,
    "precondition": "text is a string."
  },
  "788": {
    "specification": "Write a function to create a new tuple from the given string and list.",
    "code": "def new_tuple(t, s):\r\n    t.append(s)\r\n    res = tuple(t)\r\n    return res\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 788,
    "precondition": "t is a mutable list and s is a string."
  },
  "790": {
    "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
    "code": "def even_position(my_list):\r\n    for i in range(0,len(my_list),2):\r\n        if my_list[i] % 2 != 0:\r\n            return False\r\n    return True\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 790,
    "precondition": "my\\_list is a list of integers."
  },
  "791": {
    "specification": "Write a function to remove tuples from the given tuple.",
    "code": "def remove_nested(tup):\r\n    result = []\r\n    for i in tup:\r\n        if type(i) != tuple:\r\n            result.append(i)\r\n    return tuple(result)\r\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 791,
    "precondition": "tup is a tuple."
  },
  "792": {
    "specification": "Write a python function to count the number of lists in a given number of lists.",
    "code": "def count_list(lst):\r\n    return len(lst)\r\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 792,
    "precondition": "lst is a list."
  },
  "793": {
    "specification": "Write a python function to find the last position of an element in a sorted array.",
    "code": "def last(arr, x):\r\n  if x not in arr:\r\n    return -1 \r\n  else:\r\n    return arr.index(x, arr.index(x)+1)</s\r\n \nassert last([1,2,3],1) == 0\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 793,
    "precondition": "arr is a sorted list of integers and x is an integer."
  },
  "794": {
    "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "code": "import re\ndef text_starta_endb(string):\n    return bool(re.search(r'a.*b$', string))\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 794,
    "precondition": "string is a string."
  },
  "796": {
    "specification": "Write function to find the sum of all items in the given dictionary.",
    "code": "def return_sum(dictionary:\r\n    sum = 0\r\n    for key, value in dictionary.items:\r\n        sum += value\r\n    return sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 796,
    "precondition": "dictionary is a dictionary."
  },
  "797": {
    "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "code": "def sum_in_range(l, r)\r\n\tsum = 0\r\n\twhile l<=r:\r\n\t\tif l % 2 != 0:\r\n\t\t\tsum += l\r\n\t\tl += 1\r\n\treturn sum\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 797,
    "precondition": "l and r are integers such that l <= r >= 0."
  },
  "798": {
    "specification": "Write a python function to find the sum of an array.",
    "code": "def _sum(array):\r\n    return sum(array)\r\nassert _sum([1, 2, 3]) == 6\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 798,
    "precondition": "array is a list of numbers."
  },
  "799": {
    "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
    "code": "def left_rotate(n, d):\r\n    return (n << d) & 0xFFFFFFFF\n",
    "total_tests": 7,
    "passed_tests": 7,
    "test_result": 1.0,
    "task_id": 799,
    "precondition": "n is an integer such that -2147483648 <= n <= 2147483647 and d is an integer such that 0 <= d <= 31."
  },
  "800": {
    "specification": "Write a function to remove all whitespaces from a string.",
    "code": "def remove_all_spaces(input_string):\r\n    return ''.join(input_string.split())\n",
    "total_tests": 4,
    "passed_tests": 4,
    "test_result": 1.0,
    "task_id": 800,
    "precondition": "input\\_string is a string."
  },
  "801": {
    "specification": "Write a python function to count the number of equal numbers from three given integers.",
    "code": "def test_three_equal(a, b, c):\r\n    count = 0\r\n    if a == b:\r\n        count += 1\r\n    if a == c:\r\n        count += 1\r\n    if b == c:\r\n        count += 1\r\n    return count\n",
    "total_tests": 3,
    "passed_tests": 2,
    "test_result": 0.6666666666666666,
    "task_id": 801,
    "precondition": "a, b, and c are integers."
  },
  "802": {
    "specification": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
    "code": "def count_rotation(arr')\r\n    start = 0\r\n    end = len(arr) - 1\r\n    while start < end and arr[start] <= arr[end]\r\n        mid = start + (end - start) // 2\r\n        if arr[mid] > arr[end]\r\n            start = mid + 1\r\n        else\r\n            end = mid\r\n    return len(arr) - start\n",
    "total_tests": 5,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 802,
    "precondition": "arr is a list of integers."
  },
  "803": {
    "specification": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
    "code": "import math\ndef is_perfect_square(n):\n    sqrt = int(math.sqrt(n))\n    return sqrt*sqrt == n\n",
    "total_tests": 6,
    "passed_tests": 6,
    "test_result": 1.0,
    "task_id": 803,
    "precondition": "n is an integer greater than or equal to 0."
  },
  "804": {
    "specification": "Write a function to check whether the product of numbers in a list is even or not.",
    "code": "def is_product_even(lst):\r\n\treturn not all(map(lambda x: x%2!=0, lst))\r\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 804,
    "precondition": "lst is a list of integers."
  },
  "805": {
    "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
    "code": "def max_sum_list(lstOfLst):\r\n\tmaxSum = 0\r\n\tmaxList = []\r\n\tfor i in lstOfLst:\r\n\t\tif sum(i) > maxSum:\r\n\t\t\tmaxSum = sum(i)\r\n\t\t\tmaxList = i\r\n\treturn maxList\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 805,
    "precondition": "lstOfLst is a list of lists of numbers."
  },
  "806": {
    "specification": "Write a function to find maximum run of uppercase characters in the given string.",
    "code": "def max_run_uppercase(s):\r\n    count = 0\r\n    max_count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i].isupper()\r\n            and s[i+1].isupper:\r\n                count += 1\r\n                if count > max\\_count:\r\n                    max\\_count = count\r\n            else:\r\n                count = 0\r\n    return max\\_count + 1\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 806,
    "precondition": "s is a string."
  },
  "807": {
    "specification": "Write a python function to find the first odd number in a given list of numbers.",
    "code": "def first_odd(numbers):\r\n  for i in numbers:\r\n    if i % 2 != 0:\r\n      return i\r\n  return None\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 807,
    "precondition": "numbers is a list of integers."
  },
  "808": {
    "specification": "Write a function to check if the given tuples contain the k or not.",
    "code": "def check_K(tup, k):\r\n    for i in tup:\r\n        if i == k:\r\n            return True\r\n    return False\n",
    "total_tests": 3,
    "passed_tests": 3,
    "test_result": 1.0,
    "task_id": 808,
    "precondition": "tup is a tuple and k is a comparison value."
  },
  "809": {
    "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
    "code": "def check_smaller(tup1, tup2):\r\n    for i in range(len(tup1):\r\n        if tup1[i] >= tup2[i]:\n            return False\n    return True\n",
    "total_tests": 3,
    "passed_tests": 0,
    "test_result": 0.0,
    "task_id": 809,
    "precondition": "tup1 and tup2 are tuples of the same length."
  }
}