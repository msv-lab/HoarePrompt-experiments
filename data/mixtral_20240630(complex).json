{
    "2": {
        "specification": "Write a function to find the shared elements from the given two lists.",
        "code": "def similar_elements(test_list1, test_list2)\r\n    res = set(test_list1) & set(test_list2)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 2,
        "precondition": "test\\_list1 and test\\_list2 are lists.",
        "test_list": [
            "assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))",
            "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))",
            "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"
        ]
    },
    "3": {
        "specification": "Write a python function to identify non-prime numbers.",
        "code": "import math\r\ndef is_not_prime(n):\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            return True\r\n    return False\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 3,
        "precondition": "n is a positive integer (i.e., n > 0).",
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True",
            "assert is_not_prime(37) == False"
        ]
    },
    "4": {
        "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "code": "import heapq\r\ndef heap_queue_largest(numbers, n):\r\n    max_heap = heapq.nlargest(n, numbers)\r\n    return max_heap\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 4,
        "precondition": "numbers is a list of integers, and n is a positive integer such that n <= len(numbers).",
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ]
    },
    "6": {
        "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "code": "def differ_At_One_Bit_Pos(n1, n2):\r\n    return (n1 ^ n2) & (n1 | n2)\n",
        "total_tests": 6,
        "passed_tests": 1,
        "test_result": 0.16666666666666666,
        "task_id": 6,
        "precondition": "n1 and n2 are integers.",
        "test_list": [
            "assert differ_At_One_Bit_Pos(13,9) == True",
            "assert differ_At_One_Bit_Pos(15,8) == False",
            "assert differ_At_One_Bit_Pos(2,4) == False",
            "assert differ_At_One_Bit_Pos(2, 3) == True",
            "assert differ_At_One_Bit_Pos(5, 1) == True",
            "assert differ_At_One_Bit_Pos(1, 5) == True"
        ]
    },
    "7": {
        "specification": "Write a function to find all words which are at least 4 characters long in a string.",
        "code": "def find_char_long(string):\r\n    result = set()\r\n    for word in string.split():\r\n        if len(word) >= 4:\r\n            result.add(word)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 7,
        "precondition": "string is a string.",
        "test_list": [
            "assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
            "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])",
            "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"
        ]
    },
    "8": {
        "specification": "Write a function to find squares of individual elements in a list.",
        "code": "def square_nums(num\\_list*\r\n    return [i\\*\\*2 for i in num\\_list]\r\n\r\nassert square\\_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 8,
        "precondition": "num\\_list is a list of integers.",
        "test_list": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ]
    },
    "9": {
        "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "def find_Rotations(inputStr:\r\n    length = len(inputStr)\r\n    if length == 0:\r\n        return 0\r\n    elif length == 1:\r\n        return 1\r\n    elif length == 2:\r\n        if inputStr[0] == inputStr[1]\r\n            return 1\r\n        else:\r\n            return 2\r\n    else:\r\n        for i in range(1, length):\r\n            if (inputStr[i:] + inputStr[:i]) == inputStr:\r\n                return i\r\n        return length\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 9,
        "precondition": "inputStr is a non-empty string.",
        "test_list": [
            "assert find_Rotations(\"aaaa\") == 1",
            "assert find_Rotations(\"ab\") == 2",
            "assert find_Rotations(\"abc\") == 3"
        ]
    },
    "11": {
        "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(str1, char):\r\n    if str1.count(char) > 1:\r\n        f = str1.find(char)\r\n        l = str1.rfind(char)\r\n        str1 = str1.replace(str1[f], \"\")\r\n        str1 = str1.replace(str1[l], \"\")\r\n    return str1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 11,
        "precondition": "str1 is a string and char is a character.",
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ]
    },
    "12": {
        "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(matrix):\r\n    return sorted(matrix, key=sum)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 12,
        "precondition": "matrix is a list of lists of numbers.",
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ]
    },
    "14": {
        "specification": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(a, b, c):\r\n    s = (a + b + c) / 2\r\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\r\n    return area * c\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 14,
        "precondition": "a, b, and c are positive real numbers such that a, b, and c are the lengths of the sides of a triangle.",
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ]
    },
    "16": {
        "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "import re\ndef text_lowercase_underscore(text):\n    if re.search('[A-Z]', text) or re.search('[0-9]', text):\n        return False\n    elif re.search('__', text) or not re.search('_', text):\n        return False\n    else:\n        return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 16,
        "precondition": "text is a string.",
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ]
    },
    "17": {
        "specification": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "def square_perimeter(side\\_length):\r\n    perimeter = 4 * side\\_length\r\n    return perimeter\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 17,
        "precondition": "side\\_length is a positive real number.",
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ]
    },
    "18": {
        "specification": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "def remove_dirty_chars(input_str1, input_str2):\r\n    for i in input_str2:\r\n        input_str1 = input_str1.replace(i, \"\")\r\n    return input_str1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 18,
        "precondition": "input\\_str1 and input\\_str2 are strings.",
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ]
    },
    "19": {
        "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(input\\_list):\r\n    if len(input\\_list) != len(set(input\\_list):\r\n        return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 19,
        "precondition": "input\\_list is a list of integers.",
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ]
    },
    "20": {
        "specification": "Write a function to check if the given number is woodball or not.",
        "code": "def is\\_woodall(n):\r\n    result = False\r\n    for i in range(1, n)\r\n        if n \\* 2 ** i - 1 == math.factorial(i):\r\n            result = True\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 20,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ]
    },
    "56": {
        "specification": "Write a python function to check if a given number is one less than twice its reverse.",
        "code": "def check(n):\r\n    if n < 10:\r\n        return False\r\n    rev = int(str(n)[::-1])\\\n    if (n - 1) == 2 * rev:\r\n        return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 56,
        "precondition": "n is an integer.",
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ]
    },
    "57": {
        "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "code": "def find_Max_Num(lst):\r\n    return int(\"\".join(sorted(str(x) for x in lst)[::-1]))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 57,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ]
    },
    "58": {
        "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(num1, num2):\r\n\treturn (num1 > 0 and num2 < 0) or (num1 < 0 and num2 > 0)\r\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 58,
        "precondition": "num1 and num2 are integers.",
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ]
    },
    "59": {
        "specification": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n):\r\n    return (n*(3*n-1))//2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 59,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ]
    },
    "61": {
        "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "code": "def count_Substrings(str1):\r\n  count = 0\r\n  n = len(str1)\r\n  for i in range(n):\r\n    for j in range(i, n):\r\n      sum = 0\r\n      temp = str1[i:j + 1]\r\n      for k in temp:\r\n        sum += int(k)\r\n      if sum == len(temp):\r\n        count += 1\r\n  return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 61,
        "precondition": "str1 is a string of digits.",
        "test_list": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ]
    },
    "62": {
        "specification": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(lst):\r\n    return min(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 62,
        "precondition": "lst is a non-empty list of integers.",
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ]
    },
    "63": {
        "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "def max_difference(diff\\_tup\\_list):\r\n    diff\\_list = [b-a for (a,b) in diff_tup_list]\r\n    return max(diff_list)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 63,
        "precondition": "diff\\_tup\\_list is a list of 2-tuples, where each tuple contains two integers such that the first element of the tuple is less than or equal to the second element.",
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ]
    },
    "64": {
        "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
        "code": "def subject_marks(list\\_tuples):\r\n    return sorted(list\\_tuples, key=lambda x: x[1])\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 64,
        "precondition": "list\\_tuples is a list of tuples, where each tuple contains at least two elements.",
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ]
    },
    "65": {
        "specification": "Write a function to flatten a list and sum all of its elements.",
        "code": "def recursive_list_sum(lst):\r\n    sum = 0\r\n    for i in lst:\r\n        if type(i) is list:\r\n            sum += recursive_list_sum(i)\r\n        else:\r\n            sum += i\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 65,
        "precondition": "lst is a list that contains integers and/or other lists of integers.",
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ]
    },
    "66": {
        "specification": "Write a python function to count the number of positive numbers in a list.",
        "code": "def pos_count(lst):\r\n  return sum(1 for x in lst if x > 0)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 66,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ]
    },
    "67": {
        "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "def bell_number(n):\r\n    if n == 0:\r\n        return 1\r\n    elif n == 1:\r\n        return 1\r\n    elif n > 1:\r\n        return sum([bell_number(i) for i in range(0, n)])\r\n\r\ndef bell_number_partitions(n):\r\n    return bell_number(n+1) - 1\r\n\r\nassert bell_number_partitions(2) == 2\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 67,
        "precondition": "n is an integer greater than or equal to 0.",
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ]
    },
    "68": {
        "specification": "Write a python function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(arr*\r\n\tn = len(arr)\r\n\ti = 0\r\n\tis_increasing = True\r\n\tis_decreasing = True\r\n\twhile (i < n-1):\r\n\t\tif (arr[i] > arr[i + 1] and is_increasing == True):\r\n\t\t\tis_increasing = False\r\n\t\telif (arr[i] < arr[i + 1] and is_decreasing == True):\r\n\t\t\tis_decreasing = False\r\n\t\ti = i + 1\r\n\treturn is_increasing or is_decreasing\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 68,
        "precondition": "arr is a list of comparable elements.",
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ]
    },
    "69": {
        "specification": "Write a function to check whether a list contains the given sublist or not.",
        "code": "def is_sublist(lst, sublst):\r\n    for i in range(len(lst) - len(sublst) + 1):\r\n        if lst[i:i + len(sublst)] == sublst:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 69,
        "precondition": "lst is a list and sublst is a sublist such that all elements in sublst are in lst.",
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ]
    },
    "70": {
        "specification": "Write a function to find whether all the given tuples have equal length or not.",
        "code": "def get_equal(lst\\_tup):\r\n    return len(set([len(i) for i in lst_tup])) == 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 70,
        "precondition": "lst\\_tup is a list of tuples.",
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ]
    },
    "71": {
        "specification": "Write a function to sort a list of elements.",
        "code": "def comb_sort(arr,\r\n\tn = None\r\n):\r\n\tif n == None:\r\n\t\tn = len(arr)\r\n\tgap = n\r\n\tswapped = True\r\n\twhile (gap > 1 or swapped):\r\n\t\tgap = int(gap/1.3)\r\n\t\tif gap < 1:\r\n\t\t\tgap = 1\r\n\t\tswapped = False\r\n\t\ti = 0\r\n\t\twhile (i + gap < n):\r\n\t\t\tif arr[i] > arr[i + gap]:\r\n\t\t\t\tarr[i], arr[i + gap] = arr[i + gap], arr[i]\r\n\t\t\t\tswapped = True\r\n\t\t\ti += 1\r\n\treturn arr\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 71,
        "precondition": "arr is a list of comparable elements.",
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ]
    },
    "72": {
        "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "import math\r\ndef dif_Square(n):\r\n    root = int(math.sqrt(n))\r\n    for i in range(root, 0, -1):\r\n        sq = i*i\r\n        if (n % 2 == 0 and sq == n/2) or (sq - n).is_integer():\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 72,
        "precondition": "n is an integer.",
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ]
    },
    "74": {
        "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(colors, patterns)\r\n    if (len(colors) != len(patterns):\r\n        return False\r\n    for i in range(len(colors):\r\n        if colors.count(colors[i]) != patterns.count(patterns[i\\[\r\n            return False\r\n    return True\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 74,
        "precondition": "colors is a list of characters and patterns is a list of integers, both of the same length.",
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ]
    },
    "75": {
        "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "def find_tuples(lst, k):\r\n    res = []\r\n    for i in lst:\r\n        if all(j % k == 0 for j in i):\r\n            res.append(i)\r\n    return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 75,
        "precondition": "lst is a list of tuples, and k is an integer.",
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ]
    },
    "77": {
        "specification": "Write a python function to find whether a number is divisible by 11.",
        "code": "def is_divisible_by_11(n):\r\n    if n < 0:\r\n        n = -n\r\n    x = 0\r\n    while n != 0:\r\n        x = x * 10 + (n % 10)\r\n        n = n // 10\r\n    return x % 11 == 0\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 77,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ]
    },
    "79": {
        "specification": "Write a python function to check whether the length of the word is odd or not.",
        "code": "def word_len(word):\r\n    if len(word) % 2 != 0:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 79,
        "precondition": "word is a string.",
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ]
    },
    "80": {
        "specification": "Write a function to find the nth tetrahedral number.",
        "code": "def tetrahedral_number(n):\r\n    return n * (n + 1) * (n + 2) // 6\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 80,
        "precondition": "n is an integer.",
        "test_list": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ]
    },
    "82": {
        "specification": "Write a function to find the volume of a sphere.",
        "code": "import math\r\ndef volume_sphere(radius):\r\n    return 4/3 * math.pi * (radius**3)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 82,
        "precondition": "radius is a positive real number.",
        "test_list": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ]
    },
    "83": {
        "specification": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "def get_Char(astr):\r\n    res = \"\"\r\n    sum = 0\r\n    for c in astr:\r\n        sum += ord(c)\r\n    res = chr(sum % 26 + 97)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 83,
        "precondition": "astr is a string.",
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ]
    },
    "84": {
        "specification": "Write a function to find the nth number in the newman conway sequence.",
        "code": "def sequence(n):\r\n    s = \"1\"\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        for i in range(n - 1):\r\n            count, curr = 1, s[0]\r\n            s = \"\"\r\n            for j in range(1, len(s))\r\n                if s[j] == curr:\r\n                    count += 1\r\n                else:\r\n                    s += str(count)\r\n                    s += curr\r\n                    count, curr = 1, s[j]\r\n            s += str(count)\r\n            s += curr\r\n        return int(s)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 84,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ]
    },
    "85": {
        "specification": "Write a function to find the surface area of a sphere.",
        "code": "import math\ndef surfacearea_sphere(r):\r\n    return 4*math.pi*r**2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 85,
        "precondition": "r is a non-negative floating point number representing the radius of the sphere.",
        "test_list": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ]
    },
    "86": {
        "specification": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n):\r\n    return (n*(2*n-1) + 1)//2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 86,
        "precondition": "n is an integer.",
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ]
    },
    "87": {
        "specification": "Write a function to merge three dictionaries into a single dictionary.",
        "code": "def merge_dictionaries_three(d1, d2, d3):\r\n    result = {}.fromkeys(d1, None)\r\n    result.update(d2)\r\n    result.update(d3)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 87,
        "precondition": "d1, d2, and d3 are dictionaries.",
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ]
    },
    "88": {
        "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "code": "def freq_count(lst):\r\n    freq = {}\r\n    for i in lst:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    return freq\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 88,
        "precondition": "lst is a list of hashable elements.",
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ]
    },
    "89": {
        "specification": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(n)\r\n\treturn n-1 if n%2==0 else n-2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 89,
        "precondition": "n is an integer.",
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ]
    },
    "90": {
        "specification": "Write a python function to find the length of the longest word.",
        "code": "def len_long(words\r\n    ):\r\n    max\\_length = 0\r\n    for word in words:\r\n        if len(word) > max\\_length:\r\n            max\\_length = len(word)\r\n    return max\\_length\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 90,
        "precondition": "words is a list of strings.",
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ]
    },
    "91": {
        "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
        "code": "def find_substring(lst, substring):\r\n    for i in lst:\r\n        if substring in i:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 91,
        "precondition": "lst is a list of strings, and substring is a string.",
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ]
    },
    "92": {
        "specification": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n):\r\n    n = str(n)\r\n    for i in range(1,len(n))\r\n        if n[i] != n[i-1]\r\n            if i < len(n) - 1:\r\n                if n[i] == n[i+1]\r\n                    return False \r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 92,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ]
    },
    "93": {
        "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a, b):\r\n    return a**b\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 93,
        "precondition": "a and b are integers.",
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ]
    },
    "94": {
        "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "def index_minimum(tup\\_list):\r\n    return min(tup\\_list, key=lambda x: x[1])[0]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 94,
        "precondition": "tup\\_list is a non-empty list of 2-tuples where the second value of each tuple is comparable using the < operator.",
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ]
    },
    "95": {
        "specification": "Write a python function to find the length of the smallest list in a list of lists.",
        "code": "def Find_Min_Length(lst\\_of\\_lists):\r\n    return min([len(i) for i in lst_of_lists])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 95,
        "precondition": "lst\\_of\\_lists is a list of lists.",
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ]
    },
    "96": {
        "specification": "Write a python function to find the number of divisors of a given integer.",
        "code": "import math\r\ndef divisor(n):\r\n    count = 0\r\n    for i in range(1,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            if i == (n // i):\r\n                count += 1\r\n            else:\r\n                count += 2\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 96,
        "precondition": "n is an integer.",
        "test_list": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ]
    },
    "97": {
        "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "code": "def flatten_list(nested\\_list):\r\n    flat\\_list = []\r\n    for sublist in nested\\_list:\r\n        for item in sublist:\r\n            flat\\_list.append(item)\r\n    return flat\\_list\r\n\r\ndef frequency_lists(list\\_of\\_lists):\r\n    flattened\\_list = flatten\\_list(list\\_of\\_lists)\r\n    freq = {}\r\n    for item in flattened\\_list:\r\n        if item not in freq:\r\n            freq[item] = 1\r\n        else:\r\n            freq[item] += 1\r\n    return freq\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 97,
        "precondition": "list\\_of\\_lists is a list of lists of hashable elements.",
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ]
    },
    "98": {
        "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code": "import math\ndef multiply_num(num_list):\r\n  mul = 1\r\n  for i in num_list:\r\n    mul *= i\r\n  return mul/len(num_list)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 98,
        "precondition": "num\\_list is a list of non-zero numbers.",
        "test_list": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ]
    },
    "99": {
        "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "def decimal_to_binary(n):\r\n    return bin(n).replace(\"0b\", \"\")\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 99,
        "precondition": "n is an integer.",
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ]
    },
    "100": {
        "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "def is\\_palindrome(n):\r\n    temp = n\r\n    rev = 0\r\n    while (temp > 0):\r\n        rem = temp % 10\r\n        rev = rev * 10 + rem\r\n        temp = int(temp/10)\r\n    if (n < 0):\r\n        rev = -1 \\* rev\r\n    return n == rev\r\ndef next\\_smallest\\_palindrome(n):\r\n    n = abs(n)\r\n    while (1):\r\n        if (is\\_palindrome(n) == True and n > 0):\r\n            return n\r\n        n = n + 1\r\n    return n\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 100,
        "precondition": "n is an integer.",
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ]
    },
    "101": {
        "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "def kth_element(arr, k):\r\n    return sorted(arr)[k-1]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 101,
        "precondition": "arr is a list of comparable elements, and k is an integer such that 1 <= k <= len(arr).",
        "test_list": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ]
    },
    "102": {
        "specification": "Write a function to convert a snake case string to camel case string.",
        "code": "def snake_to_camel(snake\\_case):\r\n    words = snake\\_case.split('_')\r\n    camel\\_case = words[0] + ''.join(word.title() for word in words[1:));\r\n    return camel\\_case\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 102,
        "precondition": "snake\\_case is a string containing only lowercase letters, underscores (\"\\_\"), and digits.",
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ]
    },
    "103": {
        "specification": "Write a function to find the Eulerian number a(n, m).",
        "code": "def eulerian_num(n, m):\r\n    if n == 1:\r\n        if m == 0:\r\n            return 1\r\n        else:\r\n            return 0\r\n    else:\r\n        if m == 0:\r\n            return 0\r\n        elif m == 1:\r\n            return (n-1)**(n-2)\r\n        else:\r\n            return (m*(n-1) - 1)*eulerian_num(n-1, m-1) + (n + m - 2)*eulerian_num(n-1, m)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 103,
        "precondition": "n and m are non-negative integers such that 0 <= m <= n.",
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ]
    },
    "104": {
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "def sort_sublists(list_of_lists):\r\n    return ([sorted(sublist) for sublist in list_of_lists])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 104,
        "precondition": "list\\_of\\_lists is a list of lists, and each element in the inner lists is a string.",
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ]
    },
    "105": {
        "specification": "Write a python function to count true booleans in the given list.",
        "code": "def count(lst):\r\n    return sum(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 105,
        "precondition": "lst is a list of booleans.",
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ]
    },
    "106": {
        "specification": "Write a function to append the given list to the given tuples.",
        "code": "def add_lists(numbers, tup)\r\n\treturn tup + tuple(numbers)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 106,
        "precondition": "numbers is a list and tup is a tuple.",
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ]
    },
    "108": {
        "specification": "Write a function to merge three lists into a single sorted list.",
        "code": "def merge_sorted_list(*args):\r\n    result = [] Marcatori = []\r\n    for i in args:\r\n        if i:\r\n            if type(i) == list:\r\n                Marks.append(sorted(i))\r\n    while Marks:\r\n        min_element = min(Marks)\r\n        result.append(min_element.pop(0))\r\n        if not min_element:\r\n            Marks.remove(min_element)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 108,
        "precondition": "Each argument in args is a list of comparable elements, or None.",
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ]
    },
    "109": {
        "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "def odd_Equivalent(binary_string,num\\_rotations):\r\n    def count\\_odd\\_bits(num):\r\n        return bin(num).count(\"1\")\r\n    count = 0\r\n    for i in range(num\\_rotations\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\r\n        count += count\\_odd\\_bits(int(binary\\_string, 2))\r\n        binary\\_string = binary\\_string[1:] + binary\\_string[0]\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 109,
        "precondition": "binary\\_string is a string of 0s and 1s, and num\\_rotations is a non-negative integer.",
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ]
    },
    "111": {
        "specification": "Write a function to find the common elements in given nested lists.",
        "code": "def common_in\\_nested\\_lists(nested\\_list):\n    res = set()\n    for i in nested\\_list:\n        res.update(set(i))\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 111,
        "precondition": "nested\\_list is a list of lists.",
        "test_list": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ]
    },
    "113": {
        "specification": "Write a function to check if a string represents an integer or not.",
        "code": "import re\ndef check_integer(str_int):\n    if re.search(r'^[+-]?\\d+$', str_int) == None:\n        return False\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 113,
        "precondition": "str\\_int is a string.",
        "test_list": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ]
    },
    "115": {
        "specification": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code": "def empty_dit(dic): \r\n    return all(not bool(dict) for dict in dic)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 115,
        "precondition": "dic is a list of dictionaries.",
        "test_list": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ]
    },
    "116": {
        "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "def tuple_to_int(tup)\r\n    value = 0\r\n    for i in tup:\r\n        value = (value * 10) + i\r\n    return value\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 116,
        "precondition": "tup is a tuple of positive integers.",
        "test_list": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ]
    },
    "117": {
        "specification": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "code": "def list_to_float(input\\_list):\r\n  output\\_list = []\r\n  for i in input\\_list:\r\n    inner\\_list = []\r\n    for j in i:\r\n      try:\r\n        inner\\_list.append(float(j))\r\n      except ValueError:\\\n        inner\\_list.append(j)\r\n    output\\_list.append(inner\\_list)\r\n  return output\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 117,
        "precondition": "input\\_list is a list of lists.",
        "test_list": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ]
    },
    "118": {
        "specification": "Write a function to convert a string to a list of strings split on the space character.",
        "code": "def string_to_list(s\\_str.\r\n\ts\\_list = s\\_str.split(\" \")\r\n\treturn s\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 118,
        "precondition": "s\\_str is a string.",
        "test_list": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ]
    },
    "119": {
        "specification": "Write a python function to find the element that appears only once in a sorted array.",
        "code": "def search(arr):\r\n    for i in range(len(arr)-1):\r\n        if arr[i] != arr[i+1]:\r\n            return arr[i+1]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 119,
        "precondition": "arr is a sorted list of integers.",
        "test_list": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ]
    },
    "120": {
        "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "code": "def max_product_tuple(lst):\r\n    max_product = -1\r\n    for tup in lst:\r\n        product = abs(tup[0]*tup[1+\\_\\\n        if product > max\\_product:\r\n            max\\_product = product\r\n    return max\\_product\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 120,
        "precondition": "lst is a list of tuples, and each tuple contains exactly two integers.",
        "test_list": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ]
    },
    "123": {
        "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def factors(n):\r\n    factors = []\r\n    for i in range(1, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            factors.append(i)\r\n            if i != n // i:\r\n                factors.append(n // i)\r\n    return factors\r\n\r\ndef amicable_pair(n, m):\r\n    n_factors = set(factors(n))\r\n    m_factors = set(factors(m))\r\n    return len(n_factors & m_factors) == 1 and sum(n_factors - m_factors) == m and sum(m_factors - n_factors) == n\r\n\r\ndef amicable_numbers_sum(n):\r\n    amicable\\_sum = 0\r\n    for i in range(1, n):\r\n        divs = set(factors(i))\r\n        for j in range(i + 1, n):\r\n            if amicable_pair(i, j):\r\n                amicable\\_sum += i + j\r\n    return amicable\\_sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 123,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ]
    },
    "124": {
        "specification": "Write a function to get the angle of a complex number.",
        "code": "import cmath\r\ndef angle_complex(real, imag*\r\n\tnum = complex(real, imag)\r\n\treturn cmath.phase(num)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 124,
        "precondition": "real and imag are real numbers.",
        "test_list": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ]
    },
    "125": {
        "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(string)\r\n    count0, count1, max_diff, temp_diff = 0, 0, 0, 0\r\n    for i in range(len(string))\r\n        if string[i] == '0'\r\n            count0 += 1\r\n        else:\r\n            count1 += 1\r\n        temp_diff = max(count0, count1)\r\n        max_diff = max(max_diff, temp_diff)\r\n    return max_diff\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 125,
        "precondition": "string is a non-empty string of 0s and 1s.",
        "test_list": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ]
    },
    "126": {
        "specification": "Write a python function to find the sum of common divisors of two given numbers.",
        "code": "def sum_common_divisors(x, y):\r\n\tcommon_dvsr = [d for d in range(1, min(x, y) + 1) if x % d == 0 and y % d == 0]\r\n\treturn sum(common_dvsr)\r\nassert sum_common_divisors(10,15) == 6\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 126,
        "precondition": "x and y are integers greater than 0.",
        "test_list": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ]
    },
    "127": {
        "specification": "Write a function to multiply two integers.",
        "code": "def multiply_int(num1, num2):\r\n    return num1 * num2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 127,
        "precondition": "num1 and num2 are integers.",
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ]
    },
    "128": {
        "specification": "Write a function to find words that are longer than n characters from a given list of words.",
        "code": "def long_words(n, words\\_str):\n    words = words\\_str.split(\" \")\n    res = []\n    for word in words:\n        if len(word) > n:\n            res.append(word)\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 128,
        "precondition": "n is an integer, and words\\_str is a string containing only words separated by spaces.",
        "test_list": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ]
    },
    "129": {
        "specification": "Write a function to calculate whether the matrix is a magic square.",
        "code": "def magic_square_test(matrix):\n    if len(matrix) != len(matrix[0]):\n        return False\n    n = len(matrix)\n    sum_of_row = sum(matrix[0])\n    sum_of_col = sum([row[0] for row in matrix])\n    for row in matrix:\n        if sum(row) != sum_of_row or sum(row) != sum_of_col:\n            return False\n    for col in zip(*matrix):\n        if sum(col) != sum_of_col:\n            return False\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != sum_of_row - n + 1:\n                return False\n            elif i + j == n - 1 and matrix[i][j] != sum_of_row - n + 1:\n                return False\n    return True\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 129,
        "precondition": "matrix is a list of lists of integers with the same length.",
        "test_list": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ]
    },
    "130": {
        "specification": "Write a function to find the item with maximum frequency in a given list.",
        "code": "def max_occurrences(lst):\r\n    max_count = 0\r\n    max_item = None\r\n    for item in lst:\r\n        curr_count = lst.count(item)\r\n        if curr_count > max_count:\r\n            max_count = curr_count\r\n            max_item = item\r\n    return max_item\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 130,
        "precondition": "lst is a list of elements.",
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ]
    },
    "131": {
        "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "def reverse_vowels(s):\r\n    vowels = \"aeiouAEIOU\"\r\n    s = list(s)\r\n    i = 0\r\n    j = len(s) - 1\r\n    while i < j:\r\n        if s[i] not in vowels:\r\n            i += 1\r\n        elif s[j] not in vowels:\r\n            j -= 1\r\n        else:\r\n            s[i], s[j] = s[j], s[i]\r\n            i += 1\r\n            j -= 1\r\n    return \"\".join(s)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 131,
        "precondition": "s is a string.",
        "test_list": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ]
    },
    "132": {
        "specification": "Write a function to convert a tuple to a string.",
        "code": "def tup_string(tup):\r\n\treturn ''.join(tup)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 132,
        "precondition": "tup is a tuple of characters.",
        "test_list": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ]
    },
    "133": {
        "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "code": "def sum_negativenum(nums):\r\n  return sum(x for x in nums if x < 0)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 133,
        "precondition": "nums is a list of numbers.",
        "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ]
    },
    "135": {
        "specification": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n):\r\n    return (n*(2*n - 1))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 135,
        "precondition": "n is an integer.",
        "test_list": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ]
    },
    "137": {
        "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "code": "def zero_count(arr):\r\n    zero_count = len([x for x in arr if x == 0))\r\n    non_zero_count = len(arr) - zero_count\r\n    return non_zero_count / zero_count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 137,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ]
    },
    "138": {
        "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n):\r\n    while n != 0:\r\n        if n & 1:\r\n            return True\r\n        n = n >> 1\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 138,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ]
    },
    "139": {
        "specification": "Write a function to find the circumference of a circle.",
        "code": "import math\r\ndef circle_circumference(radius):\r\n    return 2 * math.pi * radius\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 139,
        "precondition": "radius is a positive real number.",
        "test_list": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ]
    },
    "140": {
        "specification": "Write a function to flatten the list of lists into a single set of numbers.",
        "code": "def extract_singly(nested\\_list):\n    result = set()\n    for i in nested_list:\n        if type(i) is list or type(i) is tuple:\n            result.update(extract_singly(i))\n        else:\n            result.add(i)\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 140,
        "precondition": "nested\\_list is a list of integers or lists or tuples.",
        "test_list": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ]
    },
    "141": {
        "specification": "Write a function to sort a list of elements.",
        "code": "def pancake_sort(input\\_list):\r\n    for i in range(len(input\\_list)):\r\n        max\\_index = input\\_list.index(max(input\\_list))\r\n        input\\_list.sort(slice(0, max\\_index))\r\n        input\\_list.sort(slice(max\\_index, len(input\\_list))))\r\n    return input\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 141,
        "precondition": "input\\_list is a list of comparable elements.",
        "test_list": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ]
    },
    "142": {
        "specification": "Write a function to count number items that are identical in the same position of three given lists.",
        "code": "def count_samepair(list1, list2, list3):\r\n    count = 0\r\n    for i in range(len(list1)):\r\n        if list1[i] == list2[i] and list2[i] == list3[i]:\r\n            count = count + 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 142,
        "precondition": "list1, list2, and list3 are lists of the same length.",
        "test_list": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ]
    },
    "143": {
        "specification": "Write a function to find number of lists present in the given tuple.",
        "code": "def find_lists(tup):\r\n    return tup.count(list)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 143,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ]
    },
    "145": {
        "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr):\r\n    return max(arr) - min(arr)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 145,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ]
    },
    "160": {
        "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "code": "def find_solution(a, b, n):\r\n    if (gcd(a, b) != 1):\r\n        return None\r\n    else:\r\n        x = 1\r\n        y = 1\r\n        while(x <= n):\r\n            if(n % a == x\r\n                and n - x % b == 0\r\n            ):\r\n                y = int((n - x) / b)\r\n                return (x, y)\r\n            x += 1\r\n        return None\n\ndef gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b, a % b)\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 160,
        "precondition": "a, b and n are integers such that a, b are not equal to 0.",
        "test_list": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ]
    },
    "161": {
        "specification": "Write a function to remove all elements from a given list present in another list.",
        "code": "def remove_elements(original_list, remove\\_list):\r\n    for i in remove\\_list:\r\n        while i in original\\_list:\r\n            original\\_list.remove(i)\r\n    return original\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 161,
        "precondition": "original\\_list and remove\\_list are both lists.",
        "test_list": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ]
    },
    "162": {
        "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "def sum_series(n):\r\n    sum = 0\r\n    for i in range(n//2 + 1):\r\n        sum += n - 2*i\r\n    return sum\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 162,
        "precondition": "n is an integer such that n >= 0.",
        "test_list": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ]
    },
    "163": {
        "specification": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "code": "import math\ndef area_polygon(n, s):\n\treturn (0.5 * n * s * s) / (math.tan(math.pi / n))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 163,
        "precondition": "n is a positive integer representing the number of sides, and s is a positive real number representing the length of a side.",
        "test_list": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ]
    },
    "164": {
        "specification": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "def divisors(n):\r\n    div = []\r\n    for i in range(1, int(n**0.5) + 1):\r\n        if n % i == 0:\r\n            div.append(i)\r\n            div.append(int(n / i))\r\n    return list(set(div))\r\n\r\ndef are_equivalent(num1, num2):\r\n    return sum(divisors(num1)) == sum(divisors(num2))\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 164,
        "precondition": "num1 and num2 are integers greater than or equal to 1.",
        "test_list": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ]
    },
    "165": {
        "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "def count_char_position(s):\r\n    count = 0\r\n    for i in range(len(s));\r\n        if s[i] >= 'a' and s[i] <= 'z':\r\n            if (ord(s[i]) - ord('a')) == i:\r\n                count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 165,
        "precondition": "s is a string.",
        "test_list": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ]
    },
    "166": {
        "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "code": "def find_even_pair(lst):\r\n    res = 0\r\n    for i in range(len(lst));\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 166,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ]
    },
    "167": {
        "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "code": "def next_power_of_2(n):\r\n    return 2**int(math.ceil(math.log2(n )))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 167,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ]
    },
    "168": {
        "specification": "Write a function to count the number of occurrences of a number in a given list.",
        "code": "def frequency(lst, num):\r\n  return lst.count(num)\r\n \nassert frequency([1,2,3], 4) == 0\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 168,
        "precondition": "lst is a list and num is a hashable object.",
        "test_list": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ]
    },
    "170": {
        "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "code": "def sum_range_list(lst, i, j)\r\n    return sum(lst[i:j+1])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 170,
        "precondition": "lst is a list of numbers, i and j are integers such that 0 <= i <= j < len(lst).",
        "test_list": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ]
    },
    "171": {
        "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "def perimeter_pentagon(l)\r\n    return 5*l\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 171,
        "precondition": "l is a positive real number.",
        "test_list": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ]
    },
    "172": {
        "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "code": "def count_occurance(str1):\r\n    return str1.count('std')\n",
        "total_tests": 5,
        "passed_tests": 5,
        "test_result": 1.0,
        "task_id": 172,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ]
    },
    "222": {
        "specification": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "def check_type(test\\_tup):\n    t = type(test\\_tup[0])\n    for i in test\\_tup:\n        if type(i) != t:\n            return False\n    return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 222,
        "precondition": "test\\_tup is a tuple.",
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ]
    },
    "223": {
        "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "def is_majority(arr, n, x):\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == x:\r\n            count += 1\r\n    if count > (n // 2):\r\n        return True\r\n    return False\n",
        "total_tests": 4,
        "passed_tests": 3,
        "test_result": 0.75,
        "task_id": 223,
        "precondition": "arr is a sorted list of integers, n is a non-negative integer such that 0 <= n <= len(arr), and x is an integer.",
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ]
    },
    "224": {
        "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "def count_Set_Bits(n):\r\n    count = 0\r\n    while (n):\r\n        n = n & (n-1)\r\n        count+=1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 224,
        "precondition": "n is an integer.",
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ]
    },
    "226": {
        "specification": "Write a python function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str1):\r\n    res = \"\"\r\n    for i in range(len(str1):\r\n        if i % 2 == 0:\r\n            res += str1[i]\r\n    return res\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 226,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ]
    },
    "227": {
        "specification": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a,b,c):\r\n    if a<b and a<c:\r\n        return a\r\n    elif b<c:\r\n        return b\r\n    else:\r\n        return c\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 227,
        "precondition": "a, b, and c are real numbers.",
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ]
    },
    "228": {
        "specification": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(number, start, end):\r\n    clear_bits_mask = (2 ** end) - 1\r\n    clear_bits_mask = (clear_bits_mask - (2 ** (start - 1)))\r\n    if (number & clear_bits_mask) == clear_bits_mask:\r\n        return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 228,
        "precondition": "number is an integer, and start and end are integers such that 0 <= start <= end <= the number of bits in the binary representation of number.",
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ]
    },
    "229": {
        "specification": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "def re_arrange_array(arr, n):\r\n    neg, pos = [], []\r\n    for i in arr:\r\n        if i < 0:\r\n            neg.append(i)\r\n        elif i > 0:\r\n            pos.append(i)\r\n    ans = neg + pos\r\n    return ans[:n]\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 229,
        "precondition": "arr is a list of integers, and n is an integer such that 0 <= n <= len(arr).",
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ]
    },
    "230": {
        "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "def replace_blank(string, char)\r\n    result = string.replace(\" \",\"\"+char)+\"\"\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 230,
        "precondition": "string is a string, and char is a single character.",
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ]
    },
    "232": {
        "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "code": "from heapq import nlargest\ndef larg_nnum(numbers, n)\r\n    return list(nlargest(n, numbers))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 232,
        "precondition": "numbers is a list of comparable elements, and n is a positive integer such that 1 <= n <= len(numbers).",
        "test_list": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ]
    },
    "233": {
        "specification": "Write a function to find the lateral surface area of a cylinder.",
        "code": "import math\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 233,
        "precondition": "radius and height are positive real numbers.",
        "test_list": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ]
    },
    "234": {
        "specification": "Write a function to find the volume of a cube given its side length.",
        "code": "def volume_cube(side\\_length):\r\n    return side\\_length ** 3\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 234,
        "precondition": "side\\_length is a non-negative real number.",
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ]
    },
    "235": {
        "specification": "Write a python function to set all even bits of a given number.",
        "code": "def even_bit_set_number(n)\r\n    result = 0\r\n    while n > 0:\r\n        if n % 2 == 0:\r\n            result = result | (1 << 1)\r\n        n = n >> 1\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 235,
        "precondition": "n is an integer.",
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ]
    },
    "237": {
        "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "code": "def check_occurences(lst):\r\n    res = {}\n    for i in lst:\r\n        if lst.count(i) > 1:\r\n            if i in res:\r\n                res[i] += 1\r\n            else:\r\n                res[i] = 2\r\n        else:\r\n            if i in res:\r\n                continue\r\n            else:\r\n                res[i] = 1\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 237,
        "precondition": "lst is a list of tuples.",
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ]
    },
    "238": {
        "specification": "Write a python function to count the number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(string\r\n):\r\n\treturn sum([len(s) > 0 for s in [[string[i:j+1] for j in range(i,len(string))] for i in range(len(string))]]\r\n)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 238,
        "precondition": "string is a string.",
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ]
    },
    "239": {
        "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m, n):\r\n    mod = 1000000007\r\n    dp = [[0 for x in range(n)] for x in range(m)] \r\n    for j in range(1, m):\r\n        dp[j-1][0] = 1\r\n    for j in range(1, n)\r\n        for i in range(1, m):\r\n            dp[i-1][j] = (dp[i-1][j] + dp[i-2][j-1]) % mod\r\n            if i > 1:\r\n                dp[i-1][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\r\n    return dp[m-1][n-1]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 239,
        "precondition": "m and n are positive integers such that m >= 2 and n >= 1.",
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ]
    },
    "240": {
        "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "code": "def replace_list(lst1, lst2):\r\n    lst1[-1:] = lst2\n    return lst1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 240,
        "precondition": "lst1 and lst2 are lists.",
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ]
    },
    "242": {
        "specification": "Write a function to count the total number of characters in a string.",
        "code": "def count_charac(str1):\r\n  return len(str1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 242,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ]
    },
    "244": {
        "specification": "Write a python function to find the next perfect square greater than a given number.",
        "code": "import math\r\ndef next_Perfect_Square(n):\r\n    sqrt_n = math.isqrt(n)\r\n    return (sqrt_n + 1)**2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 244,
        "precondition": "n is an integer greater than or equal to 0.",
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ]
    },
    "245": {
        "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "import math\n\ndef max_sum(arr):\r\n    n = len(arr)\r\n    if n <= 1:\r\n        return arr[0]\r\n    inc = [1]*n\r\n    dec = [1]*n\r\n    inc_sum = [arr[0]]\r\n    dec_sum = [arr[n-1]]\r\n    for i in range(1, n):\r\n        for j in range(i)\r\n            if arr[j] < arr[i]\r\n                if inc[j] + 1 > inc[i]\r\n                    inc[i] = inc[j] + 1\r\n                    inc_sum[i] = inc_sum[j] + arr[i]\r\n        for j in range(n-1, i-1, -1):\r\n            if arr[j] > arr[i]\r\n                if dec[j] + 1 > dec[i]\r\n                    dec[i] = dec[j] + 1\r\n                    dec_sum[i] = dec_sum[j] + arr[i]\r\n    max_sum = inc_sum[n-1]\r\n    for i in range(n)\r\n        if dec_sum[i] + inc_sum[i-1] > max_sum\r\n            max_sum = dec_sum[i] + inc_sum[i-1]\r\n    return max_sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 245,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ]
    },
    "246": {
        "specification": "Write a function for computing square roots using the babylonian method.",
        "code": "def babylonian_squareroot(n):\r\n    root = n \r\n    while (root - n/root) > 0.00001:\r\n        root = (root + n/root)/2\r\n    return root\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 246,
        "precondition": "n is a non-negative floating point number.",
        "test_list": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ]
    },
    "247": {
        "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "def lps(str1):\r\n  X = len(str1)\r\n  L = [[0 for x in range(X)] for y in range(X)]\r\n  i = 0\r\n  cl = 1\r\n  for i in range(X\r\n    L[i][i] = 1\r\n  for i in range(X-1)\r\n    if str1[i] == str1[i+1]\r\n      L[i][i+1] = 2\r\n      cl = max(cl, 2)\r\n      i = i + 1\r\n    else:\r\n      L[i][i+1] = 0\r\n  for cl in range(3, X + 1):\r\n    for i in range(X - cl + 1):\r\n      j = i + cl - 1\r\n      if L[i+1][j-1] != 0 and str1[i] == str1[j]:\r\n        L[i][j] = L[i+1][j-1] + 2\r\n        cl = max(cl, j - i + 1)\r\n  return cl\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 247,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ]
    },
    "248": {
        "specification": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "code": "import math\ndef harmonic_sum(n):\n    return sum([1/i for i in range(2,n)])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 248,
        "precondition": "n is a positive integer such that n > 1.",
        "test_list": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ]
    },
    "249": {
        "specification": "Write a function to find the intersection of two arrays.",
        "code": "def intersection_array(arr1, arr2):\r\n    return list(set(arr1) & set(arr2))\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 249,
        "precondition": "arr1 and arr2 are lists of comparable elements.",
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ]
    },
    "250": {
        "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "code": "def count_X(tup, x):\r\n    return tup.count(x)\r\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 250,
        "precondition": "tup is a tuple and x is an element.",
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ]
    },
    "251": {
        "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "code": "def insert_element(lst, element):\r\n    return [element] + [x for pair in zip(lst, lst[1:]) for x in (element, *pair)]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 251,
        "precondition": "lst is a list and element is an object.",
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ]
    },
    "252": {
        "specification": "Write a python function to convert complex numbers to polar coordinates.",
        "code": "import cmath\r\ndef convert(c:\r\n    r = abs(c)\r\n    theta = cmath.phase(c)\r\n    return (r, theta)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 252,
        "precondition": "c is a complex number.",
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ]
    },
    "253": {
        "specification": "Write a python function that returns the number of integer elements in a given list.",
        "code": "def count_integer(lst):\r\n    return sum(isinstance(i, int) for i in lst)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 253,
        "precondition": "lst is a list.",
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ]
    },
    "255": {
        "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "code": "def combinations_colors(lst,n):\r\n  res = []\r\n  for i in range(len(lst)):\r\n    res.append((lst[i],))\r\n    for j in range(1, n):\r\n      res += [(lst[i],) * j]\r\n  return res\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 255,
        "precondition": "lst is a list of hashable elements, n is a non-negative integer such that 0 <= n <= len(lst)",
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ]
    },
    "256": {
        "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "import math\r\ndef count_Primes_nums(num):\r\n    count = 0\r\n    for i in range(2, num):\r\n        for j in range(2,int(math.sqrt(i)) + 1):\r\n            if i % j == 0:\r\n                break\r\n        else:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 256,
        "precondition": "num is an integer greater than or equal to 0.",
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ]
    },
    "257": {
        "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "code": "def swap_numbers(num1, num2):\r\n    return (num2, num1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 257,
        "precondition": "num1 and num2 are both numbers.",
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ]
    },
    "259": {
        "specification": "Write a function to maximize the given two tuples.",
        "code": "def maximize_elements(tup1, tup2):\r\n    res = []\r\n    for i in range(len(tup1):\r\n        if tup1[i][0] > tup2[i][0]\r\n            res.append(tup1[i])\\\n        elif tup1[i][0] < tup2[i][0]\r\n            res.append(tup2[i])\\\n        else\r\n            res.append((max(tup1[i][1], tup2[i][1]))\r\n    return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 259,
        "precondition": "tup1 and tup2 are tuples of equal length, where each element of the tuples is a list of two integers.",
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ]
    },
    "260": {
        "specification": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n):\r\n    if n == 1:\r\n        return 3\r\n    else:\r\n        i = 3\r\n        c = 0\r\n        while c < n:\r\n            if is\\_prime(i):\r\n                c = c + 1\r\n            i = i + 2\r\n        return i - 2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 260,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ]
    },
    "261": {
        "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(x/y for x, y in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 261,
        "precondition": "test\\_tup1 and test\\_tup2 are tuples of the same length, and all elements in test\\_tup2 are non-zero.",
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ]
    },
    "262": {
        "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "code": "def split_two_parts(lst, L):\r\n    return (lst[:L], lst[L:])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 262,
        "precondition": "lst is a list, and L is an integer such that 0 <= L <= len(lst).",
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ]
    },
    "264": {
        "specification": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(human_age):\r\n    if human_age <= 1:\r\n        return 15\r\n    else:\r\n        return 15 + (human_age - 1) * 7\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 264,
        "precondition": "human\\_age is an integer, representing the age of a dog in human years.",
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ]
    },
    "265": {
        "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "code": "def list_split(lst, n):\r\n\treturn [lst[i:n+i] for i in range(0,len(lst),n)]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 265,
        "precondition": "lst is a list and n is an integer such that 0 < n <= len(lst).",
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ]
    },
    "266": {
        "specification": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "import math\ndef lateralsurface_cube(side\\_length:\r\n    return 4 \\* side\\_length ** 2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 266,
        "precondition": "side\\_length is a positive real number.",
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ]
    },
    "267": {
        "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "def square_sum(n):\r\n    sum = 0\r\n    for i in range(1, n*2, 2):\r\n        sum += i*i\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 267,
        "precondition": "n is an integer.",
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ]
    },
    "268": {
        "specification": "Write a function to find the n'th star number.",
        "code": "def find_digit_sum(n):\r\n    sum = 0\r\n    while n > 0:\r\n        sum += n % 10\r\n        n = int(n / 10)\r\n    return sum\r\n\r\ndef find_star_num(n):\r\n    count = 1\r\n    i = 10\r\n    while n > count:\r\n        i += 1\r\n        if find_digit_sum(i) == find_digit_sum(count):\r\n            count += 1\r\n        else:\r\n            count = 1\r\n    return i\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 268,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ]
    },
    "269": {
        "specification": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(char):\r\n    return ord(char)\r\nassert ascii_value('A')==65\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 269,
        "precondition": "char is a single character.",
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ]
    },
    "270": {
        "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
        "code": "def sum_even_and_even_index(lst):\r\n    return sum(i for i in lst[::2] if i % 2 == 0)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 270,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ]
    },
    "271": {
        "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "def even_Power_Sum(n):\r\n    result = 0\r\n    for i in range(1, n*2 + 1, 2):\r\n        result += i**5\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 271,
        "precondition": "n is an integer.",
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ]
    },
    "272": {
        "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "code": "def rear_extract(tup_list):\r\n    return [x[2] for x in tup_list]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 272,
        "precondition": "tup\\_list is a list of tuples, where each tuple contains at least 3 elements.",
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ]
    },
    "273": {
        "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "def substract_elements(tup1, tup2):\r\n    res = ()\r\n    for i in range(len(tup1):\r\n        res += (tup1[i] - tup2[i]),\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 273,
        "precondition": "tup1 and tup2 are tuples with the same length.",
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ]
    },
    "274": {
        "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "def binomial_coefficient(n, k):\r\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\r\n\r\ndef even_index_binomial_coeffs(n):\r\n    res = 0\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            res += binomial_coefficient(n, i)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 274,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ]
    },
    "276": {
        "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "code": "import math\n\ndef volume_cylinder(radius, height)\r\n  return math.pi * (radius ** 2) * height\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 276,
        "precondition": "radius and height are non-negative real numbers.",
        "test_list": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ]
    },
    "277": {
        "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "code": "def dict_filter(dic, n):\r\n    return {k: v for k, v in dic.items() if v >= n}\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 277,
        "precondition": "dic is a dictionary and n is an integer.",
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ]
    },
    "278": {
        "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "code": "def count_first_elements(tup):\r\n    count = 0\r\n    for i in tup:\r\n        if type(i) is not tuple:\r\n            count += 1\r\n        else:\r\n            count += 1\r\n            break\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 278,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ]
    },
    "279": {
        "specification": "Write a function to find the nth decagonal number.",
        "code": "def num_decagonal(n):\r\n    return (n*(3*n - 1))/2\r\nassert num_decagonal(3) == 27\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 279,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ]
    },
    "280": {
        "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "def sequential_search(arr, el):\n    result = [False, -1]\r\n    for i in range(len(arr))\r\n        if el == arr[i\u2d49]\r\n            result = [True, i]\r\n    return tuple(result)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 280,
        "precondition": "arr is a list of elements and el is an element.",
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ]
    },
    "281": {
        "specification": "Write a python function to check if the elements of a given list are unique or not.",
        "code": "def all_unique(lst):\r\n    return len(lst) == len(set(lst))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 281,
        "precondition": "lst is a list.",
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ]
    },
    "282": {
        "specification": "Write a function to subtract two lists element-wise.",
        "code": "def sub_list(list1, list2):\r\n    result = [i - j for i, j in zip(list1, list2)]\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 282,
        "precondition": "list1 and list2 are lists of the same length.",
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ]
    },
    "283": {
        "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "def validate(n):\r\n    freq = [0 for x in range(10)] \r\n    while n > 0:\r\n        freq[n % 10] += 1 \r\n        n = n // 10 \r\n    for i in range(10):\r\n        if freq[i] > i:\r\n            return False \r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 283,
        "precondition": "n is an integer.",
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ]
    },
    "284": {
        "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "code": "def check_element(list1, element)\r\n    if all(x == element for x in list1):\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 284,
        "precondition": "list1 is a list and element is an object.",
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ]
    },
    "285": {
        "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "def text_match_two_three(text:\r\n    import re\r\n    result = bool(re.search(r'(a[b]{2,3})', text))\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 285,
        "precondition": "text is a string.",
        "test_list": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ]
    },
    "286": {
        "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(arr, k, n)\r\n    rep_arr = [[0 for x in range(n)] for x in range(k)] \r\n    for i in range(k):\r\n        for j in range(n):\r\n            rep_arr[i][j] = arr[j]\r\n    for i in range(1, k):\r\n        for j in range(n):\r\n            rep_arr[i][j] = rep_arr[i-1][j]\r\n    for j in range(n):\r\n        rep_arr[0][j] = rep_arr[k-1][j]\r\n    max_sum = -1\r\n    for i in range(k\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 286,
        "precondition": "arr is a list of integers, k is a positive integer, and n is the length of the list arr.",
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ]
    },
    "287": {
        "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += (2*i)**2\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 287,
        "precondition": "n is an integer.",
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ]
    },
    "290": {
        "specification": "Write a function to find the list of maximum length in a list of lists.",
        "code": "def max_length(lst\\_of\\_lists):\r\n    max\\_length = max(len(i) for i in lst_of_lists)\r\n    result = [i for i in lst_of_lists if len(i) == max_length]\r\n    return max\\_length, result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 290,
        "precondition": "lst\\_of\\_lists is a list of lists.",
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ]
    },
    "291": {
        "specification": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k)\r\n\tif n == 1:\r\n\t\treturn k\r\n\tif n == 2:\r\n\t\treturn k * k\r\n\treturn (k * k + (k - 1) * (k - 1)) * (n - 1)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 291,
        "precondition": "n and k are non-negative integers such that n >= 1.",
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ]
    },
    "292": {
        "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "def find(num1, num2):\r\n   return num1 // num2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 292,
        "precondition": "num1 and num2 are integers, and num2 is non-zero.",
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ]
    },
    "293": {
        "specification": "Write a function to find the third side of a right angled triangle.",
        "code": "import math\r\ndef otherside_rightangle(a, b):\r\n    return math.sqrt(a**2 + b**2)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 293,
        "precondition": "a and b are positive real numbers (i.e., a > 0 and b > 0).",
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ]
    },
    "294": {
        "specification": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "def max_val(lst):\r\n    return max(lst)\r\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 294,
        "precondition": "lst is a list containing at least one element.",
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ]
    },
    "295": {
        "specification": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(n):\r\n\tsum = 0\r\n\tfor i in range(1, n + 1):\r\n\t\tif n % i == 0:\r\n\t\t\tsum += i\r\n\treturn sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 295,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ]
    },
    "296": {
        "specification": "Write a python function to count inversions in an array.",
        "code": "def get_Inv_Count(arr):\r\n    if len(arr) <= 1:\r\n        return 0\r\n    n = len(arr)\r\n    return merge_sort(arr, 0, n-1)\r\n\r\ndef merge_sort(arr, left, right):\r\n    if left < right:\r\n        mid = (left + right)//2\r\n        countLeft = merge_sort(arr, left, mid)\r\n        countRight = merge_sort(arr, mid+1, right)\r\n        countMerge = merge(arr, left, mid, right)\r\n        return countLeft + countRight + countMerge\r\n    return 0\r\n\r\ndef merge(arr, left, mid, right):\r\n    n1 = mid - left + 1\r\n    n2 = right - mid\r\n\r\n    L = [0]*n1\r\n    R = [0]*n2\r\n\r\n    for i in range(0, n1):\r\n        L[i] = arr[left + i]\r\n\r\n    for i in range(0, n2):\r\n        R[i] = arr[mid + 1 + i]\r\n\r\n    i = 0\r\n    j = 0\r\n    k = left\r\n    inv_count = 0\r\n\r\n    while i < n1 and j < n2:\r\n        if L[i] <= R[jwidetext]:\r\n            arr[k] = L[i]\r\n            i += 1\r\n        else:\r\n            arr[k] = R[j]\r\n            j += 1\r\n            inv_count += n1 - i\r\n        k += 1\r\n\r\n    while i < n1:\r\n        arr[k] = L[i]\r\n        i += 1\r\n        k += 1\r\n\r\n    while j < n2:\r\n        arr[k] = R[j]\r\n        j += 1\r\n        k += 1\r\n\r\n    return inv_count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 296,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ]
    },
    "297": {
        "specification": "Write a function to flatten a given nested list structure.",
        "code": "def flatten_list(nested\\_list):\r\n    flat\\_list = []\r\n    for sublist in nested\\_list:\r\n        if type(sublist) is list:\r\n            flat\\_list += flatten\\_list(sublist)\r\n        else:\r\n            flat\\_list.append(sublist)\r\n    return flat\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 297,
        "precondition": "nested\\_list is a list.",
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ]
    },
    "299": {
        "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "def max_aggregate(tuples\\_list):\r\n\tmax\\_val = -1\r\n\tmax\\_key = \"\"\r\n\tfor t in tuples\\_list:\r\n\t\tif t[1] > max\\_val:\\\n\t\t\tmax\\_val = t[1\\[\r\n\t\t\tmax\\_key = t[0]\r\n\treturn (max\\_key, max\\_val)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 299,
        "precondition": "tuples\\_list is a list of tuples, where each tuple contains two elements: a string and a number. The numbers are comparable using the '>' operator.",
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ]
    },
    "300": {
        "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code": "import math\nmemo = {}\ndef dp(n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n in memo:\n        return memo[n]\n    memo[n] = dp(n-1) + dp(n-2)\n    return memo[n]\ndef count_binary_seq(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * dp(n - 1)\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 300,
        "precondition": "n is an integer greater than or equal to 0.",
        "test_list": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ]
    },
    "301": {
        "specification": "Write a function to find the depth of a dictionary.",
        "code": "def dict_depth(dic, depth=1): \r\n    max_depth = depth \r\n    for key, value in dic.items(): \r\n        if isinstance(value, dict): \r\n            inner_depth = dict_depth(value, depth+1) \r\n            if inner_depth > max_depth:\r\n                max_depth = inner_depth \r\n    return max_depth\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 301,
        "precondition": "dic is a dictionary, and depth is an integer.",
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ]
    },
    "304": {
        "specification": "Write a python function to find element at a given index after number of rotations.",
        "code": "def find_Element(arr,indx,nrotaions):\r\n    for i in range(nrotaions):\r\n        first = arr[0]\r\n        for j in range(1,len(arr)-1):\r\n            arr[j-1] = arr[j]\r\n        arr[-1] = first\r\n    return arr[indx]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 304,
        "precondition": "arr is a non-empty list of integers, indx is an integer such that 0 <= indx < len(arr), and nrotaions is an integer.",
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ]
    },
    "305": {
        "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
        "code": "def start_withp(list_str):\r\n    res = []\r\n    for i in list_str:\r\n        if i[0] == 'p' or i[0] == 'P':\r\n            res.append(i.split()[0])\r\n    return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 305,
        "precondition": "list\\_str is a list of strings.",
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ]
    },
    "306": {
        "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "code": "def max_sum_increasing_subseq(prefix, i, k, n):\n    if i >= n or k >= n:\n        return 0\n    else:\n        inc = [prefix[j] for j in range(i, k) if prefix[j] < prefix[k]]\n        excl = max_sum_increasing_subseq(prefix, i, k+1, n)\n        return max(sum(inc), excl)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 306,
        "precondition": "prefix is a list of integers, i and k are integers such that 0 <= i <= k < n, and n is an integer such that 0 <= n <= len(prefix).",
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ]
    },
    "307": {
        "specification": "Write a function to get a colon of a tuple.",
        "code": "def colon_tuplex(tuplex, index, value):\r\n    res = list(tuplex)\r\n    res[index] = value\r\n    return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 307,
        "precondition": "tuplex is a tuple, index is an integer such that 0 <= index < len(tuplex), and value is any Python object.",
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ]
    },
    "308": {
        "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "code": "def large_product(num1, num2, k):\r\n\tnum1.sort()\r\n\tnum2.sort()\r\n\tres = []\r\n\tfor i in range(len(num1)-1, -1, -1):\r\n\t\tfor j in range(len(num2)-1, -1, -1):\r\n\t\t\tif len(res) == k:\r\n\t\t\t\treturn res\r\n\t\t\telse:\r\n\t\t\t\tres.append(num1[i]*num2[j])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 308,
        "precondition": "num1 and num2 are lists of integers, and k is a non-negative integer such that 0 <= k <= len(num1) * len(num2).",
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ]
    },
    "309": {
        "specification": "Write a python function to find the maximum of two numbers.",
        "code": "def maximum(x,y):\r\n    if x > y:\r\n        return x\r\n    else:\r\n        return y\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 309,
        "precondition": "x and y are real numbers.",
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ]
    },
    "310": {
        "specification": "Write a function to convert a given string to a tuple of characters.",
        "code": "def string_to_tuple(str1):\r\n    return tuple(str1)\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 310,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ]
    },
    "311": {
        "specification": "Write a python function to set the left most unset bit.",
        "code": "def set_left_most_unset_bit(n)\r\n    return (n | (n & -n))\n\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 311,
        "precondition": "n is an integer.",
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ]
    },
    "312": {
        "specification": "Write a function to find the volume of a cone.",
        "code": "import math\ndef volume_cone(radius, height):\n   return (1/3.0) * math.pi * (radius * radius) * height\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 312,
        "precondition": "radius and height are positive real numbers.",
        "test_list": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ]
    },
    "388": {
        "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code": "import math\r\ndef highest_Power_of_2(n):\r\n    result = 2\r\n    while ((result) < (n));\r\n        result = 2 * (result)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 388,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ]
    },
    "389": {
        "specification": "Write a function to find the n'th lucas number.",
        "code": "def lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return lucas(n-1) + lucas(n-2)\r\ndef find_lucas(n):\r\n    return lucas(n-1)\r\nassert find_lucas(9) == 76\r\nprint(\"Test passed\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 389,
        "precondition": "n is an integer greater than or equal to 0.",
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ]
    },
    "390": {
        "specification": "Write a function to apply a given format string to all of the elements in a list.",
        "code": "def add_string(lst, fmt\\_str):\r\n    return [fmt\\_str.format(i) for i in lst]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 390,
        "precondition": "lst is a list and fmt\\_str is a format string that can be used to format the elements in the list.",
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ]
    },
    "391": {
        "specification": "Write a function to convert more than one list to nested dictionary.",
        "code": "def convert_list_dictionary(keys, values, inner\\_values):\r\n\tresult = []\r\n\tfor i in range(len(keys)):\r\n\t\tresult.append({keys[i]: {values[i]: inner\\_values[i]}})\r\n\treturn result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 391,
        "precondition": "keys, values, and inner\\_values are all lists of the same length.",
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ]
    },
    "392": {
        "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "def get_max_sum(n):\r\n    dp = [0]*(n+1)\r\n    dp[0] = 0\r\n    dp[1] = 0\r\n    for i in range(2, n+1):\r\n        dp[i] = 1 + max(dp[int(i/2)], dp[int(i/3)], dp[int(i/4)], dp[int(i/5)])\r\n    return dp[n]\r\nget_max_sum(60)\r\nassert get_max_sum(60) == 106\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 392,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ]
    },
    "393": {
        "specification": "Write a function to find the list with maximum length.",
        "code": "def max_length_list(lists:\r\n    max_len = 0\r\n    result = []\r\n    for i in lists:\r\n        if len(i) > max_len:\r\n            max_len = len(i)\r\n            result = i\r\n    return max_len, result\r\n)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 393,
        "precondition": "lists is a list of lists.",
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ]
    },
    "394": {
        "specification": "Write a function to check if given tuple contains no duplicates.",
        "code": "def check_distinct(tup):\r\n    return len(tup) == len(set(tup))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 394,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ]
    },
    "395": {
        "specification": "Write a python function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(str1):\r\n    for i in str1:\r\n        if str1.count(i) == 1:\r\n            return i\r\n    return None\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 395,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ]
    },
    "396": {
        "specification": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "def check_char(string):\r\n    start = string[0]\r\n    if len(string) > 0:\r\n        if start == string[-1\u7f00]\r\n            return \"Valid\"\r\n    return \"Invalid\"\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 396,
        "precondition": "string is a string.",
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ]
    },
    "397": {
        "specification": "Write a function to find the median of three numbers.",
        "code": "def median_numbers(*args)\r\n    args = sorted(args)\r\n    length = len(args)\r\n    if length == 1:\r\n        return args[0]\r\n    if length % 2 == 0:\r\n        median1 = args[length // 2]\r\n        median2 = args[length // 2 - 1]\r\n        return (median1 + median2)/2\r\n    else:\r\n        return args[length // 2]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 397,
        "precondition": "args is a variable number of arguments, and the length of args is at least 1 and at most 3. Each element of args is a real number.",
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ]
    },
    "398": {
        "specification": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "def sum_of_digits(numbers):\r\n\tsum = 0\r\n\tfor i in numbers:\r\n\t\tdigits = [int(digit) for digit in str(i)]\r\n\t\tsum += sum(digits)\r\n\treturn sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 398,
        "precondition": "numbers is a list of integers.",
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ]
    },
    "399": {
        "specification": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "def bitwise_xor(tup1, tup2):\r\n    res = ()\r\n    for i, j in zip(tup1, tup2):\r\n        res += (i ^ j,)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 399,
        "precondition": "tup1 and tup2 are tuples of integers of the same length.",
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ]
    },
    "400": {
        "specification": "Write a function to extract the number of unique tuples in the given list.",
        "code": "def extract_freq(lst):\r\n    return len(set(tuple(sorted(t)) for t in lst))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 400,
        "precondition": "lst is a list of tuples.",
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ]
    },
    "401": {
        "specification": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code": "def add_nested_tuples(tup1, tup2):\r\n    res = []\r\n    for t1, t2 in zip(tup1, tup2):\r\n        res.append(tuple(map(sum, zip(t1, t2))))\r\n    return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 401,
        "precondition": "tup1 and tup2 are two nested tuples of the same size.",
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ]
    },
    "404": {
        "specification": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(num1, num2):\r\n    if num1 <= num2:\r\n        return num1\r\n    else:\r\n        return num2\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 404,
        "precondition": "num1 and num2 are real numbers.",
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ]
    },
    "405": {
        "specification": "Write a function to check whether an element exists within a tuple.",
        "code": "def check_tuplex(tup, x):\r\n  if x in tup:\r\n    return True\r\n  else:\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 405,
        "precondition": "tup is a tuple and x is an object.",
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ]
    },
    "406": {
        "specification": "Write a python function to find whether the parity of a given number is odd.",
        "code": "def find_Parity(n):\r\n    return n % 2 != 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 406,
        "precondition": "n is an integer.",
        "test_list": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ]
    },
    "407": {
        "specification": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n):\r\n    num_str = str(n)\r\n    num_list = list(map(int,num_str))\r\n    num_list.sort()\r\n    while True:\r\n        num_list.reverse()\r\n        if num_list > list(map(int,str(int(\"\".join(map(str,num_list))))):\r\n            break\r\n        else:\r\n            num_list.pop()\r\n    return int(\"\".join(map(str,num_list))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 407,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ]
    },
    "408": {
        "specification": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "def k_smallest_pairs(arr1, arr2, k):\r\n    result = []\r\n    if len(arr1) == 0 or len(arr2) == 0:\r\n        return result\r\n    import heapq\r\n    pair = [(arr1[0] + arr2[0], 0, 0)]\r\n    visited = [[False for x in range(len(arr2))] for x in range(len(arr1))]\r\n    while len(result) < k and pair:\r\n        s, i, j = heapq.heappop(pair)\r\n        if not visited[i][j]:\r\n            visited[i][j] = True\r\n            result.append([arr1[i], arr2[j]])\r\n            if j < len(arr2) - 1:\r\n                heapq.heappush(pair, (arr1[i] + arr2[j + 1], i, j + 1))\r\n            if i < len(arr1) - 1:\r\n                heapq.heappush(pair, (arr1[i + 1] + arr2[j], i + 1, j))\r\n    return result\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 408,
        "precondition": "arr1 and arr2 are lists of integers, k is a non-negative integer such that 0 <= k <= len(arr1) * len(arr2).",
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ]
    },
    "409": {
        "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "def min_product_tuple(lst): \r\n\tmin_product = float('inf')\r\n\tfor i, j in lst:\r\n\t\tproduct = i[0]*j[0]\r\n\t\tif product < min_product:\r\n\t\t\tmin_product = product\r\n\treturn min_product\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 409,
        "precondition": "lst is a list of tuples, where each tuple contains at least one integer.",
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ]
    },
    "410": {
        "specification": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "def min_val(lst):\r\n\tmin_val = lst[0]\r\n\tfor i in lst:\r\n\t\tif type(i) == int or type(i) == float:\r\n\t\t\tif i < min\\_val:\r\n\t\t\t\tmin\\_val = i\r\n\treturn min\\_val\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 410,
        "precondition": "lst is a list containing heterogeneous elements, where at least one element is either an integer or a float.",
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ]
    },
    "411": {
        "specification": "Write a function to convert the given snake case string to camel case string.",
        "code": "def snake_to_camel(snake\\_string):\r\n    words = snake\\_string.split(\"_\")\r\n    camel\\_string = \"\".join(x.capitalize() for x in words)\r\n    return camel\\_string\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 411,
        "precondition": "snake\\_string is a string.",
        "test_list": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ]
    },
    "412": {
        "specification": "Write a python function to remove odd numbers from a given list.",
        "code": "def remove_odd(input\\_list):\r\n    return [i for i in input_list if i % 2 == 0]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 412,
        "precondition": "input\\_list is a list of integers.",
        "test_list": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ]
    },
    "413": {
        "specification": "Write a function to extract the nth element from a given list of tuples.",
        "code": "def extract_nth_element(list_of_tuples, n):\r\n    res = [x[n] for x in list_of_tuples]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 413,
        "precondition": "list\\_of\\_tuples is a list of tuples, and n is a non-negative integer such that 0 <= n < length of the tuples.",
        "test_list": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ]
    },
    "414": {
        "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "code": "def overlapping(seq1, seq2):\r\n    for i in seq1:\r\n        if i in seq2:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 414,
        "precondition": "seq1 and seq2 are sequences (e.g. lists, tuples, or strings).",
        "test_list": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ]
    },
    "415": {
        "specification": "Write a python function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(numbers:\r\n    if len(numbers) < 2:\r\n        return None\r\n    else:\r\n        max\\_product = (numbers[0], numbers[1\\] )\r\n        for i in range(len(numbers\\])-1):\r\n            for j in range(i+1, len(numbers)\r\n                if numbers[i] * numbers[j] > max_product[0] * max_product[1\\]:\r\n                    max_product = (numbers[i], numbers[j\\])\r\n        return max_product\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 415,
        "precondition": "numbers is a list of integers, and its length is greater than or equal to 2.",
        "test_list": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ]
    },
    "417": {
        "specification": "Write a function to find common first element in given list of tuple.",
        "code": "def group_tuples(lst)\r\n    res = [] /***/\n    for i in lst:\r\n        if res == []:\r\n            res.append(list(set(i)))\r\n        else:\r\n            flag = 0 /***/\n            for j in res:\r\n                if i[0] in j:\r\n                    j.append(i[1]) /***/\n                    flag = 1 /***/\n                    break /***/\n            if flag == 0:\r\n                res.append(list(set(i)))\r\n    for i in res:\r\n        for j in range(len(i)-1):\r\n            if i[j] > i[j+1]:\r\n                i[j], i[j+1] = i[j+1], i[j]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 417,
        "precondition": "lst is a list of tuples with at most two elements, where the first element of each tuple is a hashable object.",
        "test_list": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ]
    },
    "418": {
        "specification": "Write a python function to find the element of a list having maximum length.",
        "code": "def Find_Max(lst):\r\n    return max(lst, key = len)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 418,
        "precondition": "lst is a list of non-empty lists.",
        "test_list": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ]
    },
    "419": {
        "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "def round_and_sum(lst):\r\n    rounded_list = [round(i) for i in lst]\r\n    total_sum = sum(rounded_list)\\\n    result = total_sum * len(rounded_list)\r\n    print(result)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 419,
        "precondition": "lst is a list of numbers.",
        "test_list": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ]
    },
    "420": {
        "specification": "Write a python function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        if i % 2 == 0:\r\n            sum += i ** 3\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 420,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ]
    },
    "421": {
        "specification": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "def concatenate_tuple(tup, delimiter='-'):\n    res = delimiter.join(str(i) for i in tup)\n    return (res)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 421,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ]
    },
    "422": {
        "specification": "Write a python function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n):\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        sum += i**3\r\n    avg = sum/n\r\n    return avg\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 422,
        "precondition": "n is an integer greater than or equal to 1.",
        "test_list": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ]
    },
    "424": {
        "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "def extract_rear(tup)\r\n    res = tuple(i[-1:] for i in tup)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 424,
        "precondition": "tup is a tuple of non-empty strings.",
        "test_list": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ]
    },
    "425": {
        "specification": "Write a function to count the number of sublists containing a particular element.",
        "code": "def count_element_in_list(lst, num):\r\n    return sum([num in sub for sub in lst]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 425,
        "precondition": "lst is a list of lists or tuples, and num is an element that can be compared using the 'in' operation with elements of lst.",
        "test_list": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ]
    },
    "426": {
        "specification": "Write a function to filter odd numbers.",
        "code": "def filter_oddnumbers(numbers):\r\n    res = [x for x in numbers if x % 2 != 0]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 426,
        "precondition": "numbers is a list of integers.",
        "test_list": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ]
    },
    "427": {
        "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "import datetime\r\ndef change_date_format(d):\r\n    dt = datetime.datetime.strptime(d, \"%Y-%m-%d\")\r\n    return dt.strftime(\"%d-%m-%Y\")\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 427,
        "precondition": "d is a string representing a date in yyyy-mm-dd format.",
        "test_list": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ]
    },
    "428": {
        "specification": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(arr,\r\n    gap = len(arr)//2\r\n):\r\n    while gap > 0:\r\n        for i in range(gap, len(arr), gap):\r\n            anchor = arr[i]\r\n            j = i\r\n            while j >= gap and arr[j - gap] > anchor:\r\n                arr[j] = arr[j - gap]\r\n                j -= gap\r\n            arr[j] = anchor\r\n        gap //= 2\r\n    return arr\r\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 428,
        "precondition": "arr is a list of comparable elements.",
        "test_list": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ]
    },
    "429": {
        "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n\r\n# Test the function\r\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 429,
        "precondition": "test\\_tup1 and test\\_tup2 are tuples of equal length.",
        "test_list": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ]
    },
    "430": {
        "specification": "Write a function to find the directrix of a parabola.",
        "code": "def parabola_directrix(h, k, p):\r\n    return k - p\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 430,
        "precondition": "h, k, and p are real numbers, and p is not equal to 0.",
        "test_list": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ]
    },
    "431": {
        "specification": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\r\n    if len(set(list1) & set(list2)) > 0:\r\n        return True\r\n    return False\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 431,
        "precondition": "list1 and list2 are lists.",
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ]
    },
    "432": {
        "specification": "Write a function to find the median length of a trapezium.",
        "code": "def median_trapezium(a, b, c)\r\n    if a + b != c:\r\n        raise Exception(\"a + b should be equal to c\")\r\n    else:\r\n        return (a + b) / 2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 432,
        "precondition": "a, b, and c are non-negative real numbers such that a, b, and c form a trapezium (i.e. a and b are the lengths of the parallel sides and c is the length of the non-parallel side).",
        "test_list": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ]
    },
    "433": {
        "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, num):\r\n    return max(arr) < num\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 433,
        "precondition": "arr is a list of integers and num is an integer.",
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ]
    },
    "434": {
        "specification": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import re\ndef text_match_one(text):\n    pattern = re.compile(r'ab+')\n    return bool(pattern.search(text))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 434,
        "precondition": "text is a string.",
        "test_list": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ]
    },
    "435": {
        "specification": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n):\r\n    return abs(n) % 10\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 435,
        "precondition": "n is an integer.",
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ]
    },
    "436": {
        "specification": "Write a python function to return the negative numbers in a list.",
        "code": "def neg_nos(list1)\r\n    return [x for x in list1 if x < 0]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 436,
        "precondition": "list1 is a list of integers.",
        "test_list": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ]
    },
    "437": {
        "specification": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(string):\r\n    res = \"\"\r\n    for char in string:\r\n        if int(ord(char)) % 2 == 0:\r\n            res += char\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 437,
        "precondition": "string is a string.",
        "test_list": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ]
    },
    "438": {
        "specification": "Write a function to count bidirectional tuple pairs.",
        "code": "def count_bidirectional(lst):\r\n\tx = 0\r\n\tfor i in range(len(lst));\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 438,
        "precondition": "lst is a list of tuples where each tuple contains only hashable objects.",
        "test_list": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ]
    },
    "439": {
        "specification": "Write a function to join a list of multiple integers into a single integer.",
        "code": "def multiple_to_single(list\\_in):\r\n    result = \"\"\r\n    for i in list\\_in:\r\n        result += str(i)\r\n    return int(result)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 439,
        "precondition": "list\\_in is a list of integers.",
        "test_list": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ]
    },
    "440": {
        "specification": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "import re\r\ndef find_adverb_position(sentence):\r\n    adverbs = [\"abruptly\", \"actually\", \"almost\", \"already\", \"always\", \"almost\", \"also\", \"also\", \"always\", \"annually\", \"another\", \"anybody\", \"anyhow\", \"anymore\", \"anyone\", \"anything\", \"anyway\", \"anywhere\", \"are\", \"are\", \"aren't\", \"around\", \"as\", \"ask\", \"asking\", \"at\", \"away\", \"barely\", \"because\", \"been\", \"before\", \"behind\", \"being\", \"below\", \"beside\", \"between\", \"beyond\", \"both\", \"but\", \"by\", \"can\", \"cannot\", \"can't\", \"cause\", \"causes\", \"certainly\", \"clearly\", \"come\", \"could\", \"couldn't\", \"did\", \"didn't\", \"do\", \"does\", \"doesn't\", \"doing\", \"don't\", \"down\", \"during\", \"each\", \"early\", \"either\", \"enough\", \"ever\", \"every\", \"everybody\", \"everyone\", \"everything\", \"except\", \"fairly\", \"finally\", \"for\", \"formerly\", \"from\", \"further\", \"get\", \"give\", \"go\", \"had\", \"hadn't\", \"has\", \"hasn't\", \"have\", \"haven't\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hereafter\", \"hereby\", \"herein\", \"hereto\", \"hereupon\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"however\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"isn't\", \"it\", \"it'd\", \"it'll\", \"it's\", \"its\", \"itself\", \"just\", \"keep\", \"keeps\", \"kind\", \"last\", \"later\", \"least\", \"let\", \"let's\", \"like\", \"likely\", \"may\", \"might\", \"mightn't\", \"most\", \"mostly\", \"must\", \"my\", \"myself\", \"need\", \"neither\", \"never\", \"nevertheless\", \"next\", \"no\", \"nobody\", \"nonetheless\", \"noone\", \"not\", \"nothing\", \"now\", \"nowhere\", \"off\", \"off of\", \"often\", \"on\", \"once\", \"one\", \"only\", \"onto\", \"or\", \"other\", \"others\", \"otherwise\", \"over\", \"per\", \"rather\", \"reciprocally\", \"regarding\", \"respectively\", \"right\", \"said\", \"same\", \"see\", \"seem\", \"seemed\", \"seeming\", \"seems\", \"serious\", \"several\", \"shall\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"shouldn't\", \"since\", \"six\", \"so\", \"some\", \"somebody\", \"somehow\", \"someone\", \"something\", \"sometime\", \"sometimes\", \"somewhere\", \"still\", \"such\", \"take\", \"taken\", \"than\", \"that\", \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"thereafter\", \"thereby\", \"therefore\", \"therein\", \"thereupon\", \"these\", \"they\", \"they'd\", \"they'll\", \"they're\", \"they've\", \"this\", \"those\", \"though\", \"through\", \"throughout\", \"thru\", \"thus\", \"to\", \"together\", \"too\", \"toward\", \"towards\", \"under\", \"underneath\", \"undoing\", \"undo\", \"unless\", \"unlike\", \"until\", \"up\", \"upon\", \"upward\", \"us\", \"very\", \"via\", \"was\", \"wasn't\", \"we\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"welcome\", \"well\", \"were\", \"weren't\", \"what\", \"what's\", \"when\", \"whence\", \"whenever\", \"where\", \"where's\", \"whereafter\", \"whereas\", \"whereby\", \"wherein\", \"whereupon\", \"wherever\", \"whether\", \"which\", \"while\", \"whither\", \"who\", \"who's\", \"whole\", \"whom\", \"whose\", \"why\", \"will\", \"with\", \"within\", \"without\", \"would\", \"wouldn't\", \"yes\", \"yet\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\"]\r\n\r\n    words = re.findall(r'\\w+', sentence)\r\n    adverb\\_pos = []\r\n    for i in range(len(words))\r\n        if words[i] in adverbs:\r\n            adverb\\_pos.append((i, words[i]))\r\n    return adverb\\_pos\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 440,
        "precondition": "sentence is a string representing an English sentence.",
        "test_list": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ]
    },
    "441": {
        "specification": "Write a function to find the surface area of a cube of a given size.",
        "code": "import math\r\ndef surfacearea_cube(size):\r\n    return 6*(size**2)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 441,
        "precondition": "size is a non-negative integer.",
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ]
    },
    "442": {
        "specification": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "def positive_count(numbers):\r\n    positive = 0\r\n    for num in numbers:\r\n        if num > 0:\r\n            positive += 1\r\n    return positive/len(numbers)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 442,
        "precondition": "numbers is a list of integers.",
        "test_list": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ]
    },
    "443": {
        "specification": "Write a python function to find the largest negative number from the given list.",
        "code": "def largest_neg(lst):\r\n    res = max(filter(lambda x: x < 0, lst))\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 443,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ]
    },
    "444": {
        "specification": "Write a function to trim each tuple by k in the given tuple list.",
        "code": "def trim_tuple(lst, k)\r\n    return tuple(t[k:] for t in lst)\r\n\r\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) ==  ( (2, 1, 4), (9, 2, 1), (2, 3, 5), (2, 1, 7) )\r\nassert trim_tuple([(1, 2, 3), (4, 5, 6)], 1) ==  ( (2, 3), (5, 6) )\r\nassert trim_tuple([(1, 2, 3), (4,)], 1) ==  ( (2, 3), (4,) )\r\nassert trim_tuple([(1,), (4,)], 1) ==  ( (), ())\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 444,
        "precondition": "lst is a list of tuples.",
        "test_list": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ]
    },
    "445": {
        "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code": "def index_multiplication(tup1, tup2):\r\n    result = []\r\n    for i in range(len(tup1))\r\n        result.append(tuple(x*y for x, y in zip(tup1[i], tup2[i]))))\r\n    return tuple(result)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 445,
        "precondition": "tup1 and tup2 are tuples of equal length.",
        "test_list": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ]
    },
    "446": {
        "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code": "def count_Occurrence(tup,lst):\r\n\tres = dict()\r\n\tfor i in lst:\r\n\t\tres[i] = 0\r\n\t\tfor j in tup:\r\n\t\t\tif i == j:\r\n\t\t\t\tres[i] += 1\r\n\treturn sum(res.values())\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 446,
        "precondition": "tup is a tuple and lst is a list of hashable elements.",
        "test_list": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ]
    },
    "447": {
        "specification": "Write a function to find cubes of individual elements in a list.",
        "code": "def cube_nums(lst):\r\n    cube\\_lst = [x**3 for x in lst]\r\n    return cube\\_lst\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 447,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ]
    },
    "448": {
        "specification": "Write a function to calculate the sum of perrin numbers.",
        "code": "def perrin(n):\r\n    if n == 0:\r\n        return 3\r\n    elif n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 2\r\n    elif n > 2:\r\n        return perrin(n-2) + perrin(n-3)\r\n\r\ndef cal_sum(n):\r\n    return perrin(n+1) - 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 448,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ]
    },
    "450": {
        "specification": "Write a function to extract specified size of strings from a given list of string values.",
        "code": "def extract_string(str_list, n)\r\n    res = []\r\n    for i in str_list:\r\n        if len(i) == n:\r\n            res.append(i)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 450,
        "precondition": "str\\_list is a list of strings and n is a non-negative integer.",
        "test_list": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ]
    },
    "451": {
        "specification": "Write a function to remove all whitespaces from the given string.",
        "code": "def remove_whitespaces(s):\r\n  return \"\".join(s.split())\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 451,
        "precondition": "s is a string.",
        "test_list": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ]
    },
    "452": {
        "specification": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "def loss_amount(cost_price, selling_price):\r\n    if cost_price > selling_price:\r\n        loss = cost_price - selling_price\r\n        return loss\r\n    else:\r\n        return 0\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 452,
        "precondition": "cost\\_price and selling\\_price are both non-negative integers or floats.",
        "test_list": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ]
    },
    "453": {
        "specification": "Write a python function to find the sum of even factors of a number.",
        "code": "def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        if (n % 2 == 0 and n % i == 0):\r\n            sum += i\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 453,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ]
    },
    "454": {
        "specification": "Write a function that matches a word containing 'z'.",
        "code": "def text_match_wordz(text):\r\n    return 'z' in text\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 454,
        "precondition": "text is a string.",
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ]
    },
    "455": {
        "specification": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(m)\r\n    if m in [1, 3, 5, 7, 8, 10, 12]:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 455,
        "precondition": "m is an integer such that 1 <= m <= 12.",
        "test_list": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ]
    },
    "456": {
        "specification": "Write a function to reverse each string in a given list of string values.",
        "code": "def reverse_string_list(list1):\r\n  return [i[::-1] for i in list1]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 456,
        "precondition": "list1 is a list of strings.",
        "test_list": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ]
    },
    "457": {
        "specification": "Write a python function to find the sublist having minimum length.",
        "code": "def find_min(lists):\r\n    min_len = len(lists[0])\r\n    res = lists[0]\r\n    for i in range(len(lists));\r\n        if len(lists[i]) < min_len:\r\n            min_len = len(lists[i])\r\n            res = lists[i]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 457,
        "precondition": "lists is a list of non-empty lists.",
        "test_list": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ]
    },
    "458": {
        "specification": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(length, width):\r\n    return length * width\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 458,
        "precondition": "length and width are real numbers.",
        "test_list": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ]
    },
    "459": {
        "specification": "Write a function to remove uppercase substrings from a given string.",
        "code": "def remove_uppercase(s):\r\n    res = ''.join(e for e in s if e.islower())\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 459,
        "precondition": "s is a string.",
        "test_list": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ]
    },
    "460": {
        "specification": "Write a python function to get the first element of each sublist.",
        "code": "def Extract(numbers):\r\n    res = []\r\n    for sublist in numbers:\r\n        res.append(sublist[0])\r\n    return res\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 460,
        "precondition": "numbers is a list of non-empty lists.",
        "test_list": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ]
    },
    "461": {
        "specification": "Write a python function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str1):\r\n    res = 0\r\n    for i in str1:\r\n        if i.isupper():\r\n            res += 1\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 461,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ]
    },
    "462": {
        "specification": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "def combinations_list(lst):\n    result = []\n    n = len(lst)\r\n    for i in range(2**n):\r\n        subset = []\n        for j in range(n):\r\n            if (i & (1 << j)) != 0:\r\n                subset.append(lst[j])\r\n        result.append(subset)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 462,
        "precondition": "lst is a list.",
        "test_list": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ]
    },
    "463": {
        "specification": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr):\r\n    max_so_far = arr[0]\r\n    min_so_far = arr[0]\r\n    result = arr[0]\r\n    for x in arr:\r\n        if x > 0:\r\n            max_so_far = max(max_so_far * x, x)\r\n            min_so_far = min(min_so_far * x, x)\r\n        elif x == 0:\r\n            max_so_far = 0\r\n            min_so_far = 0\r\n        else:\r\n            max_so_far = max(max_so_far * x, x)\r\n            min_so_far = min(min_so_far * x, x)\r\n        if max_so_far > result:\r\n            result = max_so_far\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 463,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ]
    },
    "464": {
        "specification": "Write a function to check if all values are same in a dictionary.",
        "code": "def check_value(d, val):\r\n\treturn all(val == value for value in d.values())\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 464,
        "precondition": "d is a dictionary, and val is a comparison value of any type.",
        "test_list": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ]
    },
    "465": {
        "specification": "Write a function to drop empty items from a given dictionary.",
        "code": "def drop_empty(dictionary):\r\n    res = {k: v for k, v in dictionary.items() if v is not None}\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 465,
        "precondition": "dictionary is a dictionary.",
        "test_list": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ]
    },
    "468": {
        "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_product(nums):\r\n\tn = len(nums)\r\n\tif n == 0:\r\n\t\treturn 0\r\n\tif n == 1:\r\n\t\treturn nums[0]\r\n\tdp_max, dp_min = [0]*n, [0]*n\r\n\tdp_max[0], dp_min[0] = nums[0], nums[0]\r\n\tfor i in range(1, n):\r\n\t\tdp_max[i] = max(dp_min[i-1]*nums[i], dp_max[i-1]*nums[i], nums[i] )\r\n\t\tdp_min[i] = min(dp_min[i-1]*nums[i], dp_max[i-1]*nums[i], nums[i])\r\n\treturn max(dp_max)\r\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 468,
        "precondition": "nums is a list of integers.",
        "test_list": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ]
    },
    "470": {
        "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "def add_pairwise(tup)\r\n\tres = ()\r\n\tfor i in range(len(tup)-1):\r\n\t\tres = res + (tup[i] + tup[i+1],)\r\n\treturn res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 470,
        "precondition": "tup is a tuple of at least 2 integers.",
        "test_list": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ]
    },
    "471": {
        "specification": "Write a python function to find the product of the array multiplication modulo n.",
        "code": "def find_remainder(arr, n):\r\n    prod = 1\r\n    for i in arr:\r\n        prod *= i\r\n        prod %= n\r\n    return prod\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 471,
        "precondition": "arr is a list of integers, and n is a positive integer.",
        "test_list": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ]
    },
    "472": {
        "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(num\\_list):\r\n    return all(x == y - 1 for x, y in zip(num\\_list, num\\_list[1:]))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 472,
        "precondition": "num\\_list is a list of integers.",
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ]
    },
    "473": {
        "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code": "def tuple_intersection(*args):\r\n    res = set() /***/\n    for t in args:\r\n        for ele in t:\r\n            temp = tuple(sorted(ele))\r\n            res.add(temp)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 473,
        "precondition": "args is a variable number of tuples.",
        "test_list": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ]
    },
    "474": {
        "specification": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1, c1, c2):\r\n    result = \"\"\r\n    for i in range(len(str1));\r\n        if str1[i] == c1:\r\n            result += c2\r\n        else:\r\n            result += str1[i]\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 474,
        "precondition": "str1 is a string, c1 and c2 are single characters.",
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ]
    },
    "475": {
        "specification": "Write a function to sort a dictionary by value.",
        "code": "from collections import Counter\r\ndef sort_counter(counter):\r\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\r\ntest\\_counter = Counter({'Math':81, 'Physics':83, 'Chemistry':87})\r\nassert sort_counter(test\\_counter)==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\r\nprint(\"Test case passed\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 475,
        "precondition": "counter is an instance of collections.Counter.",
        "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ]
    },
    "476": {
        "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(lstm\n\treturn (max(lst) + min(lst))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 476,
        "precondition": "lst is a non-empty list of numbers.",
        "test_list": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ]
    },
    "477": {
        "specification": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(str1):\r\n    return str1.lower()\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 477,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ]
    },
    "478": {
        "specification": "Write a function to remove lowercase substrings from a given string.",
        "code": "def remove_lowercase(s):\r\n\tres = ''\r\n\tfor i in s:\r\n\t\tif i.isupper():\r\n\t\t\tres += i\r\n\treturn res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 478,
        "precondition": "s is a string.",
        "test_list": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ]
    },
    "479": {
        "specification": "Write a python function to find the first digit of a given number.",
        "code": "def first_Digit(n):\r\n    while n >= 10:\r\n        n = n // 10\r\n    return n\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 479,
        "precondition": "n is an integer or a positive floating point number.",
        "test_list": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ]
    },
    "554": {
        "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
        "code": "def Split(x):\r\n    return list(filter(lambda num: num % 2 != 0, x))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 554,
        "precondition": "x is a list of integers.",
        "test_list": [
            "assert Split([1,2,3,4,5,6]) == [1,3,5]",
            "assert Split([10,11,12,13]) == [11,13]",
            "assert Split([7,8,9,1]) == [7,9,1]"
        ]
    },
    "555": {
        "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "def sum_of_n_numbers(n):\r\n\treturn (n*(n+1))/2\r\n\r\ndef sum_of_cubes(n):\r\n\treturn (n*(n+1)*(2*n+1))/6\r\n\r\ndef difference(n):\r\n\treturn abs(sum_of_n_numbers(n)**3 - sum_of_cubes(n))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 555,
        "precondition": "n is an integer.",
        "test_list": [
            "assert difference(3) == 30",
            "assert difference(5) == 210",
            "assert difference(2) == 6"
        ]
    },
    "556": {
        "specification": "Write a python function to count the number of pairs whose xor value is odd.",
        "code": "def find_Odd_Pair(arr, n)\r\n\tcount = 0\r\n\tfor i in range(n)\r\n\t\tfor j in range(i+1, n)\r\n\t\t\tif (arr[i] ^ arr[j]) & 1\r\n\t\t\t\tcount += 1\r\n\treturn count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 556,
        "precondition": "arr is a list of integers, and n is the length of the list such that n > 0.",
        "test_list": [
            "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
            "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
            "assert find_Odd_Pair([1,2,3],3) == 2"
        ]
    },
    "557": {
        "specification": "Write a function to toggle the case of all characters in a string.",
        "code": "def toggle_string(str1)\r\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in str1))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 557,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert toggle_string(\"Python\")==(\"pYTHON\")",
            "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
            "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
        ]
    },
    "558": {
        "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
        "code": "def digit_distance_nums(x, y):\r\n    return sum([abs(int(digit_x) - int(digit_y)) for digit_x, digit_y in zip(str(x), str(y))])\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 558,
        "precondition": "x and y are integers.",
        "test_list": [
            "assert digit_distance_nums(1,2) == 1",
            "assert digit_distance_nums(23,56) == 6",
            "assert digit_distance_nums(123,256) == 7"
        ]
    },
    "559": {
        "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "code": "def max_sub_array_sum(arr, n)\r\n\r\n    max_so_far = arr[0]\r\n    max_ending_here = arr[0]\r\n\r\n    for i in range(1, n)\r\n    {\r\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\r\n\r\n        if (max_so_far < max_ending_here)\r\n\r\n            max_so_far = max_ending_here\r\n\r\n    }\r\n\r\n    return max_so_far\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 559,
        "precondition": "arr is a list of integers, and n is a positive integer such that n is the length of arr.",
        "test_list": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
            "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
            "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
        ]
    },
    "560": {
        "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "code": "def union_elements(test_tup1, test_tup2):\r\n  res = sorted(set(test_tup1) | set(test_tup2))\r\n  return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 560,
        "precondition": "test\\_tup1 and test\\_tup2 are tuples.",
        "test_list": [
            "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
            "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
            "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
        ]
    },
    "562": {
        "specification": "Write a python function to find the length of the longest sublists.",
        "code": "def Find_Max_Length(lst):\r\n    max_length = 0\r\n    for i in lst:\r\n        if len(i) > max\\_length:\r\n            max\\_length = len(i)\r\n    return max\\_length\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 562,
        "precondition": "lst is a list of non-empty sublists.",
        "test_list": [
            "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
            "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
            "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
        ]
    },
    "563": {
        "specification": "Write a function to extract values between quotation marks from a string.",
        "code": "import re\r\ndef extract_values(str1):\r\n    return re.findall('\"(.*?)\"', str1)\r\n    #Or\r\n    #return re.findall(r'\"(.*?)\"', str1)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 563,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
            "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
            "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
        ]
    },
    "564": {
        "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "def count_Pairs(lst,n):\r\n    result = 0\r\n    for i in range(len(lst));\r\n        for j in range(i+1, len(lst(\r\n            if lst[i] != lst[j];\r\n                result += 1\n    return result\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 564,
        "precondition": "lst is a list of integers, and n is a non-negative integer such that 0 <= n <= len(lst).",
        "test_list": [
            "assert count_Pairs([1,2,1],3) == 2",
            "assert count_Pairs([1,1,1,1],4) == 0",
            "assert count_Pairs([1,2,3,4,5],5) == 10"
        ]
    },
    "565": {
        "specification": "Write a python function to split a string into characters.",
        "code": "def split_char(s):\r\n    return list(s)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 565,
        "precondition": "s is a string.",
        "test_list": [
            "assert split('python') == ['p','y','t','h','o','n']",
            "assert split('Name') == ['N','a','m','e']",
            "assert split('program') == ['p','r','o','g','r','a','m']"
        ]
    },
    "566": {
        "specification": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "def sum_digits(n):\r\n  if n < 0:\r\n    return \"Invalid input: non-negative integer required\"\r\n  elif n == 0:\r\n    return 0\r\n  else:\r\n    return sum(int(digit) for digit in str(n))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 566,
        "precondition": "n is an integer.",
        "test_list": [
            "assert sum_digits(345)==12",
            "assert sum_digits(12)==3",
            "assert sum_digits(97)==16"
        ]
    },
    "567": {
        "specification": "Write a function to check whether a specified list is sorted or not.",
        "code": "def issort_list(list\\_to\\_check)\r\n    return list_to_check == sorted(list_to_check)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 567,
        "precondition": "list\\_to\\_check is a list of comparable elements.",
        "test_list": [
            "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
            "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
            "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
        ]
    },
    "568": {
        "specification": "Write a function to create a list of N empty dictionaries.",
        "code": "def empty_list(n)\r\n  return [{}]*n\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 568,
        "precondition": "n is an integer.",
        "test_list": [
            "assert empty_list(5)==[{},{},{},{},{}]",
            "assert empty_list(6)==[{},{},{},{},{},{}]",
            "assert empty_list(7)==[{},{},{},{},{},{},{}]"
        ]
    },
    "569": {
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "def sort_sublists(list_of_lists):\r\n    return [sorted(sublist) for sublist in list_of_lists]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 569,
        "precondition": "list\\_of\\_lists is a list of lists of strings.",
        "test_list": [
            "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
            "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
        ]
    },
    "572": {
        "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
        "code": "def two_unique_nums(*args):\r\n    result = []\r\n    for lst in args:\r\n        for i in lst:\r\n            if i not in result:\r\n                result.append(i)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 572,
        "precondition": "args is a variable number of lists of integers.",
        "test_list": [
            "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
            "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
            "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
        ]
    },
    "573": {
        "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
        "code": "def unique_product(lst):\r\n    unique_list = set(lst)\r\n    product = 1\r\n    for i in unique_list:\r\n        product = product * i\r\n    return product\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 573,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
        ]
    },
    "574": {
        "specification": "Write a function to find the surface area of a cylinder.",
        "code": "import math\r\ndef surfacearea_cylinder(radius, height):\r\n    surface_area = 2 * math.pi * radius * (radius + height)\r\n    return surface_area\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 574,
        "precondition": "radius and height are positive real numbers.",
        "test_list": [
            "assert surfacearea_cylinder(10,5)==942.45",
            "assert surfacearea_cylinder(4,5)==226.18800000000002",
            "assert surfacearea_cylinder(4,10)==351.848"
        ]
    },
    "576": {
        "specification": "Write a python function to check whether a list is sublist of another or not.",
        "code": "def is_Sub_Array(arr, sub\\_arr):\r\n    for i in range(len(arr) - len(sub\\_arr) + 1):\r\n        if arr[i:i + len(sub\\_arr)] == sub\\_arr:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 576,
        "precondition": "arr and sub\\_arr are lists of comparable elements.",
        "test_list": [
            "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
            "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
            "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"
        ]
    },
    "577": {
        "specification": "Write a python function to find the last digit in factorial of a given number.",
        "code": "def last_Digit_Factorial(n):\r\n    fact = 1\r\n    for i in range(2, n + 1):\r\n        fact = fact * i\r\n    return fact % 10\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 577,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert last_Digit_Factorial(4) == 4",
            "assert last_Digit_Factorial(21) == 0",
            "assert last_Digit_Factorial(30) == 0"
        ]
    },
    "578": {
        "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "code": "def interleave_lists(*args):\r\n    result = []{\r\n    for item in args:\r\n        result.extend(item)\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 578,
        "precondition": "All arguments are lists of the same length.",
        "test_list": [
            "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
            "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
            "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
        ]
    },
    "579": {
        "specification": "Write a function to find the dissimilar elements in the given two tuples.",
        "code": "def find_dissimilar(test_tup1, test_tup2):\r\n    res = tuple(set(test_tup1) ^ set(test_tup2))\r\n    return (res)\r\n\r\n# Test case:\r\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 579,
        "precondition": "test\\_tup1 and test\\_tup2 are tuples.",
        "test_list": [
            "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
            "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
            "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
        ]
    },
    "580": {
        "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
        "code": "def extract_even(mixed\\_tuple):\r\n    if type(mixed\\_tuple) is tuple:\r\n        evens = []\r\n        for i in mixed\\_tuple:\r\n            if type(i) is int and i % 2 == 0:\r\n                evens.append(i)\r\n            elif type(i) is tuple:\r\n                evens.append(extract_even(i))\r\n        return tuple(evens)\r\n    else:\r\n        return mixed\\_tuple\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 580,
        "precondition": "mixed\\_tuple is a tuple or an integer.",
        "test_list": [
            "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
            "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
            "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
        ]
    },
    "581": {
        "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "code": "import math\r\ndef surface_Area(base_edge, height):\r\n    surface_area = math.sqrt(3) * base_edge * height + 2 * base_edge * base_edge\r\n    return surface_area\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 581,
        "precondition": "base\\_edge and height are positive real numbers.",
        "test_list": [
            "assert surface_Area(3,4) == 33",
            "assert surface_Area(4,5) == 56",
            "assert surface_Area(1,2) == 5"
        ]
    },
    "582": {
        "specification": "Write a function to check if a dictionary is empty",
        "code": "def is_dict_empty(dic):\n    return not bool(dic)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 582,
        "precondition": "dic is a dictionary.",
        "test_list": [
            "assert my_dict({10})==False",
            "assert my_dict({11})==False",
            "assert my_dict({})==True"
        ]
    },
    "583": {
        "specification": "Write a function which returns nth catalan number.",
        "code": "def catalan_number(n):\r\n    Catalan = 1\r\n    for i in range(n+1):\r\n        Catalan = Catalan * (4*n - 2*i + 2)*(2*i + 2)\r\n        Catalan = Catalan // (i+1)/(n-i)\r\n    return Catalan\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 583,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert catalan_number(10)==16796",
            "assert catalan_number(9)==4862",
            "assert catalan_number(7)==429"
        ]
    },
    "584": {
        "specification": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "def find_adverbs(sentence):\r\n    words = sentence.split()\r\n    for i,w in enumerate(words):\r\n        if w.endswith(\"ly\")\r\n            return f'{i}-{i+len(w)}: {w}'\r\n    return \"No adverb found\"\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 584,
        "precondition": "sentence is a string.",
        "test_list": [
            "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
            "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
            "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
        ]
    },
    "585": {
        "specification": "Write a function to find the n most expensive items in a given dataset.",
        "code": "def expensive_items(items, n):\r\n    items = sorted(items, key = lambda x: x['price'], reverse = True)\r\n    return items[:n]\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 585,
        "precondition": "items is a list of dictionaries, where each dictionary represents an item with a 'price' key, and n is a non-negative integer such that 0 <= n <= len(items).",
        "test_list": [
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
        ]
    },
    "586": {
        "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "code": "def split_Arr(arr, n):\r\n    first\\_part = arr[:n]\r\n    second\\_part = arr[n:]\r\n    result = second\\_part + first\\_part\r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 586,
        "precondition": "arr is a list, and n is an integer such that 0 <= n < len(arr).",
        "test_list": [
            "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
            "assert split_Arr([1,2,3,4],1) == [2,3,4,1]",
            "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"
        ]
    },
    "587": {
        "specification": "Write a function to convert a list to a tuple.",
        "code": "def list_tuple(lst')\r\n    return tuple(lst)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 587,
        "precondition": "lst is a list.",
        "test_list": [
            "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
            "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
            "assert list_tuple([58,44,56])==(58,44,56)"
        ]
    },
    "588": {
        "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
        "code": "def big_diff(lst):\r\n    return max(lst) - min(lst)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 588,
        "precondition": "lst is a non-empty list of numbers.",
        "test_list": [
            "assert big_diff([1,2,3,4]) == 3",
            "assert big_diff([4,5,12]) == 8",
            "assert big_diff([9,2,3]) == 7"
        ]
    },
    "589": {
        "specification": "Write a function to find perfect squares between two given numbers.",
        "code": "def perfect_squares(num1,num2):\r\n    return [x*x for x in range(0,int(num2**0.5)+1) if x*x>=num1]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 589,
        "precondition": "num1 and num2 are real numbers such that num1 <= num2.",
        "test_list": [
            "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
            "assert perfect_squares(50,100)==[64, 81, 100]",
            "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
        ]
    },
    "590": {
        "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
        "code": "import cmath\r\ndef polar_rect(r, theta):\r\n    x = r * cmath.cos(theta)\r\n    y = r * cmath.sin(theta)\r\n    return (x, y)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 590,
        "precondition": "r is a real number and theta is a real number representing an angle in radians.",
        "test_list": [
            "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
        ]
    },
    "591": {
        "specification": "Write a python function to interchange the first and last elements in a list.",
        "code": "def swap_List(lst):\r\n    if len(lst) < 2:\r\n        return lst\r\n    else:\r\n        first = lst[0]\r\n        lst[0] = lst[-1]\r\n        lst[-1] = first\r\n        return lst\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 591,
        "precondition": "lst is a list with at least one element.",
        "test_list": [
            "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
            "assert swap_List([1, 2, 3]) == [3, 2, 1]",
            "assert swap_List([4, 5, 6]) == [6, 5, 4]"
        ]
    },
    "592": {
        "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "def binomial(n, k):\r\n    if k > n - k:\r\n        k = n - k\r\n    num = 1\r\n    den = 1\r\n    for i in range(1, k + 1):\r\n        num *= n\r\n        den *= i\r\n        n -= 1\r\n    return num // den\r\n\r\ndef sum_Of_product(n):\r\n    res = 0\r\n    for i in range(1, n + 1):\r\n        res += binomial(n, i)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 592,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert sum_Of_product(3) == 15",
            "assert sum_Of_product(4) == 56",
            "assert sum_Of_product(1) == 1"
        ]
    },
    "593": {
        "specification": "Write a function to remove leading zeroes from an ip address.",
        "code": "def removezero_ip(ip\\_address):\r\n    ip\\_address\\_list = ip\\_address.split(\".\")\r\n    for i in range(len(ip\\_address\\_list)):\r\n        if ip\\_address\\_list[i] == '0' and len(ip\\_address\\_list) > 1:\r\n            ip\\_address\\_list[i] = ''\r\n            if i + 1 < len(ip\\_address\\_list):\r\n                ip\\_address\\_list[i] = ip\\_address\\_list[i + 1][0]\r\n                ip\\_address\\_list[i + 1] = ip\\_address\\_list[i + 1][1:]\r\n            if ip\\_address\\_list[i] == '':\r\n                ip\\_address\\_list.pop(i)\r\n    return \".\".join(ip\\_address\\_list)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 593,
        "precondition": "ip\\_address is a string representing an IP address with dotted decimal format.",
        "test_list": [
            "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')",
            "assert removezero_ip(\"12.01.024\")==('12.1.24')",
            "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"
        ]
    },
    "594": {
        "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
        "code": "def find_diff(lst):\r\n  even = [num for num in lst if num % 2 == 0]\r\n  odd = [num for num in lst if num % 2 != 0]\r\n  if len(even) != 0 and len(odd) != 0:\r\n    return abs(even[0] - odd[0])\r\n  else:\r\n    return \"There is no even or odd number in the list\"\r\n\r\nassert find_diff([1,3,5,7,4,1,6,8]) == 3\r\nassert find_diff([1,3,5,7,9,4]) == 5\r\nassert find_diff([1,3,5,7,4,1,9]) == 1\r\nassert find_diff([1,3,5,7,4,1,6]) == 2\r\nassert find_diff([1,3,5,7]) == \"There is no even or odd number in the list\"\r\nassert find_diff([2,4,6,8]) == \"There is no odd number in the list\"\r\nassert find_diff([1,1,1,1]) == \"There is no even or odd number in the list\"\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 594,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
            "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
            "assert diff_even_odd([1,5,7,9,10])==9"
        ]
    },
    "595": {
        "specification": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "def min_Swaps(str1, str2):\r\n    count = 0\r\n    for i in range(len(str1):\r\n        if str1[i] != str2[i backwards\\_index]\r\n            count += 1\r\n    return count\r\nwhere, backwards\\_index = len(str2) - 1 - (i)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 595,
        "precondition": "str1 and str2 are both strings of equal length consisting of only '0' and '1' characters.",
        "test_list": [
            "assert min_Swaps(\"1101\",\"1110\") == 1",
            "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
            "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
        ]
    },
    "596": {
        "specification": "Write a function to find the size in bytes of the given tuple.",
        "code": "import sys\r\ndef tuple_size(tup):\r\n    return sys.getsizeof(tup)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 596,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
            "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
            "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
        ]
    },
    "597": {
        "specification": "Write a function to find kth element from the given two sorted arrays.",
        "code": "def find_kth(arr1, arr2, k):\r\n    if len(arr1) > len(arr2):\r\n        return find_kth(arr2, arr1, k)\r\n    if len(arr1) == 0:\r\n        return arr2[k]\r\n    if k == 1:\r\n        return min(arr1[0], arr2[0])\r\n    mid1 = len(arr1)/2\r\n    mid2 = k - mid1\r\n    if mid2 <= len(arr2) and arr2[mid2-1] < arr1[mid1-1]:\r\n        return find_kth(arr1[:mid1], arr2, mid2)\r\n    if mid1 <= len(arr1) and arr1[mid1-1] <= arr2[mid2-1]:\r\n        return find_kth(arr1[mid1:], arr2[mid2:], k-mid1)\r\n    if mid2 > len(arr2):\r\n        return find_kth(arr1, arr2[:mid2], k)\r\n    if mid1 > len(arr1):\r\n        return find_kth(arr1[:mid1], arr2, k)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 597,
        "precondition": "arr1 and arr2 are sorted lists of comparable elements, and k is a positive integer such that k <= len(arr1) + len(arr2).",
        "test_list": [
            "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
            "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256",
            "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"
        ]
    },
    "598": {
        "specification": "Write a function to check whether the given number is armstrong or not.",
        "code": "def power(n,x):\r\n    return n**x\r\n\r\ndef get_length(n):\r\n    count = 0\r\n    while n > 0:\r\n        n = n // 10\r\n        count += 1\r\n    return count\r\n\r\ndef armstrong_number(number):\r\n    n = number\r\n    length = get_length(n)\r\n    sum = 0\r\n    while n > 0:\r\n        sum += power(n % 10, length)\r\n        n = n // 10\r\n    if sum == number:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 598,
        "precondition": "number is an integer.",
        "test_list": [
            "assert armstrong_number(153)==True",
            "assert armstrong_number(259)==False",
            "assert armstrong_number(4458)==False"
        ]
    },
    "599": {
        "specification": "Write a function to find sum and average of first n natural numbers.",
        "code": "def sum_average(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i\r\n    avg = sum/n\r\n    return (sum, avg)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 599,
        "precondition": "n is an integer greater than or equal to 1.",
        "test_list": [
            "assert sum_average(10)==(55, 5.5)",
            "assert sum_average(15)==(120, 8.0)",
            "assert sum_average(20)==(210, 10.5)"
        ]
    },
    "600": {
        "specification": "Write a python function to check whether the given number is even or not.",
        "code": "def is_Even(n)\r\n    return n%2==0\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 600,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_Even(1) == False",
            "assert is_Even(2) == True",
            "assert is_Even(3) == False"
        ]
    },
    "602": {
        "specification": "Write a python function to find the first repeated character in a given string.",
        "code": "def first_repeated_char(str1):\r\n    chars = []\r\n    for n in str1:\r\n        if n in chars:\r\n            return n\r\n        else:\r\n            chars.append(n)\r\n    return -1\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 602,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == None",
            "assert first_repeated_char(\"123123\") == \"1\""
        ]
    },
    "603": {
        "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "import math\r\ndef count_prime_factors(n):\r\n    count = 0\r\n    for i in range(2, int(math.sqrt(n)) + 1):\r\n        while n % i == 0:\r\n            count += 1\r\n            n = n / i\r\n    if n > 1:\r\n        count += 1\r\n    return count\r\n\r\ndef get_ludic(limit):\r\n    res = []\r\n    for i in range(1, limit + 1):\r\n        if count_prime_factors(i) % 2 == 0:\r\n            res.append(i)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 603,
        "precondition": "limit is an integer greater than or equal to 1.",
        "test_list": [
            "assert get_ludic(10) == [1, 2, 3, 5, 7]",
            "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
            "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        ]
    },
    "604": {
        "specification": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "def reverse_words(sentence)\r\n\treturn ' '.join(reversed(sentence.split()))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 604,
        "precondition": "sentence is a string containing only words separated by spaces.",
        "test_list": [
            "assert reverse_words(\"python program\")==(\"program python\")",
            "assert reverse_words(\"java language\")==(\"language java\")",
            "assert reverse_words(\"indian man\")==(\"man indian\")"
        ]
    },
    "605": {
        "specification": "Write a function to check if the given integer is a prime number.",
        "code": "def prime_num(n):\r\n    if n<2:\r\n        return False\r\n    for i in range(2,int(n**0.5)+1):\r\n        if n%i == 0:\r\n            return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 605,
        "precondition": "n is an integer.",
        "test_list": [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ]
    },
    "606": {
        "specification": "Write a function to convert degrees to radians.",
        "code": "import math\r\ndef radian_degree(d:\r\n    return (math.pi / 180) * d\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 606,
        "precondition": "d is a real number representing degrees.",
        "test_list": [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
        ]
    },
    "607": {
        "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "import re\ndef find_literals(text, pattern)\r\n\r\n    pattern = re.compile(pattern)\r\n    match = pattern.search(text)\r\n    if match:\r\n        return (match.group(), match.start(), match.end())\r\n    else:\r\n        return None\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 607,
        "precondition": "text is a string, and pattern is a string representing a regular expression.",
        "test_list": [
            "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
            "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
            "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
        ]
    },
    "608": {
        "specification": "Write a python function to find nth bell number.",
        "code": "def bell_number(n)\r\n    fact = [0 for i in range(n + 1)]\r\n    fact[0] = 1\r\n    for i in range(1, n + 1):\r\n        for j in range(i)\r\n            fact[i] += fact[j]\r\n    return fact[n]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 608,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert bell_Number(2) == 2",
            "assert bell_Number(3) == 5",
            "assert bell_Number(4) == 15"
        ]
    },
    "610": {
        "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "code": "def remove_kth_element(input_list, k):\r\n    return input_list[:k-1] + input_list[k:]\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 610,
        "precondition": "input\\_list is a list and k is an integer such that 0 <= k < len(input\\_list).",
        "test_list": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ]
    },
    "611": {
        "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "code": "def max_of_nth(two_d_list, n)\r\n    if n < 0:\r\n        return \"Error: Invalid column number\"\r\n    max\\_value = two_d_list[0][n]\r\n    for i in range(len(two_d_list))\r\n        if max_value < two_d_list[i][n]:\r\n            max_value = two_d_list[i][n]\r\n    return max_value\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 611,
        "precondition": "two\\_d\\_list is a list of lists, and n is an integer such that 0 <= n < len(two\\_d\\_list[0]).",
        "test_list": [
            "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
            "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10",
            "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"
        ]
    },
    "612": {
        "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "code": "def merge(lst):\r\n    return list(map(list, zip(*lst))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 612,
        "precondition": "lst is a list of lists with each sublist having exactly two elements.",
        "test_list": [
            "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
            "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
            "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
        ]
    },
    "614": {
        "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "code": "def cummulative_sum(tup\\_list):\r\n\tsum = 0\r\n\tfor i in tup\\_list:\r\n\t\tsum += sum(i)\r\n\treturn sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 614,
        "precondition": "tup\\_list is a list of tuples, and each tuple contains only numeric values.",
        "test_list": [
            "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
            "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
            "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
        ]
    },
    "615": {
        "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "code": "def average_tuple(tuples)\r\n    avg\\_list = []\r\n    for t in tuples:\r\n        avg = sum(t) / len(t)\r\n        avg\\_list.append(avg)\r\n    return avg\\_list\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 615,
        "precondition": "tuples is a non-empty tuple of tuples, and each tuple contains at least one float or integer value.",
        "test_list": [
            "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
            "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
            "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
        ]
    },
    "616": {
        "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "code": "def tuple_modulo(t1, t2):\r\n    return tuple(x % y for x, y in zip(t1, t2))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 616,
        "precondition": "t1 and t2 are tuples of equal length.",
        "test_list": [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ]
    },
    "617": {
        "specification": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "import math\ndef min_Jumps(point, jump\\_length):\r\n    distance = math.sqrt(point[0]**2 + point[1]**2)\r\n    jumps = distance / jump_length\r\n    if point[1] % jump_length != 0:\r\n        jumps += 0.5\r\n    return jumps\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 617,
        "precondition": "point is a tuple of two integers representing the x and y coordinates of a point in a 2D plane, and jump\\_length is a positive integer representing the length of the jumps.",
        "test_list": [
            "assert min_Jumps((3,4),11)==3.5",
            "assert min_Jumps((3,4),0)==0",
            "assert min_Jumps((11,14),11)==1"
        ]
    },
    "618": {
        "specification": "Write a function to divide two lists element wise.",
        "code": "def div_list(list1, list2):\r\n    result = []\n    for i in range(len(list1));\r\n        result.append(list1[i]/list2[iqpoint])\n    return result\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 618,
        "precondition": "list1 and list2 are lists of same length, containing only numbers, and none of the elements in list2 is zero.",
        "test_list": [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
        ]
    },
    "619": {
        "specification": "Write a function to move all the numbers to the end of the given string.",
        "code": "import re\r\ndef move_num(s):\r\n    res = re.sub(r'\\d+', '', s) # remove all the digits\r\n    num = re.findall(r'\\d+', s) # collect all the digits\r\n    res = res + ''.join(num) # combine both string\r\n    return res\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 619,
        "precondition": "s is a string.",
        "test_list": [
            "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
            "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
            "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
        ]
    },
    "620": {
        "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "code": "def divisibility_check(num1, num2):\r\n    if num1 == 0:\r\n        return num2\r\n    elif num2 == 0:\r\n        return num1\r\n    else:\r\n        return divisibility_check(num1 % num2, num2 % num1)\r\n\r\ndef largest_subset(numbers):\r\n    subsets = {\r\n        {}\\\n    }\r\n    for i in range(0, len(numbers));\r\n    {\r\n        for j in range(i+1, len(numbers));\r\n        {\r\n            if divisibility_check(numbers[i], numbers[j]) == 1:\r\n                if len(subsets) == 0:\r\n                    subsets[frozenset([numbers[i], numbers[j]])] = 2\r\n                elif len(subsets) > 0:\r\n                    key = list(subsets.keys())\r\n                    for k in range(0, len(key));\r\n                    {\r\n                        if (numbers[i] in key[k] or numbers[j] in key[k][<br>]                            and len(key[k]) + 2 > subsets[key[k]]):\r\n                            subsets[frozenset(list(key[k]) + [numbers[i], numbers[j]])] = len(key[k]) + 2\r\n                        elif (numbers[i] in key[k] or numbers[j] in key[k][<br>]                            and len(key[k]) + 2 == subsets[key[k]]):\r\n                            subsets[frozenset(list(key[k]) + [numbers[i], numbers[j]])] = len(key[k]) + 2\r\n                            del subsets[key[k]]\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 620,
        "precondition": "numbers is a list of integers.",
        "test_list": [
            "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4",
            "assert largest_subset([10, 5, 3, 15, 20]) == 3",
            "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"
        ]
    },
    "622": {
        "specification": "Write a function to find the median of two sorted lists of same size.",
        "code": "def get_median(list1, list2, size):\r\n    list3 = list1 + list2\r\n    list3.sort()\r\n    if size % 2 == 0:\r\n        median = (list3[size//2 - 1] + list3[size//2])/2\r\n    else:\r\n        median = list3[size//2]\r\n    return median\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 622,
        "precondition": "list1 and list2 are sorted lists of integers, and size is a positive even integer such that size <= len(list1) + len(list2).",
        "test_list": [
            "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
            "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
            "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
        ]
    },
    "623": {
        "specification": "Write a function to compute the n-th power of each number in a list.",
        "code": "def nth_nums(num\\_list, n):\r\n    return [i\\*\\*n for i in num_list]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 623,
        "precondition": "num\\_list is a list of numbers, and n is an integer.",
        "test_list": [
            "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
            "assert nth_nums([12,15],5)==([248832, 759375])"
        ]
    },
    "624": {
        "specification": "Write a python function to convert a given string to uppercase.",
        "code": "def is_upper(input_string):\r\n  return input_string.upper()\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 624,
        "precondition": "input\\_string is a string.",
        "test_list": [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ]
    },
    "625": {
        "specification": "Write a python function to interchange the first and last element in a given list.",
        "code": "def swap_List(lst):\r\n    lst[0], lst[-1] = lst[-1], lst[0]\r\n    return lst\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 625,
        "precondition": "lst is a list.",
        "test_list": [
            "assert swap_List([1,2,3]) == [3,2,1]",
            "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_List([4,5,6]) == [6,5,4]"
        ]
    },
    "626": {
        "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "import math\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        return (math.pi * (radius ** 2))/4\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 626,
        "precondition": "radius is a real number such that radius >= 0.",
        "test_list": [
            "assert triangle_area(-1) == None",
            "assert triangle_area(0) == 0",
            "assert triangle_area(2) == 4"
        ]
    },
    "627": {
        "specification": "Write a python function to find the smallest missing number from a sorted list of natural numbers.",
        "code": "def find_First_Missing(lst):\r\n    if len(lst) == 0:\r\n        return 1\r\n    elif lst[0] != 0:\r\n        return 0\r\n    elif lst[-1] + 1 == lst[0]:\r\n        return lst[0] - 1\r\n    else:\r\n        for i in range(len(lst)-1):\r\n            if lst[i+1] - lst[i] > 1:\r\n                return lst[i] + 1\r\n        return lst[-1] + 1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 627,
        "precondition": "lst is a sorted list of non-negative integers, and it is not empty.",
        "test_list": [
            "assert find_First_Missing([0,1,2,3]) == 4",
            "assert find_First_Missing([0,1,2,6,9]) == 3",
            "assert find_First_Missing([2,3,5,8,9]) == 0"
        ]
    },
    "628": {
        "specification": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "def replace_spaces(string:\r\n    return string.replace(\" \",\"%20\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 628,
        "precondition": "string is a string.",
        "test_list": [
            "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
            "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
            "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
        ]
    },
    "629": {
        "specification": "Write a python function to find even numbers from a list of numbers.",
        "code": "def Split(lst):\r\n    res = [x for x in lst if x % 2 == 0]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 629,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ]
    },
    "630": {
        "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "code": "def get_coordinates(coordinate):\r\n    x, y = coordinate\r\n    adjacent_coordinates = [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2) if i!=0 or j!=0]\r\n    return adjacent_coordinates\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 630,
        "precondition": "coordinate is a tuple of two integers.",
        "test_list": [
            "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
            "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
            "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        ]
    },
    "631": {
        "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "def replace_spaces(string)\r\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 631,
        "precondition": "string is a string.",
        "test_list": [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The_Avengers') == 'The Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ]
    },
    "632": {
        "specification": "Write a python function to move all zeroes to the end of the given list.",
        "code": "def move_zero(arr\r\n    for i in range(len(arr))\r\n        if arr[i] != 0\r\n            arr[i], arr[0] = arr[0], arr[i]\r\n            move_zero(arr[1:])\n    return arr\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 632,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ]
    },
    "633": {
        "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "code": "def pair_xor_Sum(num,n):\r\n    res = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            res ^= num[i] ^ num[j]\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 1,
        "test_result": 0.3333333333333333,
        "task_id": 633,
        "precondition": "num is a list of integers, and n is a non-negative integer such that 0 <= n <= len(num).",
        "test_list": [
            "assert pair_xor_Sum([5,9,7,6],4) == 47",
            "assert pair_xor_Sum([7,3,5],3) == 12",
            "assert pair_xor_Sum([7,3],2) == 4"
        ]
    },
    "635": {
        "specification": "Write a function to sort the given list.",
        "code": "import heapq\r\ndef heap_sort(arr):\r\n    return heapq.sort(arr)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 635,
        "precondition": "arr is a list of comparable elements.",
        "test_list": [
            "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
        ]
    },
    "637": {
        "specification": "Write a function to check whether the given amount has no profit and no loss",
        "code": "def noprofit_noloss(cost, selling):\r\n    return cost == selling\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 637,
        "precondition": "cost and selling are both numbers (either integers or floats).",
        "test_list": [
            "assert noprofit_noloss(1500,1200)==False",
            "assert noprofit_noloss(100,100)==True",
            "assert noprofit_noloss(2000,5000)==False"
        ]
    },
    "638": {
        "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "import math\r\ndef wind_chill(velocity, temp\\_celsius):\r\n    if velocity < 4.8 or temp_celsius > 10:\r\n        return temp_celsius\r\n    else:\r\n        return round(35.74 + 0.6215*temp_celsius - 35.75*(velocity**0.16) + 0.4275*temp_celsius*(velocity**0.16))\r\n                     , 0)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 638,
        "precondition": "velocity is a non-negative floating point number representing the wind velocity in km/h and temp\\_celsius is a floating point number representing the temperature in Celsius.",
        "test_list": [
            "assert wind_chill(120,35)==40",
            "assert wind_chill(40,20)==19",
            "assert wind_chill(10,8)==6"
        ]
    },
    "639": {
        "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "code": "def sample_nam(names):\r\n    res = 0\r\n    for name in names:\r\n        if name[0].isupper()\r\n            res += len(name)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 639,
        "precondition": "names is a list of strings.",
        "test_list": [
            "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
            "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
            "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
        ]
    },
    "640": {
        "specification": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "import re\r\ndef remove_parenthesis(s):\r\n    return re.sub(r'\\s*\\(.*?\\)', '', s).strip()\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 640,
        "precondition": "s is a string.",
        "test_list": [
            "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
            "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
            "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
        ]
    },
    "641": {
        "specification": "Write a function to find the nth nonagonal number.",
        "code": "def is_nonagonal(n*\r\n  return (n*(n*9 - 9))//2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 641,
        "precondition": "n is an integer.",
        "test_list": [
            "assert is_nonagonal(10) == 325",
            "assert is_nonagonal(15) == 750",
            "assert is_nonagonal(18) == 1089"
        ]
    },
    "643": {
        "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "def text_match_wordz_middle(text):\r\n    return text.count('z') == text.count('z', 1, -2)\r\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 643,
        "precondition": "text is a string.",
        "test_list": [
            "assert text_match_wordz_middle(\"pythonzabc.\")==True",
            "assert text_match_wordz_middle(\"zxyabc.\")==False",
            "assert text_match_wordz_middle(\"  lang  .\")==False"
        ]
    },
    "644": {
        "specification": "Write a python function to reverse an array upto a given position.",
        "code": "def reverse_Array_Upto_K(arr, k):\r\n    arr[:] = (arr[k-1::-1] + arr[k:]) \n    return arr\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 644,
        "precondition": "arr is a list of elements and k is an integer such that 0 <= k <= len(arr).",
        "test_list": [
            "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ]
    },
    "720": {
        "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "code": "def add_dict_to_tuple(tup, dct):\r\n    return tup + (dct,)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 720,
        "precondition": "tup is a tuple and dct is a dictionary.",
        "test_list": [
            "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
            "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
            "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        ]
    },
    "721": {
        "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "import numpy as np\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    dp = np.zeros((n, n))\n    dp[0, 0] = cost[0][0]\n    for i in range(1, n):\n        dp[i, 0] = dp[i-1, 0] + cost[i][0]\n        dp[0, i] = dp[0, i-1] + cost[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i][j]\n    total = dp[n-1, n-1]\n    cells\\_visited = (n-1)*(n-1)\n    return total/(cells_visited+1)\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 721,
        "precondition": "cost is a list of lists where each element cost[i][j] is a non-negative integer, and N is the size of the square matrix such that len(cost) = len(cost[0]) = N.",
        "test_list": [
            "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2",
            "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
            "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2",
            "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"
        ]
    },
    "722": {
        "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "def filter_data(students, min_height, min_weight):\r\n    result = {}\\\n    for key, value in students.items():\r\n        if value[0] > min_height and value[1] > min_weight:\r\n            result[key] = value\r\n    return result\r\nfilter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70) == {'Cierra Vega': (6.2, 70)} # test case\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 722,
        "precondition": "students is a dictionary with string keys and tuple values, where each tuple contains two floats (student\\_height, student\\_weight), min\\_height is a float, and min\\_weight is a float.",
        "test_list": [
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
        ]
    },
    "723": {
        "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "code": "def count_same_pair(lst1, lst2):\r\n    count = 0\r\n    for i in range(len(lst1));\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 723,
        "precondition": "lst1 and lst2 are lists of the same length.",
        "test_list": [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
            "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"
        ]
    },
    "724": {
        "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "def power_base_sum(base, power):\r\n    result = 0\r\n    for i in range(1, power+1):\r\n        result += sum(int(digit) for digit in str(base**power))\r\n    return result\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 724,
        "precondition": "base and power are integers.",
        "test_list": [
            "assert power_base_sum(2,100)==115",
            "assert power_base_sum(8,10)==37",
            "assert power_base_sum(8,15)==62",
            "assert power_base_sum(3,3)==9"
        ]
    },
    "725": {
        "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "import re\r\ndef extract_quotation(s):\r\n  result = re.findall('\"(.*?)\"', s)\r\n  return result\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 725,
        "precondition": "s is a string.",
        "test_list": [
            "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
            "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
            "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
            "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"
        ]
    },
    "726": {
        "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "code": "def multiply_elements(t\\_in)\r\n    return tuple(t\\_in[i] * t\\_in[i+1] for i in range(len(t\\_in)-1))\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 726,
        "precondition": "t\\_in is a tuple of numbers with length greater than or equal to 2.",
        "test_list": [
            "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
            "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
            "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
            "assert multiply_elements((12,)) == ()"
        ]
    },
    "728": {
        "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "def sum_list(list1, list2):\r\n    return tuple(map(operator.add, list1, list2))\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 728,
        "precondition": "list1 and list2 are lists of the same length.",
        "test_list": [
            "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
            "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
            "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
        ]
    },
    "730": {
        "specification": "Write a function to remove consecutive duplicates of a given list.",
        "code": "def consecutive_duplicates(numbers):\r\n    result = [numbers[0]]\r\n    for i in range(1,len(numbers):\r\n        if numbers[i] != numbers[i-1]:\r\n            result.append(numbers[i])\r\n    return result\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 730,
        "precondition": "numbers is a list of elements.",
        "test_list": [
            "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
            "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"
        ]
    },
    "731": {
        "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "import math\r\ndef lateralsurface_cone(r, h):\r\n    return math.pi * r * math.sqrt(h**2 + r**2)\r\nassert lateralsurface_cone(5,12)==204.20352248333654\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 731,
        "precondition": "r and h are real numbers such that r > 0 and h > 0.",
        "test_list": [
            "assert lateralsurface_cone(5,12)==204.20352248333654",
            "assert lateralsurface_cone(10,15)==566.3586699569488",
            "assert lateralsurface_cone(19,17)==1521.8090132193388"
        ]
    },
    "732": {
        "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "def replace_specialchar(s):\r\n    for char in [',','.',' ']:\r\n        s = s.replace(char, ':')\r\n    return s\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 732,
        "precondition": "s is a string.",
        "test_list": [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ]
    },
    "733": {
        "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "def find_first_occurrence(arr, target):\r\n    left, right = 0, len(arr) - 1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] < target:\r\n            left = mid + 1\r\n        elif arr[mid] > target:\r\n            right = mid - 1\r\n        else:\r\n            if mid == 0 or arr[mid - 1] != target:\r\n                return mid\r\n            else:\r\n                right = mid - 1\r\n    return -1\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 733,
        "precondition": "arr is a sorted list of integers, and target is an integer.",
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ]
    },
    "734": {
        "specification": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "def sum_Of_Subarray_Prod(arr:\r\n    n = len(arr)\r\n    res = 0\r\n    for i in range(n)\r\n        prod = 1\r\n        for j in range(i, n):\r\n            prod *= arr[j]\r\n            res += prod\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 734,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3]) == 20",
            "assert sum_Of_Subarray_Prod([1,2]) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"
        ]
    },
    "735": {
        "specification": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "def toggle_middle_bits(n):\r\n    n = n ^ ((n & (n - 1)) ^ (n & (n + 1)) & (n - 1) & (n + 1))\r\n    return n\n",
        "total_tests": 5,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 735,
        "precondition": "n is an integer.",
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13",
            "assert toggle_middle_bits(0b1000001) == 0b1111111",
            "assert toggle_middle_bits(0b1001101) == 0b1110011"
        ]
    },
    "736": {
        "specification": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php",
        "code": "def left_insertion(arr, target):\r\n    if arr == []:\r\n        return 0\r\n    low, high = 0, len(arr) - 1\r\n    mid = 0\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == target:\r\n            return mid\r\n        elif arr[mid] < target:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    if arr[mid] < target:\r\n        return mid + 1\r\n    elif arr[mid-1] >= target:\r\n        return mid\r\n    else:\r\n        return mid - 1\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 736,
        "precondition": "arr is a sorted list of integers, and target is an integer such that -inf < target < inf.",
        "test_list": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ]
    },
    "737": {
        "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "import re\r\ndef check_str(word):\r\n    if re.search(r'^[aeiouAEIOU]',word):\r\n        return True\r\n    else:\r\n        return False\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 737,
        "precondition": "word is a string.",
        "test_list": [
            "assert check_str(\"annie\")",
            "assert not check_str(\"dawood\")",
            "assert check_str(\"Else\")"
        ]
    },
    "738": {
        "specification": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php",
        "code": "import math\r\ndef geometric_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return geometric_sum(n-1) * 0.5\r\ngeometric_sum(7)\r\n# 1.9921875\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 738,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
        ]
    },
    "739": {
        "specification": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "def isTriangular(x):\r\n    return (x*(x+1))//2 - math.floor((x*(x+1))/2 + 1) == 0\n\ndef find_Index(n):\r\n    i = 1\r\n    while True:\r\n        if len(str((i*(i+1))//2)) == n:\r\n            if isTriangular(i:\r\n                return i\r\n        i += 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 739,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert find_Index(2) == 4",
            "assert find_Index(3) == 14",
            "assert find_Index(4) == 45"
        ]
    },
    "740": {
        "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/",
        "code": "def tuple_to_dict(tupp): \r\n    if not tupp: \r\n        return {} \r\n    else:\r\n        return {tupp[i]: tupp[i+1] for i in range(0,len(tupp)-1,2)}\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 740,
        "precondition": "tupp is a tuple with an even number of elements.",
        "test_list": [
            "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
            "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
            "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
        ]
    },
    "741": {
        "specification": "Write a python function to check whether all the characters are same or not.",
        "code": "def all_Characters_Same(string):\r\n    if len(set(string)) == 1:\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 741,
        "precondition": "string is a non-empty string.",
        "test_list": [
            "assert all_Characters_Same(\"python\") == False",
            "assert all_Characters_Same(\"aaa\") == True",
            "assert all_Characters_Same(\"data\") == False"
        ]
    },
    "742": {
        "specification": "Write a function to caluclate the area of a tetrahedron.",
        "code": "import math\ndef area_of_triangle(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\ndef area_tetrahedron(edge):\n    ab = edge\n    ac = edge\n    ad = edge\n    bc = edge\n    bd = edge\n    cd = edge\n    abcd = math.sqrt(ab * bc * cd * math.sin(math.acos((ab * ab + bc * bc - bd * bd) / (2 * ab * bc))))\n    area = 4 * area_of_triangle(ab, bc, cd) / 3\n    return area\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 742,
        "precondition": "edge is a positive real number.",
        "test_list": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ]
    },
    "743": {
        "specification": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/",
        "code": "def rotate_right(arr, shift\\_by):\r\n    n = len(arr)\r\n    shift\\_by = shift\\_by % n\r\n    if shift\\_by == 0:\r\n        return arr\r\n    else:\r\n        return arr[n-shift\\_by:] + arr[:n-shift\\_by]\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 743,
        "precondition": "arr is a list of elements, and shift\\_by is an integer such that 0 <= shift\\_by < len(arr).",
        "test_list": [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
        ]
    },
    "744": {
        "specification": "Write a function to check if the given tuple has any none value or not.",
        "code": "def check_none(tup):\r\n    return any(val is None for val in tup)\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 744,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert check_none((10, 4, 5, 6, None)) == True",
            "assert check_none((7, 8, 9, 11, 14)) == False",
            "assert check_none((1, 2, 3, 4, None)) == True"
        ]
    },
    "745": {
        "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php",
        "code": "def is_divisible_by_its_digits(n)\r\n    for i in str(n):\r\n        if n % int(i) != 0:\r\n            return False\r\n    return True\r\n\r\ndef divisible_by_digits(startnum, endnum):\r\n    div_digits_nums = [x for x in range(startnum, endnum + 1) if is_divisible_by_its_digits(x)]\r\n    return div_digits_nums\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 745,
        "precondition": "startnum and endnum are integers such that startnum <= endnum.",
        "test_list": [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ]
    },
    "746": {
        "specification": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "import math\r\ndef sector_area(radius, angle):\r\n    if angle > 360:\r\n        return None\r\n    else:\r\n        return (angle/360)*math.pi*(radius**2)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 746,
        "precondition": "radius is a non-negative number, and angle is a number.",
        "test_list": [
            "assert sector_area(4,45)==6.283185307179586",
            "assert sector_area(9,45)==31.808625617596654",
            "assert sector_area(9,361)==None"
        ]
    },
    "747": {
        "specification": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "def dp(X, Y, Z, m, n, p):\n    L = [[[0 for x in range(p+1)] for y in range(n+1)] for z in range(m+1)]\n\n    for i in range(0, m+1):\n        for j in range(0, n+1):\n            for k in range(0, p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][p]\n\ndef lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    return dp(X, Y, Z, m, n, p)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 747,
        "precondition": "X, Y and Z are strings.",
        "test_list": [
            "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2",
            "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5",
            "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"
        ]
    },
    "748": {
        "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "def capital_words_spaces(s):\r\n  return ' '.join(word if word.islower() else word.capitalize() for word in s.split(\"\"))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 748,
        "precondition": "s is a string.",
        "test_list": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ]
    },
    "749": {
        "specification": "Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/",
        "code": "def sort_numeric_strings(arr):\r\n    return sorted(arr, key=int)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 749,
        "precondition": "arr is a list of strings.",
        "test_list": [
            "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
            "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
            "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        ]
    },
    "750": {
        "specification": "Write a function to add the given tuple to the given list.",
        "code": "def add_tuple(lst, tup):\r\n\tlst.append(tup[0])\r\n\tfor i in range(1,len(tup):\r\n\t\tlst.append(tup[i])\r\n\treturn lst\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 750,
        "precondition": "lst is a list and tup is a tuple.",
        "test_list": [
            "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
            "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
            "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
        ]
    },
    "751": {
        "specification": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "def check_min_heap(arr,\r\n\tn = len(arr))\r\n\tfor i in range(n, 0, -1):\r\n\t\troot = i\r\n\t\tleft = 2 * i\r\n\t\tright = 2 * i + 1\r\n\t\tif left < n and arr[left] < arr[root]:\r\n\t\t\troot = left\r\n\t\tif right < n and arr[right] < arr[root]:\r\n\t\t\troot = right\r\n\t\tif root != i:\r\n\t\t\treturn False\r\n\treturn True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 751,
        "precondition": "arr is a list of integers, and n is a non-negative integer such that 0 <= n <= len(arr).",
        "test_list": [
            "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True",
            "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True",
            "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"
        ]
    },
    "752": {
        "specification": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "code": "def jacobsthal_num(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\\*2\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 752,
        "precondition": "n is an integer greater than or equal to 0.",
        "test_list": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5",
            "assert jacobsthal_num(13) == 2731"
        ]
    },
    "753": {
        "specification": "Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases",
        "code": "def min_k(tuplist, k):\r\n    return tuple(sorted(tuplist, key=lambda x: x[1])[:k])\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 753,
        "precondition": "tuplist is a list of tuples, and k is an integer such that 0 <= k <= len(tuplist).",
        "test_list": [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ]
    },
    "754": {
        "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\r\n    if len(l1) == len(l2) == len(l3):\r\n        for i in range(len(l1)-1):\r\n            if l1[i] == l2[i] == l3[i]:\r\n                result.append(l1[i])*\r\n    return result\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 754,
        "precondition": "l1, l2, and l3 are lists of the same length.",
        "test_list": [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
            "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"
        ]
    },
    "755": {
        "specification": "Write a function to find the second smallest number in a list.",
        "code": "def second_smallest(lst):\r\n    sorted\\_lst = sorted(lst)\r\n    if len(set(sorted\\_lst)) == 1:\r\n        return None\r\n    else:\r\n        return sorted\\_lst[1]\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 755,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None",
            "assert second_smallest([2,2,2])==None"
        ]
    },
    "756": {
        "specification": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php",
        "code": "import re\r\ndef text_match_zero_one(text):\r\n    return bool(re.search(r'ab+', text))\r\n\r\nassert text_match_zero_one(\"ac\")==False\n",
        "total_tests": 6,
        "passed_tests": 6,
        "test_result": 1.0,
        "task_id": 756,
        "precondition": "text is a string.",
        "test_list": [
            "assert text_match_zero_one(\"ac\")==False",
            "assert text_match_zero_one(\"dc\")==False",
            "assert text_match_zero_one(\"abbbba\")==True",
            "assert text_match_zero_one(\"dsabbbba\")==True",
            "assert text_match_zero_one(\"asbbbba\")==False",
            "assert text_match_zero_one(\"abaaa\")==True"
        ]
    },
    "757": {
        "specification": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/",
        "code": "def count_reverse_pairs(str_list:\r\n    return (len([(x, y) for x, y in itertools.combinations(str_list, 2) if x == y[::-1]]))\r\n\r\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 757,
        "precondition": "str\\_list is a list of strings.",
        "test_list": [
            "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
            "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1",
            "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"
        ]
    },
    "758": {
        "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "code": "def unique_sublists(lst):\r\n    result = {}\r\n    for i in lst:\r\n        t = tuple(i)\r\n        if t in result:\r\n            result[t] += 1\r\n        else:\r\n            result[t] = 1\r\n    return result\r\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 758,
        "precondition": "lst is a list.",
        "test_list": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
            "assert unique_sublists([['john']])=={('john',): 1}"
        ]
    },
    "759": {
        "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "import re\r\ndef is_decimal(number)\r\n    pattern = r'^\\d{1,}(\\.\\d{1,2})?$'\r\n    if re.match(pattern, number):\r\n        return True\r\n    else:\r\n        return False\n",
        "total_tests": 5,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 759,
        "precondition": "number is a string.",
        "test_list": [
            "assert is_decimal('123.11')==True",
            "assert is_decimal('e666.86')==False",
            "assert is_decimal('3.124587')==False",
            "assert is_decimal('1.11')==True",
            "assert is_decimal('1.1.11')==False"
        ]
    },
    "760": {
        "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "code": "def unique_Element(num)\r\n    return len(set(num)) == 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 760,
        "precondition": "num is a list of integers.",
        "test_list": [
            "assert unique_Element([1,1,1]) == True",
            "assert unique_Element([1,2,1,2]) == False",
            "assert unique_Element([1,2,3,4,5]) == False"
        ]
    },
    "762": {
        "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "def check_monthnumber_number(month)\r\n\tif month > 0 and month < 13:\r\n\t\tif (month == 4 or month == 6 or month == 9 or month == 11):\r\n\t\t\treturn True\r\n\t\telif month == 2:\r\n\t\t\treturn False\r\n\t\telse:\r\n\t\t\treturn True\r\n\telse:\r\n\t\treturn False\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 762,
        "precondition": "month is an integer between 1 and 12 (inclusive).",
        "test_list": [
            "assert check_monthnumber_number(6)==True",
            "assert check_monthnumber_number(2)==False",
            "assert check_monthnumber_number(12)==False"
        ]
    },
    "763": {
        "specification": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "def find_min_diff(arr, n)\r\n{\r\n    arr.sort()\r\n    min_diff = float('inf')\r\n    for i in range(n-1)\r\n    {\r\n        diff = abs(arr[i+1] - arr[i])\r\n        if diff < min_diff:\r\n            min_diff = diff\r\n    }\r\n    return min_diff\r\n}\r\nassert find_min_diff((1,5,3,19,18,25),6) == 1\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 763,
        "precondition": "arr is a list of integers, and n is the length of arr.",
        "test_list": [
            "assert find_min_diff((1,5,3,19,18,25),6) == 1",
            "assert find_min_diff((4,3,2,6),4) == 1",
            "assert find_min_diff((30,5,20,9),4) == 4"
        ]
    },
    "764": {
        "specification": "Write a python function to count number of digits in a given string.",
        "code": "def number_ctr(str1)\r\n    count = 0\r\n    for j in str1:\r\n        if j.isdigit():\r\n            count += 1\r\n    return count\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 764,
        "precondition": "str1 is a string.",
        "test_list": [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') == 1",
            "assert number_ctr('123') == 3",
            "assert number_ctr('3wond-1ers2') == 3"
        ]
    },
    "765": {
        "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "def is_polite(n):\r\n    if n<=0:\r\n        return False\r\n    count = 0\r\n    sum = 0\r\n    i = 1\r\n    while count < n:\r\n        sum += i\r\n        count += 1\r\n        i += 1\r\n        if sum >= n:\r\n            if is_polite_check(sum, count):\r\n                return sum\r\n            sum -= i\r\n            count -= 1\r\n            i -= 1\r\n    return -1\r\ndef is_polite_check(sum, count):\r\n    if count % 2 == 0:\r\n        mid = int(count / 2)\r\n        return (sum - mid) == mid\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 765,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert is_polite(7) == 11",
            "assert is_polite(4) == 7",
            "assert is_polite(9) == 13"
        ]
    },
    "766": {
        "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "code": "def pair_wise(lst):\r\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 766,
        "precondition": "lst is a list with at least one element.",
        "test_list": [
            "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
            "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
            "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]",
            "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        ]
    },
    "767": {
        "specification": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
        "code": "def get_pairs_count(numbers, sum:\r\n    count = 0\r\n    for i in range(len(numbers));\r\n        for j in range(i+1, len(numbers));\r\n            if numbers[i] + numbers[j] == sum:\r\n                count += 1 \r\n    return count\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 767,
        "precondition": "numbers is a list of integers and sum is an integer.",
        "test_list": [
            "assert get_pairs_count([1,1,1,1],2) == 6",
            "assert get_pairs_count([1,5,7,-1,5],6) == 3",
            "assert get_pairs_count([1,-2,3],1) == 1",
            "assert get_pairs_count([-1,-2,3],-3) == 1"
        ]
    },
    "769": {
        "specification": "Write a python function to get the difference between two lists.",
        "code": "def Diff(lst1, lst2):\r\n    return tuple(list(set(lst1) - set(lst2)))\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 769,
        "precondition": "lst1 and lst2 are lists.",
        "test_list": [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ]
    },
    "770": {
        "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "code": "def odd_num_sum(n):\r\n    result = 0\r\n    for i in range(1, n*2, 2):\r\n        result += i**4 \r\n    return result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 770,
        "precondition": "n is a positive integer.",
        "test_list": [
            "assert odd_num_sum(2) == 82",
            "assert odd_num_sum(3) == 707",
            "assert odd_num_sum(4) == 3108"
        ]
    },
    "771": {
        "specification": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "def check_expression(exp)\r\n{\r\n    stack = []\r\n    mapping = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\")\r\n    for char in exp:\r\n        if char in mapping:\r\n            stack.append(mapping[char] )\r\n        elif len(stack) == 0 or stack.pop() != char:\r\n            return False\r\n    return len(stack) == 0\r\n\r\nassert check_expression(\"{()}[{}]\") == True\r\nassert check_expression(\"([)]\")\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 771,
        "precondition": "exp is a string containing only parentheses (), braces {}, and brackets [].",
        "test_list": [
            "assert check_expression(\"{()}[{}]\") == True",
            "assert check_expression(\"{()}[{]\") == False",
            "assert check_expression(\"{()}[{}][]({})\") == True"
        ]
    },
    "772": {
        "specification": "Write a function to remove all the words with k length in the given string.",
        "code": "def remove_length(str, k):\n    return ' '.join(word for word in str.split() if len(word) != k)\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 772,
        "precondition": "str is a string and k is an integer.",
        "test_list": [
            "assert remove_length('The person is most value tet', 3) == 'person is most value'",
            "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
            "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
        ]
    },
    "773": {
        "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "def occurance_substring(s, sub\\_str):\r\n\tmatch = s.find(sub\\_str)\r\n\tif match == -1:\r\n\t\treturn None\r\n\telse:\r\n\t\treturn (sub\\_str, s.index(sub\\_str), s.index(sub\\_str) + len(sub\\_str) - 1)\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 773,
        "precondition": "s is a string and sub\\_str is a string.",
        "test_list": [
            "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
            "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
            "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
            "assert occurance_substring('c++ programming, c++ language','python')==None"
        ]
    },
    "775": {
        "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "code": "def odd_position(lst):\r\n  for i in range(len(lst):\r\n    if i % 2 != 0 and lst[i] % 2 == 0:\r\n      return False\r\n  return True\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 775,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ]
    },
    "776": {
        "specification": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "def count_vowels(s):\r\n    count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i] in 'aeiou' and s[i+1] in 'aeiou:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 776,
        "precondition": "s is a string.",
        "test_list": [
            "assert count_vowels('bestinstareels') == 7",
            "assert count_vowels('partofthejourneyistheend') == 12",
            "assert count_vowels('amazonprime') == 5"
        ]
    },
    "777": {
        "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
        "code": "def find_sum(lst /***/\r\n    unique_lst = list(set(lst))\r\n    return sum(unique_lst)\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 777,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert find_sum([1,2,3,1,1,4,5,6]) == 21",
            "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71",
            "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"
        ]
    },
    "778": {
        "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "code": "def pack_consecutive_duplicates(lst):\r\n    if not lst:\r\n        return []\n    else:\r\n        pack = [lst[0]]\r\n        for i in range(1, len(lst));\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 778,
        "precondition": "lst is a list.",
        "test_list": [
            "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
            "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
            "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        ]
    },
    "779": {
        "specification": "Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.",
        "code": "def unique_sublists(lst):\r\n\tresult = {}\r\n\tfor i in lst:\r\n\t\ttpl = tuple(i)\r\n\t\tif tpl in result:\r\n\t\t\tresult[tpl] += 1\r\n\t\telse:\r\n\t\t\tresult[tpl] = 1\r\n\treturn result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 779,
        "precondition": "lst is a list.",
        "test_list": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
        ]
    },
    "780": {
        "specification": "Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/",
        "code": "def find_combinations(lst):\r\n    res = []\r\n    for i in range(len(lst))\r\n        for j in range(i+1,len(lst)+1):\r\n            if sum(lst[i]) + sum(lst[j]) not in res:\r\n                res.append(sum(lst[i]) + sum(lst[j]))\r\n    return tuple(res)\r\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 780,
        "precondition": "lst is a list of tuples, where each tuple contains non-negative integers.",
        "test_list": [
            "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
            "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
            "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        ]
    },
    "781": {
        "specification": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php",
        "code": "def count_divisors(n):\r\n    count = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 781,
        "precondition": "n is a non-negative integer.",
        "test_list": [
            "assert count_divisors(10)",
            "assert not count_divisors(100)",
            "assert count_divisors(125)"
        ]
    },
    "782": {
        "specification": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "def odd_length_sum(arr):\r\n\tn = len(arr)\r\n\tresult = 0\r\n\tfor i in range(n):\r\n\t\tfor j in range(i, n):\r\n\t\t\tif (j - i + 1) % 2 != 0:\r\n\t\t\t\tresult += sum(arr[i:j+1])\r\n\treturn result\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 782,
        "precondition": "arr is a list of numbers.",
        "test_list": [
            "assert odd_length_sum([1,2,4]) == 14",
            "assert odd_length_sum([1,2,1,2]) == 15",
            "assert odd_length_sum([1,7]) == 8"
        ]
    },
    "783": {
        "specification": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "import math\r\ndef rgb_to_hsv(r, g, b):\r\n    max_value = max(r, g, b)\r\n    min_value = min(r, g, b)\r\n    diff = max_value - min_value\r\n    h = 0\r\n    if (diff != 0):\r\n        if (max_value == r):\r\n            h = (60 * (((g - b) / diff) % 6))\r\n        elif (max_value == g):\r\n            h = (60 * (((b - r) / diff) + 2))\r\n        else:\r\n            h = (60 * (((r - g) / diff) + 4))\r\n    if h < 0:\r\n        h += 360\r\n    s = (max_value - min_value)/max_value\r\n    v = max_value\r\n    hsv = (h, s*100, v*100)\r\n    return hsv\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 783,
        "precondition": "r, g, b are integers such that 0 <= r, g, b <= 255.",
        "test_list": [
            "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
            "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
            "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        ]
    },
    "784": {
        "specification": "Write a function to find the product of first even and odd number of a given list.",
        "code": "def mul_even_odd(numbers):\r\n    even = next((x for x in numbers if x % 2 == 0), None)\r\n    odd = next((x for x in numbers if x % 2 != 0), None)\r\n    if even and odd:\r\n        return even * odd\r\n    else:\r\n        return 0\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 784,
        "precondition": "numbers is a list of integers.",
        "test_list": [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ]
    },
    "785": {
        "specification": "Write a function to convert tuple string to integer tuple.",
        "code": "import ast\r\ndef tuple_str_int(tup\\_str):\r\n\treturn ast.literal\\_eval(tup\\_str)\r\ntup\\_str = \"(7, 8, 9)\"\r\nprint(tuple\\_str\\_int(tup\\_str))\r\n(7, 8, 9)\r\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 785,
        "precondition": "tup\\_str is a string representing a tuple of integers.",
        "test_list": [
            "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
            "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
            "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
            "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"
        ]
    },
    "786": {
        "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "def right_insertion(arr, x):\r\n\tn = len(arr)\r\n\tfor i in range(0, n):\r\n\t\tif x <= arr[i]:\r\n\t\t\treturn i\r\n\treturn n\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 786,
        "precondition": "arr is a list of comparable elements and x is a comparable value.",
        "test_list": [
            "assert right_insertion([1,2,4,5],6)==4",
            "assert right_insertion([1,2,4,5],3)==2",
            "assert right_insertion([1,2,4,5],7)==4"
        ]
    },
    "787": {
        "specification": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "import re\r\ndef text_match_three(text)\r\n    if re.search(r\"abbb\", text):\r\n        return True\r\n    return False\n",
        "total_tests": 4,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 787,
        "precondition": "text is a string.",
        "test_list": [
            "assert not text_match_three(\"ac\")",
            "assert not text_match_three(\"dc\")",
            "assert text_match_three(\"abbbba\")",
            "assert text_match_three(\"caacabbbba\")"
        ]
    },
    "788": {
        "specification": "Write a function to create a new tuple from the given string and list.",
        "code": "def new_tuple(t, s):\r\n    t.append(s)\r\n    res = tuple(t)\r\n    return res\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 788,
        "precondition": "t is a mutable list and s is a string.",
        "test_list": [
            "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
            "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
            "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
        ]
    },
    "790": {
        "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
        "code": "def even_position(my_list):\r\n    for i in range(0,len(my_list),2):\r\n        if my_list[i] % 2 != 0:\r\n            return False\r\n    return True\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 790,
        "precondition": "my\\_list is a list of integers.",
        "test_list": [
            "assert even_position([3,2,1]) == False",
            "assert even_position([1,2,3]) == False",
            "assert even_position([2,1,4]) == True"
        ]
    },
    "791": {
        "specification": "Write a function to remove tuples from the given tuple.",
        "code": "def remove_nested(tup):\r\n    result = []\r\n    for i in tup:\r\n        if type(i) != tuple:\r\n            result.append(i)\r\n    return tuple(result)\r\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 791,
        "precondition": "tup is a tuple.",
        "test_list": [
            "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
            "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
            "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
            "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"
        ]
    },
    "792": {
        "specification": "Write a python function to count the number of lists in a given number of lists.",
        "code": "def count_list(lst):\r\n    return len(lst)\r\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 792,
        "precondition": "lst is a list.",
        "test_list": [
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
            "assert count_list([[1,2],[2,3],[4,5]]) == 3",
            "assert count_list([[1,0],[2,0]]) == 2"
        ]
    },
    "793": {
        "specification": "Write a python function to find the last position of an element in a sorted array.",
        "code": "def last(arr, x):\r\n  if x not in arr:\r\n    return -1 \r\n  else:\r\n    return arr.index(x, arr.index(x)+1)</s\r\n \nassert last([1,2,3],1) == 0\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 793,
        "precondition": "arr is a sorted list of integers and x is an integer.",
        "test_list": [
            "assert last([1,2,3],1) == 0",
            "assert last([1,1,1,2,3,4],1) == 2",
            "assert last([2,3,2,3,6,8,9],3) == 3"
        ]
    },
    "794": {
        "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "import re\ndef text_starta_endb(string):\n    return bool(re.search(r'a.*b$', string))\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 794,
        "precondition": "string is a string.",
        "test_list": [
            "assert text_starta_endb(\"aabbbb\")",
            "assert not text_starta_endb(\"aabAbbbc\")",
            "assert not text_starta_endb(\"accddbbjjj\")"
        ]
    },
    "796": {
        "specification": "Write function to find the sum of all items in the given dictionary.",
        "code": "def return_sum(dictionary:\r\n    sum = 0\r\n    for key, value in dictionary.items:\r\n        sum += value\r\n    return sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 796,
        "precondition": "dictionary is a dictionary.",
        "test_list": [
            "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
            "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
            "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
        ]
    },
    "797": {
        "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "code": "def sum_in_range(l, r)\r\n\tsum = 0\r\n\twhile l<=r:\r\n\t\tif l % 2 != 0:\r\n\t\t\tsum += l\r\n\t\tl += 1\r\n\treturn sum\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 797,
        "precondition": "l and r are integers such that l <= r >= 0.",
        "test_list": [
            "assert sum_in_range(2,5) == 8",
            "assert sum_in_range(5,7) == 12",
            "assert sum_in_range(7,13) == 40"
        ]
    },
    "798": {
        "specification": "Write a python function to find the sum of an array.",
        "code": "def _sum(array):\r\n    return sum(array)\r\nassert _sum([1, 2, 3]) == 6\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 798,
        "precondition": "array is a list of numbers.",
        "test_list": [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ]
    },
    "799": {
        "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "def left_rotate(n, d):\r\n    return (n << d) & 0xFFFFFFFF\n",
        "total_tests": 7,
        "passed_tests": 7,
        "test_result": 1.0,
        "task_id": 799,
        "precondition": "n is an integer such that -2147483648 <= n <= 2147483647 and d is an integer such that 0 <= d <= 31.",
        "test_list": [
            "assert left_rotate(16,2) == 64",
            "assert left_rotate(10,2) == 40",
            "assert left_rotate(99,3) == 792",
            "assert left_rotate(99,3) == 792",
            "assert left_rotate(0b0001,3) == 0b1000",
            "assert left_rotate(0b0101,3) == 0b101000",
            "assert left_rotate(0b11101,3) == 0b11101000"
        ]
    },
    "800": {
        "specification": "Write a function to remove all whitespaces from a string.",
        "code": "def remove_all_spaces(input_string):\r\n    return ''.join(input_string.split())\n",
        "total_tests": 4,
        "passed_tests": 4,
        "test_result": 1.0,
        "task_id": 800,
        "precondition": "input\\_string is a string.",
        "test_list": [
            "assert remove_all_spaces('python  program')==('pythonprogram')",
            "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
            "assert remove_all_spaces('python                     program')==('pythonprogram')",
            "assert remove_all_spaces('   python                     program')=='pythonprogram'"
        ]
    },
    "801": {
        "specification": "Write a python function to count the number of equal numbers from three given integers.",
        "code": "def test_three_equal(a, b, c):\r\n    count = 0\r\n    if a == b:\r\n        count += 1\r\n    if a == c:\r\n        count += 1\r\n    if b == c:\r\n        count += 1\r\n    return count\n",
        "total_tests": 3,
        "passed_tests": 2,
        "test_result": 0.6666666666666666,
        "task_id": 801,
        "precondition": "a, b, and c are integers.",
        "test_list": [
            "assert test_three_equal(1,1,1) == 3",
            "assert test_three_equal(-1,-2,-3) == 0",
            "assert test_three_equal(1,2,2) == 2"
        ]
    },
    "802": {
        "specification": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "def count_rotation(arr')\r\n    start = 0\r\n    end = len(arr) - 1\r\n    while start < end and arr[start] <= arr[end]\r\n        mid = start + (end - start) // 2\r\n        if arr[mid] > arr[end]\r\n            start = mid + 1\r\n        else\r\n            end = mid\r\n    return len(arr) - start\n",
        "total_tests": 5,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 802,
        "precondition": "arr is a list of integers.",
        "test_list": [
            "assert count_rotation([3,2,1]) == 1",
            "assert count_rotation([4,5,1,2,3]) == 2",
            "assert count_rotation([7,8,9,1,2,3]) == 3",
            "assert count_rotation([1,2,3]) == 0",
            "assert count_rotation([1,3,2]) == 2"
        ]
    },
    "803": {
        "specification": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "import math\ndef is_perfect_square(n):\n    sqrt = int(math.sqrt(n))\n    return sqrt*sqrt == n\n",
        "total_tests": 6,
        "passed_tests": 6,
        "test_result": 1.0,
        "task_id": 803,
        "precondition": "n is an integer greater than or equal to 0.",
        "test_list": [
            "assert not is_perfect_square(10)",
            "assert is_perfect_square(36)",
            "assert not is_perfect_square(14)",
            "assert is_perfect_square(14*14)",
            "assert not is_perfect_square(125)",
            "assert is_perfect_square(125*125)"
        ]
    },
    "804": {
        "specification": "Write a function to check whether the product of numbers in a list is even or not.",
        "code": "def is_product_even(lst):\r\n\treturn not all(map(lambda x: x%2!=0, lst))\r\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 804,
        "precondition": "lst is a list of integers.",
        "test_list": [
            "assert is_product_even([1,2,3])",
            "assert is_product_even([1,2,1,4])",
            "assert not is_product_even([1,1])"
        ]
    },
    "805": {
        "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "code": "def max_sum_list(lstOfLst):\r\n\tmaxSum = 0\r\n\tmaxList = []\r\n\tfor i in lstOfLst:\r\n\t\tif sum(i) > maxSum:\r\n\t\t\tmaxSum = sum(i)\r\n\t\t\tmaxList = i\r\n\treturn maxList\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 805,
        "precondition": "lstOfLst is a list of lists of numbers.",
        "test_list": [
            "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
            "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]",
            "assert max_sum_list([[2,3,1]])==[2,3,1]"
        ]
    },
    "806": {
        "specification": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "def max_run_uppercase(s):\r\n    count = 0\r\n    max_count = 0\r\n    for i in range(len(s)-1):\r\n        if s[i].isupper()\r\n            and s[i+1].isupper:\r\n                count += 1\r\n                if count > max\\_count:\r\n                    max\\_count = count\r\n            else:\r\n                count = 0\r\n    return max\\_count + 1\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 806,
        "precondition": "s is a string.",
        "test_list": [
            "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
            "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
            "assert max_run_uppercase('GooGLEFluTTER') == 4"
        ]
    },
    "807": {
        "specification": "Write a python function to find the first odd number in a given list of numbers.",
        "code": "def first_odd(numbers):\r\n  for i in numbers:\r\n    if i % 2 != 0:\r\n      return i\r\n  return None\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 807,
        "precondition": "numbers is a list of integers.",
        "test_list": [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ]
    },
    "808": {
        "specification": "Write a function to check if the given tuples contain the k or not.",
        "code": "def check_K(tup, k):\r\n    for i in tup:\r\n        if i == k:\r\n            return True\r\n    return False\n",
        "total_tests": 3,
        "passed_tests": 3,
        "test_result": 1.0,
        "task_id": 808,
        "precondition": "tup is a tuple and k is a comparison value.",
        "test_list": [
            "assert check_K((10, 4, 5, 6, 8), 6) == True",
            "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
            "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
        ]
    },
    "809": {
        "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "code": "def check_smaller(tup1, tup2):\r\n    for i in range(len(tup1):\r\n        if tup1[i] >= tup2[i]:\n            return False\n    return True\n",
        "total_tests": 3,
        "passed_tests": 0,
        "test_result": 0.0,
        "task_id": 809,
        "precondition": "tup1 and tup2 are tuples of the same length.",
        "test_list": [
            "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
            "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
            "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
        ]
    }
}